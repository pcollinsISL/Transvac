'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("TransvacDataV2DataSet1"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class TransvacDataV2DataSet1
    Inherits Global.System.Data.DataSet
    
    Private tableaccctl As accctlDataTable
    
    Private tableaccount As accountDataTable
    
    Private tableaddnotes As addnotesDataTable
    
    Private tableassets As assetsDataTable
    
    Private tableASSETSNEW As ASSETSNEWDataTable
    
    Private tableatrans As atransDataTable
    
    Private tablebinalloc As binallocDataTable
    
    Private tablecat As catDataTable
    
    Private tablecountry As countryDataTable
    
    Private tablecustdisc As custdiscDataTable
    
    Private tabledummy_ As dummy_DataTable
    
    Private tableenquiry As enquiryDataTable
    
    Private tableevent As eventDataTable
    
    Private tablefoxuser As foxuserDataTable
    
    Private tableinvline As invlineDataTable
    
    Private tableinvoicehead As invoiceheadDataTable
    
    Private tableinvtrans As invtransDataTable
    
    Private tableinvtransold As invtransoldDataTable
    
    Private tableinvtransold6 As invtransold6DataTable
    
    Private tableinvwork As invworkDataTable
    
    Private tableinvworkold As invworkoldDataTable
    
    Private tableissue As issueDataTable
    
    Private tablelocation As locationDataTable
    
    Private tablemain As mainDataTable
    
    Private tablemarkup As markupDataTable
    
    Private tablenames As namesDataTable
    
    Private tableorddetail As orddetailDataTable
    
    Private tableorderhead As orderheadDataTable
    
    Private tableorderline As orderlineDataTable
    
    Private tableqictrl As qictrlDataTable
    
    Private tableqictrlnew As qictrlnewDataTable
    
    Private tableqictrlold As qictrloldDataTable
    
    Private tableqictrlold6 As qictrlold6DataTable
    
    Private tablequotedetail As quotedetailDataTable
    
    Private tablequotehead As quoteheadDataTable
    
    Private tablestatus As statusDataTable
    
    Private tabletevents As teventsDataTable
    
    Private tabletran2 As tran2DataTable
    
    Private tabletranbins As tranbinsDataTable
    
    Private tabletranctl As tranctlDataTable
    
    Private tabletrandesc As trandescDataTable
    
    Private tabletranmemo As tranmemoDataTable
    
    Private tableAddressRecordType As AddressRecordTypeDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("accctl")) Is Nothing) Then
                MyBase.Tables.Add(New accctlDataTable(ds.Tables("accctl")))
            End If
            If (Not (ds.Tables("account")) Is Nothing) Then
                MyBase.Tables.Add(New accountDataTable(ds.Tables("account")))
            End If
            If (Not (ds.Tables("addnotes")) Is Nothing) Then
                MyBase.Tables.Add(New addnotesDataTable(ds.Tables("addnotes")))
            End If
            If (Not (ds.Tables("assets")) Is Nothing) Then
                MyBase.Tables.Add(New assetsDataTable(ds.Tables("assets")))
            End If
            If (Not (ds.Tables("ASSETSNEW")) Is Nothing) Then
                MyBase.Tables.Add(New ASSETSNEWDataTable(ds.Tables("ASSETSNEW")))
            End If
            If (Not (ds.Tables("atrans")) Is Nothing) Then
                MyBase.Tables.Add(New atransDataTable(ds.Tables("atrans")))
            End If
            If (Not (ds.Tables("binalloc")) Is Nothing) Then
                MyBase.Tables.Add(New binallocDataTable(ds.Tables("binalloc")))
            End If
            If (Not (ds.Tables("cat")) Is Nothing) Then
                MyBase.Tables.Add(New catDataTable(ds.Tables("cat")))
            End If
            If (Not (ds.Tables("country")) Is Nothing) Then
                MyBase.Tables.Add(New countryDataTable(ds.Tables("country")))
            End If
            If (Not (ds.Tables("custdisc")) Is Nothing) Then
                MyBase.Tables.Add(New custdiscDataTable(ds.Tables("custdisc")))
            End If
            If (Not (ds.Tables("dummy_")) Is Nothing) Then
                MyBase.Tables.Add(New dummy_DataTable(ds.Tables("dummy_")))
            End If
            If (Not (ds.Tables("enquiry")) Is Nothing) Then
                MyBase.Tables.Add(New enquiryDataTable(ds.Tables("enquiry")))
            End If
            If (Not (ds.Tables("event")) Is Nothing) Then
                MyBase.Tables.Add(New eventDataTable(ds.Tables("event")))
            End If
            If (Not (ds.Tables("foxuser")) Is Nothing) Then
                MyBase.Tables.Add(New foxuserDataTable(ds.Tables("foxuser")))
            End If
            If (Not (ds.Tables("invline")) Is Nothing) Then
                MyBase.Tables.Add(New invlineDataTable(ds.Tables("invline")))
            End If
            If (Not (ds.Tables("invoicehead")) Is Nothing) Then
                MyBase.Tables.Add(New invoiceheadDataTable(ds.Tables("invoicehead")))
            End If
            If (Not (ds.Tables("invtrans")) Is Nothing) Then
                MyBase.Tables.Add(New invtransDataTable(ds.Tables("invtrans")))
            End If
            If (Not (ds.Tables("invtransold")) Is Nothing) Then
                MyBase.Tables.Add(New invtransoldDataTable(ds.Tables("invtransold")))
            End If
            If (Not (ds.Tables("invtransold6")) Is Nothing) Then
                MyBase.Tables.Add(New invtransold6DataTable(ds.Tables("invtransold6")))
            End If
            If (Not (ds.Tables("invwork")) Is Nothing) Then
                MyBase.Tables.Add(New invworkDataTable(ds.Tables("invwork")))
            End If
            If (Not (ds.Tables("invworkold")) Is Nothing) Then
                MyBase.Tables.Add(New invworkoldDataTable(ds.Tables("invworkold")))
            End If
            If (Not (ds.Tables("issue")) Is Nothing) Then
                MyBase.Tables.Add(New issueDataTable(ds.Tables("issue")))
            End If
            If (Not (ds.Tables("location")) Is Nothing) Then
                MyBase.Tables.Add(New locationDataTable(ds.Tables("location")))
            End If
            If (Not (ds.Tables("main")) Is Nothing) Then
                MyBase.Tables.Add(New mainDataTable(ds.Tables("main")))
            End If
            If (Not (ds.Tables("markup")) Is Nothing) Then
                MyBase.Tables.Add(New markupDataTable(ds.Tables("markup")))
            End If
            If (Not (ds.Tables("names")) Is Nothing) Then
                MyBase.Tables.Add(New namesDataTable(ds.Tables("names")))
            End If
            If (Not (ds.Tables("orddetail")) Is Nothing) Then
                MyBase.Tables.Add(New orddetailDataTable(ds.Tables("orddetail")))
            End If
            If (Not (ds.Tables("orderhead")) Is Nothing) Then
                MyBase.Tables.Add(New orderheadDataTable(ds.Tables("orderhead")))
            End If
            If (Not (ds.Tables("orderline")) Is Nothing) Then
                MyBase.Tables.Add(New orderlineDataTable(ds.Tables("orderline")))
            End If
            If (Not (ds.Tables("qictrl")) Is Nothing) Then
                MyBase.Tables.Add(New qictrlDataTable(ds.Tables("qictrl")))
            End If
            If (Not (ds.Tables("qictrlnew")) Is Nothing) Then
                MyBase.Tables.Add(New qictrlnewDataTable(ds.Tables("qictrlnew")))
            End If
            If (Not (ds.Tables("qictrlold")) Is Nothing) Then
                MyBase.Tables.Add(New qictrloldDataTable(ds.Tables("qictrlold")))
            End If
            If (Not (ds.Tables("qictrlold6")) Is Nothing) Then
                MyBase.Tables.Add(New qictrlold6DataTable(ds.Tables("qictrlold6")))
            End If
            If (Not (ds.Tables("quotedetail")) Is Nothing) Then
                MyBase.Tables.Add(New quotedetailDataTable(ds.Tables("quotedetail")))
            End If
            If (Not (ds.Tables("quotehead")) Is Nothing) Then
                MyBase.Tables.Add(New quoteheadDataTable(ds.Tables("quotehead")))
            End If
            If (Not (ds.Tables("status")) Is Nothing) Then
                MyBase.Tables.Add(New statusDataTable(ds.Tables("status")))
            End If
            If (Not (ds.Tables("tevents")) Is Nothing) Then
                MyBase.Tables.Add(New teventsDataTable(ds.Tables("tevents")))
            End If
            If (Not (ds.Tables("tran2")) Is Nothing) Then
                MyBase.Tables.Add(New tran2DataTable(ds.Tables("tran2")))
            End If
            If (Not (ds.Tables("tranbins")) Is Nothing) Then
                MyBase.Tables.Add(New tranbinsDataTable(ds.Tables("tranbins")))
            End If
            If (Not (ds.Tables("tranctl")) Is Nothing) Then
                MyBase.Tables.Add(New tranctlDataTable(ds.Tables("tranctl")))
            End If
            If (Not (ds.Tables("trandesc")) Is Nothing) Then
                MyBase.Tables.Add(New trandescDataTable(ds.Tables("trandesc")))
            End If
            If (Not (ds.Tables("tranmemo")) Is Nothing) Then
                MyBase.Tables.Add(New tranmemoDataTable(ds.Tables("tranmemo")))
            End If
            If (Not (ds.Tables("AddressRecordType")) Is Nothing) Then
                MyBase.Tables.Add(New AddressRecordTypeDataTable(ds.Tables("AddressRecordType")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property accctl() As accctlDataTable
        Get
            Return Me.tableaccctl
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property account() As accountDataTable
        Get
            Return Me.tableaccount
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property addnotes() As addnotesDataTable
        Get
            Return Me.tableaddnotes
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property assets() As assetsDataTable
        Get
            Return Me.tableassets
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ASSETSNEW() As ASSETSNEWDataTable
        Get
            Return Me.tableASSETSNEW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property atrans() As atransDataTable
        Get
            Return Me.tableatrans
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property binalloc() As binallocDataTable
        Get
            Return Me.tablebinalloc
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cat() As catDataTable
        Get
            Return Me.tablecat
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property country() As countryDataTable
        Get
            Return Me.tablecountry
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property custdisc() As custdiscDataTable
        Get
            Return Me.tablecustdisc
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dummy_() As dummy_DataTable
        Get
            Return Me.tabledummy_
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property enquiry() As enquiryDataTable
        Get
            Return Me.tableenquiry
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _event() As eventDataTable
        Get
            Return Me.tableevent
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property foxuser() As foxuserDataTable
        Get
            Return Me.tablefoxuser
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property invline() As invlineDataTable
        Get
            Return Me.tableinvline
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property invoicehead() As invoiceheadDataTable
        Get
            Return Me.tableinvoicehead
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property invtrans() As invtransDataTable
        Get
            Return Me.tableinvtrans
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property invtransold() As invtransoldDataTable
        Get
            Return Me.tableinvtransold
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property invtransold6() As invtransold6DataTable
        Get
            Return Me.tableinvtransold6
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property invwork() As invworkDataTable
        Get
            Return Me.tableinvwork
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property invworkold() As invworkoldDataTable
        Get
            Return Me.tableinvworkold
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property issue() As issueDataTable
        Get
            Return Me.tableissue
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property location() As locationDataTable
        Get
            Return Me.tablelocation
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property main() As mainDataTable
        Get
            Return Me.tablemain
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property markup() As markupDataTable
        Get
            Return Me.tablemarkup
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property names() As namesDataTable
        Get
            Return Me.tablenames
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property orddetail() As orddetailDataTable
        Get
            Return Me.tableorddetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property orderhead() As orderheadDataTable
        Get
            Return Me.tableorderhead
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property orderline() As orderlineDataTable
        Get
            Return Me.tableorderline
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qictrl() As qictrlDataTable
        Get
            Return Me.tableqictrl
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qictrlnew() As qictrlnewDataTable
        Get
            Return Me.tableqictrlnew
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qictrlold() As qictrloldDataTable
        Get
            Return Me.tableqictrlold
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property qictrlold6() As qictrlold6DataTable
        Get
            Return Me.tableqictrlold6
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property quotedetail() As quotedetailDataTable
        Get
            Return Me.tablequotedetail
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property quotehead() As quoteheadDataTable
        Get
            Return Me.tablequotehead
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property status() As statusDataTable
        Get
            Return Me.tablestatus
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tevents() As teventsDataTable
        Get
            Return Me.tabletevents
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tran2() As tran2DataTable
        Get
            Return Me.tabletran2
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tranbins() As tranbinsDataTable
        Get
            Return Me.tabletranbins
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tranctl() As tranctlDataTable
        Get
            Return Me.tabletranctl
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property trandesc() As trandescDataTable
        Get
            Return Me.tabletrandesc
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tranmemo() As tranmemoDataTable
        Get
            Return Me.tabletranmemo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AddressRecordType() As AddressRecordTypeDataTable
        Get
            Return Me.tableAddressRecordType
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As TransvacDataV2DataSet1 = CType(MyBase.Clone,TransvacDataV2DataSet1)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("accctl")) Is Nothing) Then
                MyBase.Tables.Add(New accctlDataTable(ds.Tables("accctl")))
            End If
            If (Not (ds.Tables("account")) Is Nothing) Then
                MyBase.Tables.Add(New accountDataTable(ds.Tables("account")))
            End If
            If (Not (ds.Tables("addnotes")) Is Nothing) Then
                MyBase.Tables.Add(New addnotesDataTable(ds.Tables("addnotes")))
            End If
            If (Not (ds.Tables("assets")) Is Nothing) Then
                MyBase.Tables.Add(New assetsDataTable(ds.Tables("assets")))
            End If
            If (Not (ds.Tables("ASSETSNEW")) Is Nothing) Then
                MyBase.Tables.Add(New ASSETSNEWDataTable(ds.Tables("ASSETSNEW")))
            End If
            If (Not (ds.Tables("atrans")) Is Nothing) Then
                MyBase.Tables.Add(New atransDataTable(ds.Tables("atrans")))
            End If
            If (Not (ds.Tables("binalloc")) Is Nothing) Then
                MyBase.Tables.Add(New binallocDataTable(ds.Tables("binalloc")))
            End If
            If (Not (ds.Tables("cat")) Is Nothing) Then
                MyBase.Tables.Add(New catDataTable(ds.Tables("cat")))
            End If
            If (Not (ds.Tables("country")) Is Nothing) Then
                MyBase.Tables.Add(New countryDataTable(ds.Tables("country")))
            End If
            If (Not (ds.Tables("custdisc")) Is Nothing) Then
                MyBase.Tables.Add(New custdiscDataTable(ds.Tables("custdisc")))
            End If
            If (Not (ds.Tables("dummy_")) Is Nothing) Then
                MyBase.Tables.Add(New dummy_DataTable(ds.Tables("dummy_")))
            End If
            If (Not (ds.Tables("enquiry")) Is Nothing) Then
                MyBase.Tables.Add(New enquiryDataTable(ds.Tables("enquiry")))
            End If
            If (Not (ds.Tables("event")) Is Nothing) Then
                MyBase.Tables.Add(New eventDataTable(ds.Tables("event")))
            End If
            If (Not (ds.Tables("foxuser")) Is Nothing) Then
                MyBase.Tables.Add(New foxuserDataTable(ds.Tables("foxuser")))
            End If
            If (Not (ds.Tables("invline")) Is Nothing) Then
                MyBase.Tables.Add(New invlineDataTable(ds.Tables("invline")))
            End If
            If (Not (ds.Tables("invoicehead")) Is Nothing) Then
                MyBase.Tables.Add(New invoiceheadDataTable(ds.Tables("invoicehead")))
            End If
            If (Not (ds.Tables("invtrans")) Is Nothing) Then
                MyBase.Tables.Add(New invtransDataTable(ds.Tables("invtrans")))
            End If
            If (Not (ds.Tables("invtransold")) Is Nothing) Then
                MyBase.Tables.Add(New invtransoldDataTable(ds.Tables("invtransold")))
            End If
            If (Not (ds.Tables("invtransold6")) Is Nothing) Then
                MyBase.Tables.Add(New invtransold6DataTable(ds.Tables("invtransold6")))
            End If
            If (Not (ds.Tables("invwork")) Is Nothing) Then
                MyBase.Tables.Add(New invworkDataTable(ds.Tables("invwork")))
            End If
            If (Not (ds.Tables("invworkold")) Is Nothing) Then
                MyBase.Tables.Add(New invworkoldDataTable(ds.Tables("invworkold")))
            End If
            If (Not (ds.Tables("issue")) Is Nothing) Then
                MyBase.Tables.Add(New issueDataTable(ds.Tables("issue")))
            End If
            If (Not (ds.Tables("location")) Is Nothing) Then
                MyBase.Tables.Add(New locationDataTable(ds.Tables("location")))
            End If
            If (Not (ds.Tables("main")) Is Nothing) Then
                MyBase.Tables.Add(New mainDataTable(ds.Tables("main")))
            End If
            If (Not (ds.Tables("markup")) Is Nothing) Then
                MyBase.Tables.Add(New markupDataTable(ds.Tables("markup")))
            End If
            If (Not (ds.Tables("names")) Is Nothing) Then
                MyBase.Tables.Add(New namesDataTable(ds.Tables("names")))
            End If
            If (Not (ds.Tables("orddetail")) Is Nothing) Then
                MyBase.Tables.Add(New orddetailDataTable(ds.Tables("orddetail")))
            End If
            If (Not (ds.Tables("orderhead")) Is Nothing) Then
                MyBase.Tables.Add(New orderheadDataTable(ds.Tables("orderhead")))
            End If
            If (Not (ds.Tables("orderline")) Is Nothing) Then
                MyBase.Tables.Add(New orderlineDataTable(ds.Tables("orderline")))
            End If
            If (Not (ds.Tables("qictrl")) Is Nothing) Then
                MyBase.Tables.Add(New qictrlDataTable(ds.Tables("qictrl")))
            End If
            If (Not (ds.Tables("qictrlnew")) Is Nothing) Then
                MyBase.Tables.Add(New qictrlnewDataTable(ds.Tables("qictrlnew")))
            End If
            If (Not (ds.Tables("qictrlold")) Is Nothing) Then
                MyBase.Tables.Add(New qictrloldDataTable(ds.Tables("qictrlold")))
            End If
            If (Not (ds.Tables("qictrlold6")) Is Nothing) Then
                MyBase.Tables.Add(New qictrlold6DataTable(ds.Tables("qictrlold6")))
            End If
            If (Not (ds.Tables("quotedetail")) Is Nothing) Then
                MyBase.Tables.Add(New quotedetailDataTable(ds.Tables("quotedetail")))
            End If
            If (Not (ds.Tables("quotehead")) Is Nothing) Then
                MyBase.Tables.Add(New quoteheadDataTable(ds.Tables("quotehead")))
            End If
            If (Not (ds.Tables("status")) Is Nothing) Then
                MyBase.Tables.Add(New statusDataTable(ds.Tables("status")))
            End If
            If (Not (ds.Tables("tevents")) Is Nothing) Then
                MyBase.Tables.Add(New teventsDataTable(ds.Tables("tevents")))
            End If
            If (Not (ds.Tables("tran2")) Is Nothing) Then
                MyBase.Tables.Add(New tran2DataTable(ds.Tables("tran2")))
            End If
            If (Not (ds.Tables("tranbins")) Is Nothing) Then
                MyBase.Tables.Add(New tranbinsDataTable(ds.Tables("tranbins")))
            End If
            If (Not (ds.Tables("tranctl")) Is Nothing) Then
                MyBase.Tables.Add(New tranctlDataTable(ds.Tables("tranctl")))
            End If
            If (Not (ds.Tables("trandesc")) Is Nothing) Then
                MyBase.Tables.Add(New trandescDataTable(ds.Tables("trandesc")))
            End If
            If (Not (ds.Tables("tranmemo")) Is Nothing) Then
                MyBase.Tables.Add(New tranmemoDataTable(ds.Tables("tranmemo")))
            End If
            If (Not (ds.Tables("AddressRecordType")) Is Nothing) Then
                MyBase.Tables.Add(New AddressRecordTypeDataTable(ds.Tables("AddressRecordType")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableaccctl = CType(MyBase.Tables("accctl"),accctlDataTable)
        If (initTable = true) Then
            If (Not (Me.tableaccctl) Is Nothing) Then
                Me.tableaccctl.InitVars
            End If
        End If
        Me.tableaccount = CType(MyBase.Tables("account"),accountDataTable)
        If (initTable = true) Then
            If (Not (Me.tableaccount) Is Nothing) Then
                Me.tableaccount.InitVars
            End If
        End If
        Me.tableaddnotes = CType(MyBase.Tables("addnotes"),addnotesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableaddnotes) Is Nothing) Then
                Me.tableaddnotes.InitVars
            End If
        End If
        Me.tableassets = CType(MyBase.Tables("assets"),assetsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableassets) Is Nothing) Then
                Me.tableassets.InitVars
            End If
        End If
        Me.tableASSETSNEW = CType(MyBase.Tables("ASSETSNEW"),ASSETSNEWDataTable)
        If (initTable = true) Then
            If (Not (Me.tableASSETSNEW) Is Nothing) Then
                Me.tableASSETSNEW.InitVars
            End If
        End If
        Me.tableatrans = CType(MyBase.Tables("atrans"),atransDataTable)
        If (initTable = true) Then
            If (Not (Me.tableatrans) Is Nothing) Then
                Me.tableatrans.InitVars
            End If
        End If
        Me.tablebinalloc = CType(MyBase.Tables("binalloc"),binallocDataTable)
        If (initTable = true) Then
            If (Not (Me.tablebinalloc) Is Nothing) Then
                Me.tablebinalloc.InitVars
            End If
        End If
        Me.tablecat = CType(MyBase.Tables("cat"),catDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecat) Is Nothing) Then
                Me.tablecat.InitVars
            End If
        End If
        Me.tablecountry = CType(MyBase.Tables("country"),countryDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecountry) Is Nothing) Then
                Me.tablecountry.InitVars
            End If
        End If
        Me.tablecustdisc = CType(MyBase.Tables("custdisc"),custdiscDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecustdisc) Is Nothing) Then
                Me.tablecustdisc.InitVars
            End If
        End If
        Me.tabledummy_ = CType(MyBase.Tables("dummy_"),dummy_DataTable)
        If (initTable = true) Then
            If (Not (Me.tabledummy_) Is Nothing) Then
                Me.tabledummy_.InitVars
            End If
        End If
        Me.tableenquiry = CType(MyBase.Tables("enquiry"),enquiryDataTable)
        If (initTable = true) Then
            If (Not (Me.tableenquiry) Is Nothing) Then
                Me.tableenquiry.InitVars
            End If
        End If
        Me.tableevent = CType(MyBase.Tables("event"),eventDataTable)
        If (initTable = true) Then
            If (Not (Me.tableevent) Is Nothing) Then
                Me.tableevent.InitVars
            End If
        End If
        Me.tablefoxuser = CType(MyBase.Tables("foxuser"),foxuserDataTable)
        If (initTable = true) Then
            If (Not (Me.tablefoxuser) Is Nothing) Then
                Me.tablefoxuser.InitVars
            End If
        End If
        Me.tableinvline = CType(MyBase.Tables("invline"),invlineDataTable)
        If (initTable = true) Then
            If (Not (Me.tableinvline) Is Nothing) Then
                Me.tableinvline.InitVars
            End If
        End If
        Me.tableinvoicehead = CType(MyBase.Tables("invoicehead"),invoiceheadDataTable)
        If (initTable = true) Then
            If (Not (Me.tableinvoicehead) Is Nothing) Then
                Me.tableinvoicehead.InitVars
            End If
        End If
        Me.tableinvtrans = CType(MyBase.Tables("invtrans"),invtransDataTable)
        If (initTable = true) Then
            If (Not (Me.tableinvtrans) Is Nothing) Then
                Me.tableinvtrans.InitVars
            End If
        End If
        Me.tableinvtransold = CType(MyBase.Tables("invtransold"),invtransoldDataTable)
        If (initTable = true) Then
            If (Not (Me.tableinvtransold) Is Nothing) Then
                Me.tableinvtransold.InitVars
            End If
        End If
        Me.tableinvtransold6 = CType(MyBase.Tables("invtransold6"),invtransold6DataTable)
        If (initTable = true) Then
            If (Not (Me.tableinvtransold6) Is Nothing) Then
                Me.tableinvtransold6.InitVars
            End If
        End If
        Me.tableinvwork = CType(MyBase.Tables("invwork"),invworkDataTable)
        If (initTable = true) Then
            If (Not (Me.tableinvwork) Is Nothing) Then
                Me.tableinvwork.InitVars
            End If
        End If
        Me.tableinvworkold = CType(MyBase.Tables("invworkold"),invworkoldDataTable)
        If (initTable = true) Then
            If (Not (Me.tableinvworkold) Is Nothing) Then
                Me.tableinvworkold.InitVars
            End If
        End If
        Me.tableissue = CType(MyBase.Tables("issue"),issueDataTable)
        If (initTable = true) Then
            If (Not (Me.tableissue) Is Nothing) Then
                Me.tableissue.InitVars
            End If
        End If
        Me.tablelocation = CType(MyBase.Tables("location"),locationDataTable)
        If (initTable = true) Then
            If (Not (Me.tablelocation) Is Nothing) Then
                Me.tablelocation.InitVars
            End If
        End If
        Me.tablemain = CType(MyBase.Tables("main"),mainDataTable)
        If (initTable = true) Then
            If (Not (Me.tablemain) Is Nothing) Then
                Me.tablemain.InitVars
            End If
        End If
        Me.tablemarkup = CType(MyBase.Tables("markup"),markupDataTable)
        If (initTable = true) Then
            If (Not (Me.tablemarkup) Is Nothing) Then
                Me.tablemarkup.InitVars
            End If
        End If
        Me.tablenames = CType(MyBase.Tables("names"),namesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablenames) Is Nothing) Then
                Me.tablenames.InitVars
            End If
        End If
        Me.tableorddetail = CType(MyBase.Tables("orddetail"),orddetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tableorddetail) Is Nothing) Then
                Me.tableorddetail.InitVars
            End If
        End If
        Me.tableorderhead = CType(MyBase.Tables("orderhead"),orderheadDataTable)
        If (initTable = true) Then
            If (Not (Me.tableorderhead) Is Nothing) Then
                Me.tableorderhead.InitVars
            End If
        End If
        Me.tableorderline = CType(MyBase.Tables("orderline"),orderlineDataTable)
        If (initTable = true) Then
            If (Not (Me.tableorderline) Is Nothing) Then
                Me.tableorderline.InitVars
            End If
        End If
        Me.tableqictrl = CType(MyBase.Tables("qictrl"),qictrlDataTable)
        If (initTable = true) Then
            If (Not (Me.tableqictrl) Is Nothing) Then
                Me.tableqictrl.InitVars
            End If
        End If
        Me.tableqictrlnew = CType(MyBase.Tables("qictrlnew"),qictrlnewDataTable)
        If (initTable = true) Then
            If (Not (Me.tableqictrlnew) Is Nothing) Then
                Me.tableqictrlnew.InitVars
            End If
        End If
        Me.tableqictrlold = CType(MyBase.Tables("qictrlold"),qictrloldDataTable)
        If (initTable = true) Then
            If (Not (Me.tableqictrlold) Is Nothing) Then
                Me.tableqictrlold.InitVars
            End If
        End If
        Me.tableqictrlold6 = CType(MyBase.Tables("qictrlold6"),qictrlold6DataTable)
        If (initTable = true) Then
            If (Not (Me.tableqictrlold6) Is Nothing) Then
                Me.tableqictrlold6.InitVars
            End If
        End If
        Me.tablequotedetail = CType(MyBase.Tables("quotedetail"),quotedetailDataTable)
        If (initTable = true) Then
            If (Not (Me.tablequotedetail) Is Nothing) Then
                Me.tablequotedetail.InitVars
            End If
        End If
        Me.tablequotehead = CType(MyBase.Tables("quotehead"),quoteheadDataTable)
        If (initTable = true) Then
            If (Not (Me.tablequotehead) Is Nothing) Then
                Me.tablequotehead.InitVars
            End If
        End If
        Me.tablestatus = CType(MyBase.Tables("status"),statusDataTable)
        If (initTable = true) Then
            If (Not (Me.tablestatus) Is Nothing) Then
                Me.tablestatus.InitVars
            End If
        End If
        Me.tabletevents = CType(MyBase.Tables("tevents"),teventsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletevents) Is Nothing) Then
                Me.tabletevents.InitVars
            End If
        End If
        Me.tabletran2 = CType(MyBase.Tables("tran2"),tran2DataTable)
        If (initTable = true) Then
            If (Not (Me.tabletran2) Is Nothing) Then
                Me.tabletran2.InitVars
            End If
        End If
        Me.tabletranbins = CType(MyBase.Tables("tranbins"),tranbinsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletranbins) Is Nothing) Then
                Me.tabletranbins.InitVars
            End If
        End If
        Me.tabletranctl = CType(MyBase.Tables("tranctl"),tranctlDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletranctl) Is Nothing) Then
                Me.tabletranctl.InitVars
            End If
        End If
        Me.tabletrandesc = CType(MyBase.Tables("trandesc"),trandescDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletrandesc) Is Nothing) Then
                Me.tabletrandesc.InitVars
            End If
        End If
        Me.tabletranmemo = CType(MyBase.Tables("tranmemo"),tranmemoDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletranmemo) Is Nothing) Then
                Me.tabletranmemo.InitVars
            End If
        End If
        Me.tableAddressRecordType = CType(MyBase.Tables("AddressRecordType"),AddressRecordTypeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAddressRecordType) Is Nothing) Then
                Me.tableAddressRecordType.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "TransvacDataV2DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/TransvacDataV2DataSet1.xsd"
        Me.EnforceConstraints = false
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableaccctl = New accctlDataTable()
        MyBase.Tables.Add(Me.tableaccctl)
        Me.tableaccount = New accountDataTable()
        MyBase.Tables.Add(Me.tableaccount)
        Me.tableaddnotes = New addnotesDataTable()
        MyBase.Tables.Add(Me.tableaddnotes)
        Me.tableassets = New assetsDataTable()
        MyBase.Tables.Add(Me.tableassets)
        Me.tableASSETSNEW = New ASSETSNEWDataTable()
        MyBase.Tables.Add(Me.tableASSETSNEW)
        Me.tableatrans = New atransDataTable()
        MyBase.Tables.Add(Me.tableatrans)
        Me.tablebinalloc = New binallocDataTable()
        MyBase.Tables.Add(Me.tablebinalloc)
        Me.tablecat = New catDataTable()
        MyBase.Tables.Add(Me.tablecat)
        Me.tablecountry = New countryDataTable()
        MyBase.Tables.Add(Me.tablecountry)
        Me.tablecustdisc = New custdiscDataTable()
        MyBase.Tables.Add(Me.tablecustdisc)
        Me.tabledummy_ = New dummy_DataTable()
        MyBase.Tables.Add(Me.tabledummy_)
        Me.tableenquiry = New enquiryDataTable()
        MyBase.Tables.Add(Me.tableenquiry)
        Me.tableevent = New eventDataTable()
        MyBase.Tables.Add(Me.tableevent)
        Me.tablefoxuser = New foxuserDataTable()
        MyBase.Tables.Add(Me.tablefoxuser)
        Me.tableinvline = New invlineDataTable()
        MyBase.Tables.Add(Me.tableinvline)
        Me.tableinvoicehead = New invoiceheadDataTable()
        MyBase.Tables.Add(Me.tableinvoicehead)
        Me.tableinvtrans = New invtransDataTable()
        MyBase.Tables.Add(Me.tableinvtrans)
        Me.tableinvtransold = New invtransoldDataTable()
        MyBase.Tables.Add(Me.tableinvtransold)
        Me.tableinvtransold6 = New invtransold6DataTable()
        MyBase.Tables.Add(Me.tableinvtransold6)
        Me.tableinvwork = New invworkDataTable()
        MyBase.Tables.Add(Me.tableinvwork)
        Me.tableinvworkold = New invworkoldDataTable()
        MyBase.Tables.Add(Me.tableinvworkold)
        Me.tableissue = New issueDataTable()
        MyBase.Tables.Add(Me.tableissue)
        Me.tablelocation = New locationDataTable()
        MyBase.Tables.Add(Me.tablelocation)
        Me.tablemain = New mainDataTable()
        MyBase.Tables.Add(Me.tablemain)
        Me.tablemarkup = New markupDataTable()
        MyBase.Tables.Add(Me.tablemarkup)
        Me.tablenames = New namesDataTable()
        MyBase.Tables.Add(Me.tablenames)
        Me.tableorddetail = New orddetailDataTable()
        MyBase.Tables.Add(Me.tableorddetail)
        Me.tableorderhead = New orderheadDataTable()
        MyBase.Tables.Add(Me.tableorderhead)
        Me.tableorderline = New orderlineDataTable()
        MyBase.Tables.Add(Me.tableorderline)
        Me.tableqictrl = New qictrlDataTable()
        MyBase.Tables.Add(Me.tableqictrl)
        Me.tableqictrlnew = New qictrlnewDataTable()
        MyBase.Tables.Add(Me.tableqictrlnew)
        Me.tableqictrlold = New qictrloldDataTable()
        MyBase.Tables.Add(Me.tableqictrlold)
        Me.tableqictrlold6 = New qictrlold6DataTable()
        MyBase.Tables.Add(Me.tableqictrlold6)
        Me.tablequotedetail = New quotedetailDataTable()
        MyBase.Tables.Add(Me.tablequotedetail)
        Me.tablequotehead = New quoteheadDataTable()
        MyBase.Tables.Add(Me.tablequotehead)
        Me.tablestatus = New statusDataTable()
        MyBase.Tables.Add(Me.tablestatus)
        Me.tabletevents = New teventsDataTable()
        MyBase.Tables.Add(Me.tabletevents)
        Me.tabletran2 = New tran2DataTable()
        MyBase.Tables.Add(Me.tabletran2)
        Me.tabletranbins = New tranbinsDataTable()
        MyBase.Tables.Add(Me.tabletranbins)
        Me.tabletranctl = New tranctlDataTable()
        MyBase.Tables.Add(Me.tabletranctl)
        Me.tabletrandesc = New trandescDataTable()
        MyBase.Tables.Add(Me.tabletrandesc)
        Me.tabletranmemo = New tranmemoDataTable()
        MyBase.Tables.Add(Me.tabletranmemo)
        Me.tableAddressRecordType = New AddressRecordTypeDataTable()
        MyBase.Tables.Add(Me.tableAddressRecordType)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeaccctl() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeaccount() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeaddnotes() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeassets() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeASSETSNEW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeatrans() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializebinalloc() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializecat() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializecountry() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializecustdisc() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializedummy_() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeenquiry() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerialize_event() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializefoxuser() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeinvline() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeinvoicehead() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeinvtrans() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeinvtransold() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeinvtransold6() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeinvwork() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeinvworkold() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeissue() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializelocation() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializemain() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializemarkup() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializenames() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeorddetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeorderhead() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeorderline() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeqictrl() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeqictrlnew() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeqictrlold() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeqictrlold6() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializequotedetail() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializequotehead() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializestatus() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializetevents() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializetran2() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializetranbins() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializetranctl() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializetrandesc() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializetranmemo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Function ShouldSerializeAddressRecordType() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub accctlRowChangeEventHandler(ByVal sender As Object, ByVal e As accctlRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub accountRowChangeEventHandler(ByVal sender As Object, ByVal e As accountRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub addnotesRowChangeEventHandler(ByVal sender As Object, ByVal e As addnotesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub assetsRowChangeEventHandler(ByVal sender As Object, ByVal e As assetsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub ASSETSNEWRowChangeEventHandler(ByVal sender As Object, ByVal e As ASSETSNEWRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub atransRowChangeEventHandler(ByVal sender As Object, ByVal e As atransRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub binallocRowChangeEventHandler(ByVal sender As Object, ByVal e As binallocRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub catRowChangeEventHandler(ByVal sender As Object, ByVal e As catRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub countryRowChangeEventHandler(ByVal sender As Object, ByVal e As countryRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub custdiscRowChangeEventHandler(ByVal sender As Object, ByVal e As custdiscRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub dummy_RowChangeEventHandler(ByVal sender As Object, ByVal e As dummy_RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub enquiryRowChangeEventHandler(ByVal sender As Object, ByVal e As enquiryRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub eventRowChangeEventHandler(ByVal sender As Object, ByVal e As eventRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub foxuserRowChangeEventHandler(ByVal sender As Object, ByVal e As foxuserRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub invlineRowChangeEventHandler(ByVal sender As Object, ByVal e As invlineRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub invoiceheadRowChangeEventHandler(ByVal sender As Object, ByVal e As invoiceheadRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub invtransRowChangeEventHandler(ByVal sender As Object, ByVal e As invtransRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub invtransoldRowChangeEventHandler(ByVal sender As Object, ByVal e As invtransoldRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub invtransold6RowChangeEventHandler(ByVal sender As Object, ByVal e As invtransold6RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub invworkRowChangeEventHandler(ByVal sender As Object, ByVal e As invworkRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub invworkoldRowChangeEventHandler(ByVal sender As Object, ByVal e As invworkoldRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub issueRowChangeEventHandler(ByVal sender As Object, ByVal e As issueRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub locationRowChangeEventHandler(ByVal sender As Object, ByVal e As locationRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub mainRowChangeEventHandler(ByVal sender As Object, ByVal e As mainRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub markupRowChangeEventHandler(ByVal sender As Object, ByVal e As markupRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub namesRowChangeEventHandler(ByVal sender As Object, ByVal e As namesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub orddetailRowChangeEventHandler(ByVal sender As Object, ByVal e As orddetailRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub orderheadRowChangeEventHandler(ByVal sender As Object, ByVal e As orderheadRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub orderlineRowChangeEventHandler(ByVal sender As Object, ByVal e As orderlineRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub qictrlRowChangeEventHandler(ByVal sender As Object, ByVal e As qictrlRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub qictrlnewRowChangeEventHandler(ByVal sender As Object, ByVal e As qictrlnewRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub qictrloldRowChangeEventHandler(ByVal sender As Object, ByVal e As qictrloldRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub qictrlold6RowChangeEventHandler(ByVal sender As Object, ByVal e As qictrlold6RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub quotedetailRowChangeEventHandler(ByVal sender As Object, ByVal e As quotedetailRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub quoteheadRowChangeEventHandler(ByVal sender As Object, ByVal e As quoteheadRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub statusRowChangeEventHandler(ByVal sender As Object, ByVal e As statusRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub teventsRowChangeEventHandler(ByVal sender As Object, ByVal e As teventsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub tran2RowChangeEventHandler(ByVal sender As Object, ByVal e As tran2RowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub tranbinsRowChangeEventHandler(ByVal sender As Object, ByVal e As tranbinsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub tranctlRowChangeEventHandler(ByVal sender As Object, ByVal e As tranctlRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub trandescRowChangeEventHandler(ByVal sender As Object, ByVal e As trandescRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub tranmemoRowChangeEventHandler(ByVal sender As Object, ByVal e As tranmemoRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Delegate Sub AddressRecordTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As AddressRecordTypeRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class accctlDataTable
        Inherits Global.System.Data.TypedTableBase(Of accctlRow)
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columnlevel_ As Global.System.Data.DataColumn
        
        Private columncomments As Global.System.Data.DataColumn
        
        Private columnqinits As Global.System.Data.DataColumn
        
        Private columntitle As Global.System.Data.DataColumn
        
        Private columnsig As Global.System.Data.DataColumn
        
        Private columnemail As Global.System.Data.DataColumn
        
        Private columntimestamp_column As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "accctl"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property level_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlevel_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property commentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qinitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqinits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property titleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property sigColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsig
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property timestamp_columnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimestamp_column
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As accctlRow
            Get
                Return CType(Me.Rows(index),accctlRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event accctlRowChanging As accctlRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event accctlRowChanged As accctlRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event accctlRowDeleting As accctlRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event accctlRowDeleted As accctlRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddaccctlRow(ByVal row As accctlRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddaccctlRow(ByVal name As String, ByVal level_ As Decimal, ByVal comments As String, ByVal qinits As String, ByVal title As String, ByVal sig() As Byte, ByVal email As String, ByVal timestamp_column() As Byte) As accctlRow
            Dim rowaccctlRow As accctlRow = CType(Me.NewRow,accctlRow)
            Dim columnValuesArray() As Object = New Object() {name, level_, comments, qinits, title, sig, email, timestamp_column, Nothing}
            rowaccctlRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowaccctlRow)
            Return rowaccctlRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As accctlRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),accctlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As accctlDataTable = CType(MyBase.Clone,accctlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New accctlDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnname = MyBase.Columns("name")
            Me.columnlevel_ = MyBase.Columns("level_")
            Me.columncomments = MyBase.Columns("comments")
            Me.columnqinits = MyBase.Columns("qinits")
            Me.columntitle = MyBase.Columns("title")
            Me.columnsig = MyBase.Columns("sig")
            Me.columnemail = MyBase.Columns("email")
            Me.columntimestamp_column = MyBase.Columns("timestamp_column")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columnlevel_ = New Global.System.Data.DataColumn("level_", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlevel_)
            Me.columncomments = New Global.System.Data.DataColumn("comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomments)
            Me.columnqinits = New Global.System.Data.DataColumn("qinits", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqinits)
            Me.columntitle = New Global.System.Data.DataColumn("title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntitle)
            Me.columnsig = New Global.System.Data.DataColumn("sig", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsig)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.columntimestamp_column = New Global.System.Data.DataColumn("timestamp_column", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimestamp_column)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnname.AllowDBNull = false
            Me.columnname.MaxLength = 5
            Me.columnlevel_.AllowDBNull = false
            Me.columncomments.AllowDBNull = false
            Me.columncomments.MaxLength = 25
            Me.columnqinits.AllowDBNull = false
            Me.columnqinits.MaxLength = 3
            Me.columntitle.AllowDBNull = false
            Me.columntitle.MaxLength = 2147483647
            Me.columnemail.AllowDBNull = false
            Me.columnemail.MaxLength = 40
            Me.columntimestamp_column.ReadOnly = true
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewaccctlRow() As accctlRow
            Return CType(Me.NewRow,accctlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New accctlRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(accctlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.accctlRowChangedEvent) Is Nothing) Then
                RaiseEvent accctlRowChanged(Me, New accctlRowChangeEvent(CType(e.Row,accctlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.accctlRowChangingEvent) Is Nothing) Then
                RaiseEvent accctlRowChanging(Me, New accctlRowChangeEvent(CType(e.Row,accctlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.accctlRowDeletedEvent) Is Nothing) Then
                RaiseEvent accctlRowDeleted(Me, New accctlRowChangeEvent(CType(e.Row,accctlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.accctlRowDeletingEvent) Is Nothing) Then
                RaiseEvent accctlRowDeleting(Me, New accctlRowChangeEvent(CType(e.Row,accctlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveaccctlRow(ByVal row As accctlRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "accctlDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class accountDataTable
        Inherits Global.System.Data.TypedTableBase(Of accountRow)
        
        Private columnaccno As Global.System.Data.DataColumn
        
        Private columniname As Global.System.Data.DataColumn
        
        Private columniadd1 As Global.System.Data.DataColumn
        
        Private columniadd2 As Global.System.Data.DataColumn
        
        Private columniadd3 As Global.System.Data.DataColumn
        
        Private columniadd4 As Global.System.Data.DataColumn
        
        Private columniadd5 As Global.System.Data.DataColumn
        
        Private columnipcode As Global.System.Data.DataColumn
        
        Private columndname As Global.System.Data.DataColumn
        
        Private columndadd1 As Global.System.Data.DataColumn
        
        Private columndadd2 As Global.System.Data.DataColumn
        
        Private columndadd3 As Global.System.Data.DataColumn
        
        Private columndadd4 As Global.System.Data.DataColumn
        
        Private columndadd5 As Global.System.Data.DataColumn
        
        Private columndpcode As Global.System.Data.DataColumn
        
        Private columnidesc As Global.System.Data.DataColumn
        
        Private columniamount As Global.System.Data.DataColumn
        
        Private columniperiod As Global.System.Data.DataColumn
        
        Private columnsdate As Global.System.Data.DataColumn
        
        Private columnedate As Global.System.Data.DataColumn
        
        Private columnitelno As Global.System.Data.DataColumn
        
        Private columnifaxno As Global.System.Data.DataColumn
        
        Private columnimobno As Global.System.Data.DataColumn
        
        Private columniemail As Global.System.Data.DataColumn
        
        Private columnnotes As Global.System.Data.DataColumn
        
        Private columntimestamp_column As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "account"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property accnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property inameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iadd1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columniadd1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iadd2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columniadd2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iadd3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columniadd3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iadd4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columniadd4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iadd5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columniadd5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ipcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnipcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property dnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property dadd1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columndadd1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property dadd2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columndadd2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property dadd3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columndadd3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property dadd4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columndadd4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property dadd5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columndadd5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property dpcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndpcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property idescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iamountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iperiodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniperiod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property sdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property edateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnedate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property itelnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitelno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ifaxnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnifaxno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property imobnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimobno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iemailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property notesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property timestamp_columnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimestamp_column
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As accountRow
            Get
                Return CType(Me.Rows(index),accountRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event accountRowChanging As accountRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event accountRowChanged As accountRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event accountRowDeleting As accountRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event accountRowDeleted As accountRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddaccountRow(ByVal row As accountRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddaccountRow( _
                    ByVal accno As String,  _
                    ByVal iname As String,  _
                    ByVal iadd1 As String,  _
                    ByVal iadd2 As String,  _
                    ByVal iadd3 As String,  _
                    ByVal iadd4 As String,  _
                    ByVal iadd5 As String,  _
                    ByVal ipcode As String,  _
                    ByVal dname As String,  _
                    ByVal dadd1 As String,  _
                    ByVal dadd2 As String,  _
                    ByVal dadd3 As String,  _
                    ByVal dadd4 As String,  _
                    ByVal dadd5 As String,  _
                    ByVal dpcode As String,  _
                    ByVal idesc As String,  _
                    ByVal iamount As Decimal,  _
                    ByVal iperiod As Decimal,  _
                    ByVal sdate As Date,  _
                    ByVal edate As Date,  _
                    ByVal itelno As String,  _
                    ByVal ifaxno As String,  _
                    ByVal imobno As String,  _
                    ByVal iemail As String,  _
                    ByVal notes As String,  _
                    ByVal timestamp_column() As Byte) As accountRow
            Dim rowaccountRow As accountRow = CType(Me.NewRow,accountRow)
            Dim columnValuesArray() As Object = New Object() {accno, iname, iadd1, iadd2, iadd3, iadd4, iadd5, ipcode, dname, dadd1, dadd2, dadd3, dadd4, dadd5, dpcode, idesc, iamount, iperiod, sdate, edate, itelno, ifaxno, imobno, iemail, notes, timestamp_column, Nothing}
            rowaccountRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowaccountRow)
            Return rowaccountRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As accountRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),accountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As accountDataTable = CType(MyBase.Clone,accountDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New accountDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnaccno = MyBase.Columns("accno")
            Me.columniname = MyBase.Columns("iname")
            Me.columniadd1 = MyBase.Columns("iadd1")
            Me.columniadd2 = MyBase.Columns("iadd2")
            Me.columniadd3 = MyBase.Columns("iadd3")
            Me.columniadd4 = MyBase.Columns("iadd4")
            Me.columniadd5 = MyBase.Columns("iadd5")
            Me.columnipcode = MyBase.Columns("ipcode")
            Me.columndname = MyBase.Columns("dname")
            Me.columndadd1 = MyBase.Columns("dadd1")
            Me.columndadd2 = MyBase.Columns("dadd2")
            Me.columndadd3 = MyBase.Columns("dadd3")
            Me.columndadd4 = MyBase.Columns("dadd4")
            Me.columndadd5 = MyBase.Columns("dadd5")
            Me.columndpcode = MyBase.Columns("dpcode")
            Me.columnidesc = MyBase.Columns("idesc")
            Me.columniamount = MyBase.Columns("iamount")
            Me.columniperiod = MyBase.Columns("iperiod")
            Me.columnsdate = MyBase.Columns("sdate")
            Me.columnedate = MyBase.Columns("edate")
            Me.columnitelno = MyBase.Columns("itelno")
            Me.columnifaxno = MyBase.Columns("ifaxno")
            Me.columnimobno = MyBase.Columns("imobno")
            Me.columniemail = MyBase.Columns("iemail")
            Me.columnnotes = MyBase.Columns("notes")
            Me.columntimestamp_column = MyBase.Columns("timestamp_column")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnaccno = New Global.System.Data.DataColumn("accno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccno)
            Me.columniname = New Global.System.Data.DataColumn("iname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniname)
            Me.columniadd1 = New Global.System.Data.DataColumn("iadd1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniadd1)
            Me.columniadd2 = New Global.System.Data.DataColumn("iadd2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniadd2)
            Me.columniadd3 = New Global.System.Data.DataColumn("iadd3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniadd3)
            Me.columniadd4 = New Global.System.Data.DataColumn("iadd4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniadd4)
            Me.columniadd5 = New Global.System.Data.DataColumn("iadd5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniadd5)
            Me.columnipcode = New Global.System.Data.DataColumn("ipcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnipcode)
            Me.columndname = New Global.System.Data.DataColumn("dname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndname)
            Me.columndadd1 = New Global.System.Data.DataColumn("dadd1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndadd1)
            Me.columndadd2 = New Global.System.Data.DataColumn("dadd2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndadd2)
            Me.columndadd3 = New Global.System.Data.DataColumn("dadd3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndadd3)
            Me.columndadd4 = New Global.System.Data.DataColumn("dadd4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndadd4)
            Me.columndadd5 = New Global.System.Data.DataColumn("dadd5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndadd5)
            Me.columndpcode = New Global.System.Data.DataColumn("dpcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndpcode)
            Me.columnidesc = New Global.System.Data.DataColumn("idesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidesc)
            Me.columniamount = New Global.System.Data.DataColumn("iamount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniamount)
            Me.columniperiod = New Global.System.Data.DataColumn("iperiod", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniperiod)
            Me.columnsdate = New Global.System.Data.DataColumn("sdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsdate)
            Me.columnedate = New Global.System.Data.DataColumn("edate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnedate)
            Me.columnitelno = New Global.System.Data.DataColumn("itelno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitelno)
            Me.columnifaxno = New Global.System.Data.DataColumn("ifaxno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnifaxno)
            Me.columnimobno = New Global.System.Data.DataColumn("imobno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimobno)
            Me.columniemail = New Global.System.Data.DataColumn("iemail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniemail)
            Me.columnnotes = New Global.System.Data.DataColumn("notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnotes)
            Me.columntimestamp_column = New Global.System.Data.DataColumn("timestamp_column", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimestamp_column)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnaccno.AllowDBNull = false
            Me.columnaccno.MaxLength = 4
            Me.columniname.AllowDBNull = false
            Me.columniname.MaxLength = 40
            Me.columniadd1.AllowDBNull = false
            Me.columniadd1.MaxLength = 40
            Me.columniadd2.AllowDBNull = false
            Me.columniadd2.MaxLength = 40
            Me.columniadd3.AllowDBNull = false
            Me.columniadd3.MaxLength = 40
            Me.columniadd4.AllowDBNull = false
            Me.columniadd4.MaxLength = 40
            Me.columniadd5.AllowDBNull = false
            Me.columniadd5.MaxLength = 40
            Me.columnipcode.AllowDBNull = false
            Me.columnipcode.MaxLength = 10
            Me.columndname.AllowDBNull = false
            Me.columndname.MaxLength = 40
            Me.columndadd1.AllowDBNull = false
            Me.columndadd1.MaxLength = 40
            Me.columndadd2.AllowDBNull = false
            Me.columndadd2.MaxLength = 40
            Me.columndadd3.AllowDBNull = false
            Me.columndadd3.MaxLength = 40
            Me.columndadd4.AllowDBNull = false
            Me.columndadd4.MaxLength = 40
            Me.columndadd5.AllowDBNull = false
            Me.columndadd5.MaxLength = 40
            Me.columndpcode.AllowDBNull = false
            Me.columndpcode.MaxLength = 10
            Me.columnidesc.AllowDBNull = false
            Me.columnidesc.MaxLength = 40
            Me.columniamount.AllowDBNull = false
            Me.columniperiod.AllowDBNull = false
            Me.columnsdate.AllowDBNull = false
            Me.columnedate.AllowDBNull = false
            Me.columnitelno.AllowDBNull = false
            Me.columnitelno.MaxLength = 20
            Me.columnifaxno.AllowDBNull = false
            Me.columnifaxno.MaxLength = 20
            Me.columnimobno.AllowDBNull = false
            Me.columnimobno.MaxLength = 20
            Me.columniemail.AllowDBNull = false
            Me.columniemail.MaxLength = 35
            Me.columnnotes.AllowDBNull = false
            Me.columnnotes.MaxLength = 2147483647
            Me.columntimestamp_column.ReadOnly = true
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewaccountRow() As accountRow
            Return CType(Me.NewRow,accountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New accountRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(accountRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.accountRowChangedEvent) Is Nothing) Then
                RaiseEvent accountRowChanged(Me, New accountRowChangeEvent(CType(e.Row,accountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.accountRowChangingEvent) Is Nothing) Then
                RaiseEvent accountRowChanging(Me, New accountRowChangeEvent(CType(e.Row,accountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.accountRowDeletedEvent) Is Nothing) Then
                RaiseEvent accountRowDeleted(Me, New accountRowChangeEvent(CType(e.Row,accountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.accountRowDeletingEvent) Is Nothing) Then
                RaiseEvent accountRowDeleting(Me, New accountRowChangeEvent(CType(e.Row,accountRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveaccountRow(ByVal row As accountRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "accountDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class addnotesDataTable
        Inherits Global.System.Data.TypedTableBase(Of addnotesRow)
        
        Private columnaccount As Global.System.Data.DataColumn
        
        Private columnactmemo As Global.System.Data.DataColumn
        
        Private columntimestamp_column As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "addnotes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property accountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property actmemoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnactmemo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property timestamp_columnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimestamp_column
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As addnotesRow
            Get
                Return CType(Me.Rows(index),addnotesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event addnotesRowChanging As addnotesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event addnotesRowChanged As addnotesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event addnotesRowDeleting As addnotesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event addnotesRowDeleted As addnotesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddaddnotesRow(ByVal row As addnotesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddaddnotesRow(ByVal account As String, ByVal actmemo As String, ByVal timestamp_column() As Byte) As addnotesRow
            Dim rowaddnotesRow As addnotesRow = CType(Me.NewRow,addnotesRow)
            Dim columnValuesArray() As Object = New Object() {account, actmemo, timestamp_column, Nothing}
            rowaddnotesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowaddnotesRow)
            Return rowaddnotesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As addnotesDataTable = CType(MyBase.Clone,addnotesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New addnotesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnaccount = MyBase.Columns("account")
            Me.columnactmemo = MyBase.Columns("actmemo")
            Me.columntimestamp_column = MyBase.Columns("timestamp_column")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnaccount = New Global.System.Data.DataColumn("account", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccount)
            Me.columnactmemo = New Global.System.Data.DataColumn("actmemo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnactmemo)
            Me.columntimestamp_column = New Global.System.Data.DataColumn("timestamp_column", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimestamp_column)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, false))
            Me.columnaccount.AllowDBNull = false
            Me.columnaccount.MaxLength = 4
            Me.columnactmemo.AllowDBNull = false
            Me.columnactmemo.MaxLength = 2147483647
            Me.columntimestamp_column.ReadOnly = true
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewaddnotesRow() As addnotesRow
            Return CType(Me.NewRow,addnotesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New addnotesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(addnotesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.addnotesRowChangedEvent) Is Nothing) Then
                RaiseEvent addnotesRowChanged(Me, New addnotesRowChangeEvent(CType(e.Row,addnotesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.addnotesRowChangingEvent) Is Nothing) Then
                RaiseEvent addnotesRowChanging(Me, New addnotesRowChangeEvent(CType(e.Row,addnotesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.addnotesRowDeletedEvent) Is Nothing) Then
                RaiseEvent addnotesRowDeleted(Me, New addnotesRowChangeEvent(CType(e.Row,addnotesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.addnotesRowDeletingEvent) Is Nothing) Then
                RaiseEvent addnotesRowDeleting(Me, New addnotesRowChangeEvent(CType(e.Row,addnotesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveaddnotesRow(ByVal row As addnotesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "addnotesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class assetsDataTable
        Inherits Global.System.Data.TypedTableBase(Of assetsRow)
        
        Private columndesc_ As Global.System.Data.DataColumn
        
        Private columnassetno As Global.System.Data.DataColumn
        
        Private columnlocation As Global.System.Data.DataColumn
        
        Private columncat As Global.System.Data.DataColumn
        
        Private columnstatus As Global.System.Data.DataColumn
        
        Private columnmodelno As Global.System.Data.DataColumn
        
        Private columnserialno As Global.System.Data.DataColumn
        
        Private columndateacquir As Global.System.Data.DataColumn
        
        Private columncomments As Global.System.Data.DataColumn
        
        Private columnnextsched As Global.System.Data.DataColumn
        
        Private columnevent As Global.System.Data.DataColumn
        
        Private columndepartment As Global.System.Data.DataColumn
        
        Private columnmanufactur As Global.System.Data.DataColumn
        
        Private columntimestamp_column As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "assets"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property desc_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columndesc_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property assetnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnassetno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property locationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlocation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property catColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property modelnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmodelno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property serialnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnserialno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property dateacquirColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndateacquir
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property commentsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomments
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property nextschedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnextsched
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property eventColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnevent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property departmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndepartment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property manufacturColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmanufactur
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property timestamp_columnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimestamp_column
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As assetsRow
            Get
                Return CType(Me.Rows(index),assetsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event assetsRowChanging As assetsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event assetsRowChanged As assetsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event assetsRowDeleting As assetsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event assetsRowDeleted As assetsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddassetsRow(ByVal row As assetsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddassetsRow(ByVal desc_ As String, ByVal assetno As String, ByVal location As String, ByVal cat As String, ByVal status As String, ByVal modelno As String, ByVal serialno As String, ByVal dateacquir As Date, ByVal comments As String, ByVal nextsched As Date, ByVal _event As String, ByVal department As String, ByVal manufactur As String, ByVal timestamp_column() As Byte) As assetsRow
            Dim rowassetsRow As assetsRow = CType(Me.NewRow,assetsRow)
            Dim columnValuesArray() As Object = New Object() {desc_, assetno, location, cat, status, modelno, serialno, dateacquir, comments, nextsched, _event, department, manufactur, timestamp_column, Nothing}
            rowassetsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowassetsRow)
            Return rowassetsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As assetsRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),assetsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As assetsDataTable = CType(MyBase.Clone,assetsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New assetsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columndesc_ = MyBase.Columns("desc_")
            Me.columnassetno = MyBase.Columns("assetno")
            Me.columnlocation = MyBase.Columns("location")
            Me.columncat = MyBase.Columns("cat")
            Me.columnstatus = MyBase.Columns("status")
            Me.columnmodelno = MyBase.Columns("modelno")
            Me.columnserialno = MyBase.Columns("serialno")
            Me.columndateacquir = MyBase.Columns("dateacquir")
            Me.columncomments = MyBase.Columns("comments")
            Me.columnnextsched = MyBase.Columns("nextsched")
            Me.columnevent = MyBase.Columns("event")
            Me.columndepartment = MyBase.Columns("department")
            Me.columnmanufactur = MyBase.Columns("manufactur")
            Me.columntimestamp_column = MyBase.Columns("timestamp_column")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columndesc_ = New Global.System.Data.DataColumn("desc_", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndesc_)
            Me.columnassetno = New Global.System.Data.DataColumn("assetno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassetno)
            Me.columnlocation = New Global.System.Data.DataColumn("location", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlocation)
            Me.columncat = New Global.System.Data.DataColumn("cat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncat)
            Me.columnstatus = New Global.System.Data.DataColumn("status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus)
            Me.columnmodelno = New Global.System.Data.DataColumn("modelno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmodelno)
            Me.columnserialno = New Global.System.Data.DataColumn("serialno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnserialno)
            Me.columndateacquir = New Global.System.Data.DataColumn("dateacquir", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndateacquir)
            Me.columncomments = New Global.System.Data.DataColumn("comments", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomments)
            Me.columnnextsched = New Global.System.Data.DataColumn("nextsched", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnextsched)
            Me.columnevent = New Global.System.Data.DataColumn("event", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnevent.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "eventColumn")
            Me.columnevent.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnevent")
            Me.columnevent.ExtendedProperties.Add("Generator_UserColumnName", "event")
            MyBase.Columns.Add(Me.columnevent)
            Me.columndepartment = New Global.System.Data.DataColumn("department", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndepartment)
            Me.columnmanufactur = New Global.System.Data.DataColumn("manufactur", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanufactur)
            Me.columntimestamp_column = New Global.System.Data.DataColumn("timestamp_column", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimestamp_column)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columndesc_.AllowDBNull = false
            Me.columndesc_.MaxLength = 50
            Me.columnassetno.AllowDBNull = false
            Me.columnassetno.MaxLength = 6
            Me.columnlocation.AllowDBNull = false
            Me.columnlocation.MaxLength = 30
            Me.columncat.AllowDBNull = false
            Me.columncat.MaxLength = 30
            Me.columnstatus.AllowDBNull = false
            Me.columnstatus.MaxLength = 20
            Me.columnmodelno.AllowDBNull = false
            Me.columnmodelno.MaxLength = 40
            Me.columnserialno.AllowDBNull = false
            Me.columnserialno.MaxLength = 40
            Me.columndateacquir.AllowDBNull = false
            Me.columncomments.AllowDBNull = false
            Me.columncomments.MaxLength = 2147483647
            Me.columnnextsched.AllowDBNull = false
            Me.columnevent.AllowDBNull = false
            Me.columnevent.MaxLength = 20
            Me.columndepartment.AllowDBNull = false
            Me.columndepartment.MaxLength = 50
            Me.columnmanufactur.AllowDBNull = false
            Me.columnmanufactur.MaxLength = 50
            Me.columntimestamp_column.ReadOnly = true
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewassetsRow() As assetsRow
            Return CType(Me.NewRow,assetsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New assetsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(assetsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.assetsRowChangedEvent) Is Nothing) Then
                RaiseEvent assetsRowChanged(Me, New assetsRowChangeEvent(CType(e.Row,assetsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.assetsRowChangingEvent) Is Nothing) Then
                RaiseEvent assetsRowChanging(Me, New assetsRowChangeEvent(CType(e.Row,assetsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.assetsRowDeletedEvent) Is Nothing) Then
                RaiseEvent assetsRowDeleted(Me, New assetsRowChangeEvent(CType(e.Row,assetsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.assetsRowDeletingEvent) Is Nothing) Then
                RaiseEvent assetsRowDeleting(Me, New assetsRowChangeEvent(CType(e.Row,assetsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveassetsRow(ByVal row As assetsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "assetsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ASSETSNEWDataTable
        Inherits Global.System.Data.TypedTableBase(Of ASSETSNEWRow)
        
        Private columnDESC As Global.System.Data.DataColumn
        
        Private columnASSETNO As Global.System.Data.DataColumn
        
        Private columnLOCATION As Global.System.Data.DataColumn
        
        Private columnCAT As Global.System.Data.DataColumn
        
        Private columnSTATUS As Global.System.Data.DataColumn
        
        Private columnMODELNO As Global.System.Data.DataColumn
        
        Private columnSERIALNO As Global.System.Data.DataColumn
        
        Private columnDATACQUIR As Global.System.Data.DataColumn
        
        Private columnCOMMENTS As Global.System.Data.DataColumn
        
        Private columnNEXTSCHED As Global.System.Data.DataColumn
        
        Private columnEVENT As Global.System.Data.DataColumn
        
        Private columnDEPT As Global.System.Data.DataColumn
        
        Private columnMANUFACTUR As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ASSETSNEW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DESCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ASSETNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnASSETNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property LOCATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLOCATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property CATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property STATUSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSTATUS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MODELNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMODELNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property SERIALNOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSERIALNO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DATACQUIRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDATACQUIR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property COMMENTSColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCOMMENTS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property NEXTSCHEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEXTSCHED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property EVENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEVENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property DEPTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEPT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property MANUFACTURColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMANUFACTUR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ASSETSNEWRow
            Get
                Return CType(Me.Rows(index),ASSETSNEWRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ASSETSNEWRowChanging As ASSETSNEWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ASSETSNEWRowChanged As ASSETSNEWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ASSETSNEWRowDeleting As ASSETSNEWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event ASSETSNEWRowDeleted As ASSETSNEWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddASSETSNEWRow(ByVal row As ASSETSNEWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddASSETSNEWRow(ByVal DESC As String, ByVal ASSETNO As String, ByVal LOCATION As String, ByVal CAT As String, ByVal STATUS As String, ByVal MODELNO As String, ByVal SERIALNO As String, ByVal DATACQUIR As Date, ByVal COMMENTS As String, ByVal NEXTSCHED As Date, ByVal _EVENT As String, ByVal DEPT As String, ByVal MANUFACTUR As String) As ASSETSNEWRow
            Dim rowASSETSNEWRow As ASSETSNEWRow = CType(Me.NewRow,ASSETSNEWRow)
            Dim columnValuesArray() As Object = New Object() {DESC, ASSETNO, LOCATION, CAT, STATUS, MODELNO, SERIALNO, DATACQUIR, COMMENTS, NEXTSCHED, _EVENT, DEPT, MANUFACTUR}
            rowASSETSNEWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowASSETSNEWRow)
            Return rowASSETSNEWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ASSETSNEWDataTable = CType(MyBase.Clone,ASSETSNEWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ASSETSNEWDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnDESC = MyBase.Columns("DESC")
            Me.columnASSETNO = MyBase.Columns("ASSETNO")
            Me.columnLOCATION = MyBase.Columns("LOCATION")
            Me.columnCAT = MyBase.Columns("CAT")
            Me.columnSTATUS = MyBase.Columns("STATUS")
            Me.columnMODELNO = MyBase.Columns("MODELNO")
            Me.columnSERIALNO = MyBase.Columns("SERIALNO")
            Me.columnDATACQUIR = MyBase.Columns("DATACQUIR")
            Me.columnCOMMENTS = MyBase.Columns("COMMENTS")
            Me.columnNEXTSCHED = MyBase.Columns("NEXTSCHED")
            Me.columnEVENT = MyBase.Columns("EVENT")
            Me.columnDEPT = MyBase.Columns("DEPT")
            Me.columnMANUFACTUR = MyBase.Columns("MANUFACTUR")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnDESC = New Global.System.Data.DataColumn("DESC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESC)
            Me.columnASSETNO = New Global.System.Data.DataColumn("ASSETNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnASSETNO)
            Me.columnLOCATION = New Global.System.Data.DataColumn("LOCATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOCATION)
            Me.columnCAT = New Global.System.Data.DataColumn("CAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAT)
            Me.columnSTATUS = New Global.System.Data.DataColumn("STATUS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSTATUS)
            Me.columnMODELNO = New Global.System.Data.DataColumn("MODELNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMODELNO)
            Me.columnSERIALNO = New Global.System.Data.DataColumn("SERIALNO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSERIALNO)
            Me.columnDATACQUIR = New Global.System.Data.DataColumn("DATACQUIR", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDATACQUIR)
            Me.columnCOMMENTS = New Global.System.Data.DataColumn("COMMENTS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCOMMENTS)
            Me.columnNEXTSCHED = New Global.System.Data.DataColumn("NEXTSCHED", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEXTSCHED)
            Me.columnEVENT = New Global.System.Data.DataColumn("EVENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnEVENT.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "EVENTColumn")
            Me.columnEVENT.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnEVENT")
            Me.columnEVENT.ExtendedProperties.Add("Generator_UserColumnName", "EVENT")
            MyBase.Columns.Add(Me.columnEVENT)
            Me.columnDEPT = New Global.System.Data.DataColumn("DEPT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEPT)
            Me.columnMANUFACTUR = New Global.System.Data.DataColumn("MANUFACTUR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMANUFACTUR)
            Me.columnDESC.MaxLength = 50
            Me.columnASSETNO.AllowDBNull = false
            Me.columnASSETNO.MaxLength = 50
            Me.columnLOCATION.MaxLength = 30
            Me.columnCAT.MaxLength = 30
            Me.columnSTATUS.MaxLength = 20
            Me.columnMODELNO.MaxLength = 50
            Me.columnSERIALNO.MaxLength = 50
            Me.columnCOMMENTS.MaxLength = 2147483647
            Me.columnEVENT.MaxLength = 50
            Me.columnDEPT.MaxLength = 50
            Me.columnMANUFACTUR.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewASSETSNEWRow() As ASSETSNEWRow
            Return CType(Me.NewRow,ASSETSNEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ASSETSNEWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ASSETSNEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ASSETSNEWRowChangedEvent) Is Nothing) Then
                RaiseEvent ASSETSNEWRowChanged(Me, New ASSETSNEWRowChangeEvent(CType(e.Row,ASSETSNEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ASSETSNEWRowChangingEvent) Is Nothing) Then
                RaiseEvent ASSETSNEWRowChanging(Me, New ASSETSNEWRowChangeEvent(CType(e.Row,ASSETSNEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ASSETSNEWRowDeletedEvent) Is Nothing) Then
                RaiseEvent ASSETSNEWRowDeleted(Me, New ASSETSNEWRowChangeEvent(CType(e.Row,ASSETSNEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ASSETSNEWRowDeletingEvent) Is Nothing) Then
                RaiseEvent ASSETSNEWRowDeleting(Me, New ASSETSNEWRowChangeEvent(CType(e.Row,ASSETSNEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveASSETSNEWRow(ByVal row As ASSETSNEWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ASSETSNEWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class atransDataTable
        Inherits Global.System.Data.TypedTableBase(Of atransRow)
        
        Private columntassetno As Global.System.Data.DataColumn
        
        Private columntdate As Global.System.Data.DataColumn
        
        Private columntdirect As Global.System.Data.DataColumn
        
        Private columntdesc As Global.System.Data.DataColumn
        
        Private columntwho As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "atrans"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property tassetnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntassetno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property tdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property tdirectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntdirect
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property tdescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntdesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property twhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntwho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As atransRow
            Get
                Return CType(Me.Rows(index),atransRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event atransRowChanging As atransRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event atransRowChanged As atransRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event atransRowDeleting As atransRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event atransRowDeleted As atransRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddatransRow(ByVal row As atransRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddatransRow(ByVal tassetno As String, ByVal tdate As Date, ByVal tdirect As String, ByVal tdesc As String, ByVal twho As String) As atransRow
            Dim rowatransRow As atransRow = CType(Me.NewRow,atransRow)
            Dim columnValuesArray() As Object = New Object() {tassetno, tdate, tdirect, tdesc, twho, Nothing}
            rowatransRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowatransRow)
            Return rowatransRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As atransRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),atransRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As atransDataTable = CType(MyBase.Clone,atransDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New atransDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columntassetno = MyBase.Columns("tassetno")
            Me.columntdate = MyBase.Columns("tdate")
            Me.columntdirect = MyBase.Columns("tdirect")
            Me.columntdesc = MyBase.Columns("tdesc")
            Me.columntwho = MyBase.Columns("twho")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columntassetno = New Global.System.Data.DataColumn("tassetno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntassetno)
            Me.columntdate = New Global.System.Data.DataColumn("tdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntdate)
            Me.columntdirect = New Global.System.Data.DataColumn("tdirect", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntdirect)
            Me.columntdesc = New Global.System.Data.DataColumn("tdesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntdesc)
            Me.columntwho = New Global.System.Data.DataColumn("twho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntwho)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columntassetno.AllowDBNull = false
            Me.columntassetno.MaxLength = 6
            Me.columntdate.AllowDBNull = false
            Me.columntdirect.AllowDBNull = false
            Me.columntdirect.MaxLength = 10
            Me.columntdesc.AllowDBNull = false
            Me.columntdesc.MaxLength = 40
            Me.columntwho.AllowDBNull = false
            Me.columntwho.MaxLength = 30
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewatransRow() As atransRow
            Return CType(Me.NewRow,atransRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New atransRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(atransRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.atransRowChangedEvent) Is Nothing) Then
                RaiseEvent atransRowChanged(Me, New atransRowChangeEvent(CType(e.Row,atransRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.atransRowChangingEvent) Is Nothing) Then
                RaiseEvent atransRowChanging(Me, New atransRowChangeEvent(CType(e.Row,atransRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.atransRowDeletedEvent) Is Nothing) Then
                RaiseEvent atransRowDeleted(Me, New atransRowChangeEvent(CType(e.Row,atransRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.atransRowDeletingEvent) Is Nothing) Then
                RaiseEvent atransRowDeleting(Me, New atransRowChangeEvent(CType(e.Row,atransRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveatransRow(ByVal row As atransRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "atransDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class binallocDataTable
        Inherits Global.System.Data.TypedTableBase(Of binallocRow)
        
        Private columnbinpart As Global.System.Data.DataColumn
        
        Private columnbinsup As Global.System.Data.DataColumn
        
        Private columnbinref As Global.System.Data.DataColumn
        
        Private columnbincode As Global.System.Data.DataColumn
        
        Private columnbinrecno As Global.System.Data.DataColumn
        
        Private columnbinalloc As Global.System.Data.DataColumn
        
        Private columnbininvno As Global.System.Data.DataColumn
        
        Private columnbinwho As Global.System.Data.DataColumn
        
        Private columnbindate As Global.System.Data.DataColumn
        
        Private columnbinordno As Global.System.Data.DataColumn
        
        Private columnbline As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "binalloc"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property binpartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbinpart
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property binsupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbinsup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property binrefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbinref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property bincodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbincode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property binrecnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbinrecno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property binallocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbinalloc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property bininvnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbininvno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property binwhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbinwho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property bindateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbindate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property binordnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbinordno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property blineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbline
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As binallocRow
            Get
                Return CType(Me.Rows(index),binallocRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event binallocRowChanging As binallocRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event binallocRowChanged As binallocRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event binallocRowDeleting As binallocRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event binallocRowDeleted As binallocRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddbinallocRow(ByVal row As binallocRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddbinallocRow(ByVal binpart As String, ByVal binsup As String, ByVal binref As String, ByVal bincode As String, ByVal binrecno As Decimal, ByVal binalloc As Decimal, ByVal bininvno As String, ByVal binwho As String, ByVal bindate As Date, ByVal binordno As String, ByVal bline As String) As binallocRow
            Dim rowbinallocRow As binallocRow = CType(Me.NewRow,binallocRow)
            Dim columnValuesArray() As Object = New Object() {binpart, binsup, binref, bincode, binrecno, binalloc, bininvno, binwho, bindate, binordno, bline, Nothing}
            rowbinallocRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowbinallocRow)
            Return rowbinallocRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As binallocRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),binallocRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As binallocDataTable = CType(MyBase.Clone,binallocDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New binallocDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnbinpart = MyBase.Columns("binpart")
            Me.columnbinsup = MyBase.Columns("binsup")
            Me.columnbinref = MyBase.Columns("binref")
            Me.columnbincode = MyBase.Columns("bincode")
            Me.columnbinrecno = MyBase.Columns("binrecno")
            Me.columnbinalloc = MyBase.Columns("binalloc")
            Me.columnbininvno = MyBase.Columns("bininvno")
            Me.columnbinwho = MyBase.Columns("binwho")
            Me.columnbindate = MyBase.Columns("bindate")
            Me.columnbinordno = MyBase.Columns("binordno")
            Me.columnbline = MyBase.Columns("bline")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnbinpart = New Global.System.Data.DataColumn("binpart", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbinpart)
            Me.columnbinsup = New Global.System.Data.DataColumn("binsup", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbinsup)
            Me.columnbinref = New Global.System.Data.DataColumn("binref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbinref)
            Me.columnbincode = New Global.System.Data.DataColumn("bincode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbincode)
            Me.columnbinrecno = New Global.System.Data.DataColumn("binrecno", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbinrecno)
            Me.columnbinalloc = New Global.System.Data.DataColumn("binalloc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbinalloc)
            Me.columnbininvno = New Global.System.Data.DataColumn("bininvno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbininvno)
            Me.columnbinwho = New Global.System.Data.DataColumn("binwho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbinwho)
            Me.columnbindate = New Global.System.Data.DataColumn("bindate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbindate)
            Me.columnbinordno = New Global.System.Data.DataColumn("binordno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbinordno)
            Me.columnbline = New Global.System.Data.DataColumn("bline", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbline)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnbinpart.AllowDBNull = false
            Me.columnbinpart.MaxLength = 20
            Me.columnbinsup.AllowDBNull = false
            Me.columnbinsup.MaxLength = 7
            Me.columnbinref.AllowDBNull = false
            Me.columnbinref.MaxLength = 8
            Me.columnbincode.AllowDBNull = false
            Me.columnbincode.MaxLength = 5
            Me.columnbinrecno.AllowDBNull = false
            Me.columnbinalloc.AllowDBNull = false
            Me.columnbininvno.AllowDBNull = false
            Me.columnbininvno.MaxLength = 5
            Me.columnbinwho.AllowDBNull = false
            Me.columnbinwho.MaxLength = 5
            Me.columnbindate.AllowDBNull = false
            Me.columnbinordno.AllowDBNull = false
            Me.columnbinordno.MaxLength = 6
            Me.columnbline.AllowDBNull = false
            Me.columnbline.MaxLength = 3
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewbinallocRow() As binallocRow
            Return CType(Me.NewRow,binallocRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New binallocRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(binallocRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.binallocRowChangedEvent) Is Nothing) Then
                RaiseEvent binallocRowChanged(Me, New binallocRowChangeEvent(CType(e.Row,binallocRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.binallocRowChangingEvent) Is Nothing) Then
                RaiseEvent binallocRowChanging(Me, New binallocRowChangeEvent(CType(e.Row,binallocRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.binallocRowDeletedEvent) Is Nothing) Then
                RaiseEvent binallocRowDeleted(Me, New binallocRowChangeEvent(CType(e.Row,binallocRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.binallocRowDeletingEvent) Is Nothing) Then
                RaiseEvent binallocRowDeleting(Me, New binallocRowChangeEvent(CType(e.Row,binallocRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovebinallocRow(ByVal row As binallocRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "binallocDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class catDataTable
        Inherits Global.System.Data.TypedTableBase(Of catRow)
        
        Private columncdesc As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "cat"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property cdescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncdesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As catRow
            Get
                Return CType(Me.Rows(index),catRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event catRowChanging As catRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event catRowChanged As catRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event catRowDeleting As catRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event catRowDeleted As catRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddcatRow(ByVal row As catRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddcatRow(ByVal cdesc As String) As catRow
            Dim rowcatRow As catRow = CType(Me.NewRow,catRow)
            Dim columnValuesArray() As Object = New Object() {cdesc, Nothing}
            rowcatRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcatRow)
            Return rowcatRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As catRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),catRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As catDataTable = CType(MyBase.Clone,catDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New catDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columncdesc = MyBase.Columns("cdesc")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columncdesc = New Global.System.Data.DataColumn("cdesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncdesc)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columncdesc.AllowDBNull = false
            Me.columncdesc.MaxLength = 30
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewcatRow() As catRow
            Return CType(Me.NewRow,catRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New catRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(catRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.catRowChangedEvent) Is Nothing) Then
                RaiseEvent catRowChanged(Me, New catRowChangeEvent(CType(e.Row,catRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.catRowChangingEvent) Is Nothing) Then
                RaiseEvent catRowChanging(Me, New catRowChangeEvent(CType(e.Row,catRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.catRowDeletedEvent) Is Nothing) Then
                RaiseEvent catRowDeleted(Me, New catRowChangeEvent(CType(e.Row,catRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.catRowDeletingEvent) Is Nothing) Then
                RaiseEvent catRowDeleting(Me, New catRowChangeEvent(CType(e.Row,catRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovecatRow(ByVal row As catRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "catDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class countryDataTable
        Inherits Global.System.Data.TypedTableBase(Of countryRow)
        
        Private columncty_code As Global.System.Data.DataColumn
        
        Private columncty_name As Global.System.Data.DataColumn
        
        Private columnpeg_code As Global.System.Data.DataColumn
        
        Private columnpeg_curcy As Global.System.Data.DataColumn
        
        Private columninv_rate As Global.System.Data.DataColumn
        
        Private columnerate As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "country"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property cty_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncty_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property cty_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncty_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property peg_codeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpeg_code
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property peg_curcyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpeg_curcy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property inv_rateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninv_rate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property erateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnerate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As countryRow
            Get
                Return CType(Me.Rows(index),countryRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event countryRowChanging As countryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event countryRowChanged As countryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event countryRowDeleting As countryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event countryRowDeleted As countryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddcountryRow(ByVal row As countryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddcountryRow(ByVal cty_code As String, ByVal cty_name As String, ByVal peg_code As String, ByVal peg_curcy As String, ByVal inv_rate As Decimal, ByVal erate As Decimal) As countryRow
            Dim rowcountryRow As countryRow = CType(Me.NewRow,countryRow)
            Dim columnValuesArray() As Object = New Object() {cty_code, cty_name, peg_code, peg_curcy, inv_rate, erate, Nothing}
            rowcountryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcountryRow)
            Return rowcountryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As countryRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),countryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As countryDataTable = CType(MyBase.Clone,countryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New countryDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columncty_code = MyBase.Columns("cty_code")
            Me.columncty_name = MyBase.Columns("cty_name")
            Me.columnpeg_code = MyBase.Columns("peg_code")
            Me.columnpeg_curcy = MyBase.Columns("peg_curcy")
            Me.columninv_rate = MyBase.Columns("inv_rate")
            Me.columnerate = MyBase.Columns("erate")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columncty_code = New Global.System.Data.DataColumn("cty_code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncty_code)
            Me.columncty_name = New Global.System.Data.DataColumn("cty_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncty_name)
            Me.columnpeg_code = New Global.System.Data.DataColumn("peg_code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpeg_code)
            Me.columnpeg_curcy = New Global.System.Data.DataColumn("peg_curcy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpeg_curcy)
            Me.columninv_rate = New Global.System.Data.DataColumn("inv_rate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninv_rate)
            Me.columnerate = New Global.System.Data.DataColumn("erate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnerate)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columncty_code.AllowDBNull = false
            Me.columncty_code.MaxLength = 3
            Me.columncty_name.AllowDBNull = false
            Me.columncty_name.MaxLength = 10
            Me.columnpeg_code.AllowDBNull = false
            Me.columnpeg_code.MaxLength = 10
            Me.columnpeg_curcy.AllowDBNull = false
            Me.columnpeg_curcy.MaxLength = 7
            Me.columninv_rate.AllowDBNull = false
            Me.columnerate.AllowDBNull = false
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewcountryRow() As countryRow
            Return CType(Me.NewRow,countryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New countryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(countryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.countryRowChangedEvent) Is Nothing) Then
                RaiseEvent countryRowChanged(Me, New countryRowChangeEvent(CType(e.Row,countryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.countryRowChangingEvent) Is Nothing) Then
                RaiseEvent countryRowChanging(Me, New countryRowChangeEvent(CType(e.Row,countryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.countryRowDeletedEvent) Is Nothing) Then
                RaiseEvent countryRowDeleted(Me, New countryRowChangeEvent(CType(e.Row,countryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.countryRowDeletingEvent) Is Nothing) Then
                RaiseEvent countryRowDeleting(Me, New countryRowChangeEvent(CType(e.Row,countryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovecountryRow(ByVal row As countryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "countryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class custdiscDataTable
        Inherits Global.System.Data.TypedTableBase(Of custdiscRow)
        
        Private columnaccno As Global.System.Data.DataColumn
        
        Private columnsupplier As Global.System.Data.DataColumn
        
        Private columndpercent As Global.System.Data.DataColumn
        
        Private columnspercent As Global.System.Data.DataColumn
        
        Private columnsvalue As Global.System.Data.DataColumn
        
        Private columnshowdisc As Global.System.Data.DataColumn
        
        Private columndupdate As Global.System.Data.DataColumn
        
        Private columndwho As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "custdisc"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property accnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property supplierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsupplier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property dpercentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndpercent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property spercentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnspercent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property svalueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsvalue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property showdiscColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnshowdisc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property dupdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndupdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property dwhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndwho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As custdiscRow
            Get
                Return CType(Me.Rows(index),custdiscRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event custdiscRowChanging As custdiscRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event custdiscRowChanged As custdiscRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event custdiscRowDeleting As custdiscRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event custdiscRowDeleted As custdiscRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddcustdiscRow(ByVal row As custdiscRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddcustdiscRow(ByVal accno As String, ByVal supplier As String, ByVal dpercent As Decimal, ByVal spercent As Decimal, ByVal svalue As Decimal, ByVal showdisc As Boolean, ByVal dupdate As Date, ByVal dwho As String) As custdiscRow
            Dim rowcustdiscRow As custdiscRow = CType(Me.NewRow,custdiscRow)
            Dim columnValuesArray() As Object = New Object() {accno, supplier, dpercent, spercent, svalue, showdisc, dupdate, dwho, Nothing}
            rowcustdiscRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcustdiscRow)
            Return rowcustdiscRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As custdiscRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),custdiscRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As custdiscDataTable = CType(MyBase.Clone,custdiscDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New custdiscDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnaccno = MyBase.Columns("accno")
            Me.columnsupplier = MyBase.Columns("supplier")
            Me.columndpercent = MyBase.Columns("dpercent")
            Me.columnspercent = MyBase.Columns("spercent")
            Me.columnsvalue = MyBase.Columns("svalue")
            Me.columnshowdisc = MyBase.Columns("showdisc")
            Me.columndupdate = MyBase.Columns("dupdate")
            Me.columndwho = MyBase.Columns("dwho")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnaccno = New Global.System.Data.DataColumn("accno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccno)
            Me.columnsupplier = New Global.System.Data.DataColumn("supplier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsupplier)
            Me.columndpercent = New Global.System.Data.DataColumn("dpercent", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndpercent)
            Me.columnspercent = New Global.System.Data.DataColumn("spercent", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnspercent)
            Me.columnsvalue = New Global.System.Data.DataColumn("svalue", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsvalue)
            Me.columnshowdisc = New Global.System.Data.DataColumn("showdisc", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnshowdisc)
            Me.columndupdate = New Global.System.Data.DataColumn("dupdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndupdate)
            Me.columndwho = New Global.System.Data.DataColumn("dwho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndwho)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnaccno.AllowDBNull = false
            Me.columnaccno.MaxLength = 4
            Me.columnsupplier.AllowDBNull = false
            Me.columnsupplier.MaxLength = 10
            Me.columndpercent.AllowDBNull = false
            Me.columnspercent.AllowDBNull = false
            Me.columnsvalue.AllowDBNull = false
            Me.columnshowdisc.AllowDBNull = false
            Me.columndupdate.AllowDBNull = false
            Me.columndwho.AllowDBNull = false
            Me.columndwho.MaxLength = 5
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewcustdiscRow() As custdiscRow
            Return CType(Me.NewRow,custdiscRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New custdiscRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(custdiscRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.custdiscRowChangedEvent) Is Nothing) Then
                RaiseEvent custdiscRowChanged(Me, New custdiscRowChangeEvent(CType(e.Row,custdiscRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.custdiscRowChangingEvent) Is Nothing) Then
                RaiseEvent custdiscRowChanging(Me, New custdiscRowChangeEvent(CType(e.Row,custdiscRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.custdiscRowDeletedEvent) Is Nothing) Then
                RaiseEvent custdiscRowDeleted(Me, New custdiscRowChangeEvent(CType(e.Row,custdiscRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.custdiscRowDeletingEvent) Is Nothing) Then
                RaiseEvent custdiscRowDeleting(Me, New custdiscRowChangeEvent(CType(e.Row,custdiscRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovecustdiscRow(ByVal row As custdiscRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "custdiscDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dummy_DataTable
        Inherits Global.System.Data.TypedTableBase(Of dummy_Row)
        
        Private columndummy1 As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dummy_"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property dummy1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columndummy1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dummy_Row
            Get
                Return CType(Me.Rows(index),dummy_Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event dummy_RowChanging As dummy_RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event dummy_RowChanged As dummy_RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event dummy_RowDeleting As dummy_RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event dummy_RowDeleted As dummy_RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub Adddummy_Row(ByVal row As dummy_Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function Adddummy_Row(ByVal dummy1 As String) As dummy_Row
            Dim rowdummy_Row As dummy_Row = CType(Me.NewRow,dummy_Row)
            Dim columnValuesArray() As Object = New Object() {dummy1, Nothing}
            rowdummy_Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowdummy_Row)
            Return rowdummy_Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As dummy_Row
            Return CType(Me.Rows.Find(New Object() {UniqueID}),dummy_Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dummy_DataTable = CType(MyBase.Clone,dummy_DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dummy_DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columndummy1 = MyBase.Columns("dummy1")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columndummy1 = New Global.System.Data.DataColumn("dummy1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndummy1)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columndummy1.AllowDBNull = false
            Me.columndummy1.MaxLength = 10
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Newdummy_Row() As dummy_Row
            Return CType(Me.NewRow,dummy_Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dummy_Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dummy_Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dummy_RowChangedEvent) Is Nothing) Then
                RaiseEvent dummy_RowChanged(Me, New dummy_RowChangeEvent(CType(e.Row,dummy_Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dummy_RowChangingEvent) Is Nothing) Then
                RaiseEvent dummy_RowChanging(Me, New dummy_RowChangeEvent(CType(e.Row,dummy_Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dummy_RowDeletedEvent) Is Nothing) Then
                RaiseEvent dummy_RowDeleted(Me, New dummy_RowChangeEvent(CType(e.Row,dummy_Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dummy_RowDeletingEvent) Is Nothing) Then
                RaiseEvent dummy_RowDeleting(Me, New dummy_RowChangeEvent(CType(e.Row,dummy_Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Removedummy_Row(ByVal row As dummy_Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dummy_DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class enquiryDataTable
        Inherits Global.System.Data.TypedTableBase(Of enquiryRow)
        
        Private columnquote_no As Global.System.Data.DataColumn
        
        Private columncname As Global.System.Data.DataColumn
        
        Private columnref_no As Global.System.Data.DataColumn
        
        Private columnstatus As Global.System.Data.DataColumn
        
        Private columnewho As Global.System.Data.DataColumn
        
        Private columnaccno As Global.System.Data.DataColumn
        
        Private columnememo As Global.System.Data.DataColumn
        
        Private columnship_name As Global.System.Data.DataColumn
        
        Private columnemail As Global.System.Data.DataColumn
        
        Private columnmobtel_no As Global.System.Data.DataColumn
        
        Private columnfax_no As Global.System.Data.DataColumn
        
        Private columntel_no As Global.System.Data.DataColumn
        
        Private columncontact As Global.System.Data.DataColumn
        
        Private columnedate As Global.System.Data.DataColumn
        
        Private columnetype As Global.System.Data.DataColumn
        
        Private columntimestamp_column As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "enquiry"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property quote_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnquote_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property cnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ref_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnref_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ewhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnewho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property accnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ememoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnememo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ship_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnship_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property mobtel_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmobtel_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property fax_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfax_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property tel_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntel_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property contactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property edateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnedate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property etypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnetype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property timestamp_columnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimestamp_column
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As enquiryRow
            Get
                Return CType(Me.Rows(index),enquiryRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event enquiryRowChanging As enquiryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event enquiryRowChanged As enquiryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event enquiryRowDeleting As enquiryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event enquiryRowDeleted As enquiryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddenquiryRow(ByVal row As enquiryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddenquiryRow( _
                    ByVal quote_no As String,  _
                    ByVal cname As String,  _
                    ByVal ref_no As String,  _
                    ByVal status As String,  _
                    ByVal ewho As String,  _
                    ByVal accno As String,  _
                    ByVal ememo As String,  _
                    ByVal ship_name As String,  _
                    ByVal email As String,  _
                    ByVal mobtel_no As String,  _
                    ByVal fax_no As String,  _
                    ByVal tel_no As String,  _
                    ByVal contact As String,  _
                    ByVal edate As Date,  _
                    ByVal etype As String,  _
                    ByVal timestamp_column() As Byte,  _
                    ByVal UniqueID As Long) As enquiryRow
            Dim rowenquiryRow As enquiryRow = CType(Me.NewRow,enquiryRow)
            Dim columnValuesArray() As Object = New Object() {quote_no, cname, ref_no, status, ewho, accno, ememo, ship_name, email, mobtel_no, fax_no, tel_no, contact, edate, etype, timestamp_column, UniqueID}
            rowenquiryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowenquiryRow)
            Return rowenquiryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByquote_no(ByVal quote_no As String) As enquiryRow
            Return CType(Me.Rows.Find(New Object() {quote_no}),enquiryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As enquiryDataTable = CType(MyBase.Clone,enquiryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New enquiryDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnquote_no = MyBase.Columns("quote_no")
            Me.columncname = MyBase.Columns("cname")
            Me.columnref_no = MyBase.Columns("ref_no")
            Me.columnstatus = MyBase.Columns("status")
            Me.columnewho = MyBase.Columns("ewho")
            Me.columnaccno = MyBase.Columns("accno")
            Me.columnememo = MyBase.Columns("ememo")
            Me.columnship_name = MyBase.Columns("ship_name")
            Me.columnemail = MyBase.Columns("email")
            Me.columnmobtel_no = MyBase.Columns("mobtel_no")
            Me.columnfax_no = MyBase.Columns("fax_no")
            Me.columntel_no = MyBase.Columns("tel_no")
            Me.columncontact = MyBase.Columns("contact")
            Me.columnedate = MyBase.Columns("edate")
            Me.columnetype = MyBase.Columns("etype")
            Me.columntimestamp_column = MyBase.Columns("timestamp_column")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnquote_no = New Global.System.Data.DataColumn("quote_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquote_no)
            Me.columncname = New Global.System.Data.DataColumn("cname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncname)
            Me.columnref_no = New Global.System.Data.DataColumn("ref_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnref_no)
            Me.columnstatus = New Global.System.Data.DataColumn("status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus)
            Me.columnewho = New Global.System.Data.DataColumn("ewho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnewho)
            Me.columnaccno = New Global.System.Data.DataColumn("accno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccno)
            Me.columnememo = New Global.System.Data.DataColumn("ememo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnememo)
            Me.columnship_name = New Global.System.Data.DataColumn("ship_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnship_name)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.columnmobtel_no = New Global.System.Data.DataColumn("mobtel_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmobtel_no)
            Me.columnfax_no = New Global.System.Data.DataColumn("fax_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfax_no)
            Me.columntel_no = New Global.System.Data.DataColumn("tel_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntel_no)
            Me.columncontact = New Global.System.Data.DataColumn("contact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontact)
            Me.columnedate = New Global.System.Data.DataColumn("edate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnedate)
            Me.columnetype = New Global.System.Data.DataColumn("etype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnetype)
            Me.columntimestamp_column = New Global.System.Data.DataColumn("timestamp_column", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimestamp_column)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnquote_no}, true))
            Me.columnquote_no.AllowDBNull = false
            Me.columnquote_no.Unique = true
            Me.columnquote_no.MaxLength = 20
            Me.columncname.MaxLength = 300
            Me.columnref_no.MaxLength = 300
            Me.columnstatus.MaxLength = 80
            Me.columnewho.MaxLength = 80
            Me.columnaccno.MaxLength = 20
            Me.columnememo.MaxLength = 2147483647
            Me.columnship_name.MaxLength = 300
            Me.columnemail.MaxLength = 300
            Me.columnmobtel_no.MaxLength = 300
            Me.columnfax_no.MaxLength = 300
            Me.columntel_no.MaxLength = 300
            Me.columncontact.MaxLength = 300
            Me.columnetype.MaxLength = 90
            Me.columntimestamp_column.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewenquiryRow() As enquiryRow
            Return CType(Me.NewRow,enquiryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New enquiryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(enquiryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.enquiryRowChangedEvent) Is Nothing) Then
                RaiseEvent enquiryRowChanged(Me, New enquiryRowChangeEvent(CType(e.Row,enquiryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.enquiryRowChangingEvent) Is Nothing) Then
                RaiseEvent enquiryRowChanging(Me, New enquiryRowChangeEvent(CType(e.Row,enquiryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.enquiryRowDeletedEvent) Is Nothing) Then
                RaiseEvent enquiryRowDeleted(Me, New enquiryRowChangeEvent(CType(e.Row,enquiryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.enquiryRowDeletingEvent) Is Nothing) Then
                RaiseEvent enquiryRowDeleting(Me, New enquiryRowChangeEvent(CType(e.Row,enquiryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveenquiryRow(ByVal row As enquiryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "enquiryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class eventDataTable
        Inherits Global.System.Data.TypedTableBase(Of eventRow)
        
        Private columnedesc As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "event"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property edescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnedesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As eventRow
            Get
                Return CType(Me.Rows(index),eventRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event eventRowChanging As eventRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event eventRowChanged As eventRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event eventRowDeleting As eventRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event eventRowDeleted As eventRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddeventRow(ByVal row As eventRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddeventRow(ByVal edesc As String) As eventRow
            Dim roweventRow As eventRow = CType(Me.NewRow,eventRow)
            Dim columnValuesArray() As Object = New Object() {edesc, Nothing}
            roweventRow.ItemArray = columnValuesArray
            Me.Rows.Add(roweventRow)
            Return roweventRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As eventRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),eventRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As eventDataTable = CType(MyBase.Clone,eventDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New eventDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnedesc = MyBase.Columns("edesc")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnedesc = New Global.System.Data.DataColumn("edesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnedesc)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnedesc.AllowDBNull = false
            Me.columnedesc.MaxLength = 20
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
            Me.ExtendedProperties.Add("Generator_RowClassName", "eventRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "eventRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "eventRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "eventDataTable")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tableevent")
            Me.ExtendedProperties.Add("Generator_UserTableName", "event")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NeweventRow() As eventRow
            Return CType(Me.NewRow,eventRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New eventRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(eventRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.eventRowChangedEvent) Is Nothing) Then
                RaiseEvent eventRowChanged(Me, New eventRowChangeEvent(CType(e.Row,eventRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.eventRowChangingEvent) Is Nothing) Then
                RaiseEvent eventRowChanging(Me, New eventRowChangeEvent(CType(e.Row,eventRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.eventRowDeletedEvent) Is Nothing) Then
                RaiseEvent eventRowDeleted(Me, New eventRowChangeEvent(CType(e.Row,eventRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.eventRowDeletingEvent) Is Nothing) Then
                RaiseEvent eventRowDeleting(Me, New eventRowChangeEvent(CType(e.Row,eventRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveeventRow(ByVal row As eventRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "eventDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class foxuserDataTable
        Inherits Global.System.Data.TypedTableBase(Of foxuserRow)
        
        Private columntype As Global.System.Data.DataColumn
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columnreadonly As Global.System.Data.DataColumn
        
        Private columnckval As Global.System.Data.DataColumn
        
        Private columndata As Global.System.Data.DataColumn
        
        Private columnupdated As Global.System.Data.DataColumn
        
        Private columntimestamp_column As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "foxuser"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property readonlyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreadonly
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ckvalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnckval
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property dataColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndata
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property updatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnupdated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property timestamp_columnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimestamp_column
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As foxuserRow
            Get
                Return CType(Me.Rows(index),foxuserRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event foxuserRowChanging As foxuserRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event foxuserRowChanged As foxuserRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event foxuserRowDeleting As foxuserRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event foxuserRowDeleted As foxuserRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddfoxuserRow(ByVal row As foxuserRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddfoxuserRow(ByVal type As String, ByVal id As String, ByVal name As String, ByVal _readonly As Boolean, ByVal ckval As Decimal, ByVal data As String, ByVal updated As Date, ByVal timestamp_column() As Byte) As foxuserRow
            Dim rowfoxuserRow As foxuserRow = CType(Me.NewRow,foxuserRow)
            Dim columnValuesArray() As Object = New Object() {type, id, name, _readonly, ckval, data, updated, timestamp_column, Nothing}
            rowfoxuserRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowfoxuserRow)
            Return rowfoxuserRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As foxuserRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),foxuserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As foxuserDataTable = CType(MyBase.Clone,foxuserDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New foxuserDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columntype = MyBase.Columns("type")
            Me.columnid = MyBase.Columns("id")
            Me.columnname = MyBase.Columns("name")
            Me.columnreadonly = MyBase.Columns("readonly")
            Me.columnckval = MyBase.Columns("ckval")
            Me.columndata = MyBase.Columns("data")
            Me.columnupdated = MyBase.Columns("updated")
            Me.columntimestamp_column = MyBase.Columns("timestamp_column")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columntype = New Global.System.Data.DataColumn("type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntype)
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columnreadonly = New Global.System.Data.DataColumn("readonly", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            Me.columnreadonly.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "readonlyColumn")
            Me.columnreadonly.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnreadonly")
            Me.columnreadonly.ExtendedProperties.Add("Generator_UserColumnName", "readonly")
            MyBase.Columns.Add(Me.columnreadonly)
            Me.columnckval = New Global.System.Data.DataColumn("ckval", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnckval)
            Me.columndata = New Global.System.Data.DataColumn("data", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndata)
            Me.columnupdated = New Global.System.Data.DataColumn("updated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupdated)
            Me.columntimestamp_column = New Global.System.Data.DataColumn("timestamp_column", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimestamp_column)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columntype.AllowDBNull = false
            Me.columntype.MaxLength = 12
            Me.columnid.AllowDBNull = false
            Me.columnid.MaxLength = 12
            Me.columnname.AllowDBNull = false
            Me.columnname.MaxLength = 2147483647
            Me.columnreadonly.AllowDBNull = false
            Me.columnckval.AllowDBNull = false
            Me.columndata.AllowDBNull = false
            Me.columndata.MaxLength = 2147483647
            Me.columnupdated.AllowDBNull = false
            Me.columntimestamp_column.ReadOnly = true
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewfoxuserRow() As foxuserRow
            Return CType(Me.NewRow,foxuserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New foxuserRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(foxuserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.foxuserRowChangedEvent) Is Nothing) Then
                RaiseEvent foxuserRowChanged(Me, New foxuserRowChangeEvent(CType(e.Row,foxuserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.foxuserRowChangingEvent) Is Nothing) Then
                RaiseEvent foxuserRowChanging(Me, New foxuserRowChangeEvent(CType(e.Row,foxuserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.foxuserRowDeletedEvent) Is Nothing) Then
                RaiseEvent foxuserRowDeleted(Me, New foxuserRowChangeEvent(CType(e.Row,foxuserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.foxuserRowDeletingEvent) Is Nothing) Then
                RaiseEvent foxuserRowDeleting(Me, New foxuserRowChangeEvent(CType(e.Row,foxuserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovefoxuserRow(ByVal row As foxuserRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "foxuserDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class invlineDataTable
        Inherits Global.System.Data.TypedTableBase(Of invlineRow)
        
        Private columnlinvno As Global.System.Data.DataColumn
        
        Private columnlineno_ As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columnldesc As Global.System.Data.DataColumn
        
        Private columnlamount As Global.System.Data.DataColumn
        
        Private columnltotal As Global.System.Data.DataColumn
        
        Private columnlvat As Global.System.Data.DataColumn
        
        Private columnlmemo As Global.System.Data.DataColumn
        
        Private columntimestamp_column As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "invline"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property linvnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlinvno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lineno_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnlineno_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ldescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnldesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lamountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ltotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnltotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lvatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlvat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lmemoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlmemo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property timestamp_columnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimestamp_column
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As invlineRow
            Get
                Return CType(Me.Rows(index),invlineRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invlineRowChanging As invlineRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invlineRowChanged As invlineRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invlineRowDeleting As invlineRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invlineRowDeleted As invlineRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddinvlineRow(ByVal row As invlineRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddinvlineRow(ByVal linvno As String, ByVal lineno_ As String, ByVal qty As Decimal, ByVal ldesc As String, ByVal lamount As Decimal, ByVal ltotal As Decimal, ByVal lvat As Decimal, ByVal lmemo As String, ByVal timestamp_column() As Byte) As invlineRow
            Dim rowinvlineRow As invlineRow = CType(Me.NewRow,invlineRow)
            Dim columnValuesArray() As Object = New Object() {linvno, lineno_, qty, ldesc, lamount, ltotal, lvat, lmemo, timestamp_column, Nothing}
            rowinvlineRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowinvlineRow)
            Return rowinvlineRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As invlineRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),invlineRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As invlineDataTable = CType(MyBase.Clone,invlineDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New invlineDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnlinvno = MyBase.Columns("linvno")
            Me.columnlineno_ = MyBase.Columns("lineno_")
            Me.columnqty = MyBase.Columns("qty")
            Me.columnldesc = MyBase.Columns("ldesc")
            Me.columnlamount = MyBase.Columns("lamount")
            Me.columnltotal = MyBase.Columns("ltotal")
            Me.columnlvat = MyBase.Columns("lvat")
            Me.columnlmemo = MyBase.Columns("lmemo")
            Me.columntimestamp_column = MyBase.Columns("timestamp_column")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnlinvno = New Global.System.Data.DataColumn("linvno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlinvno)
            Me.columnlineno_ = New Global.System.Data.DataColumn("lineno_", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlineno_)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columnldesc = New Global.System.Data.DataColumn("ldesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnldesc)
            Me.columnlamount = New Global.System.Data.DataColumn("lamount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlamount)
            Me.columnltotal = New Global.System.Data.DataColumn("ltotal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnltotal)
            Me.columnlvat = New Global.System.Data.DataColumn("lvat", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlvat)
            Me.columnlmemo = New Global.System.Data.DataColumn("lmemo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlmemo)
            Me.columntimestamp_column = New Global.System.Data.DataColumn("timestamp_column", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimestamp_column)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnlinvno.AllowDBNull = false
            Me.columnlinvno.MaxLength = 6
            Me.columnlineno_.AllowDBNull = false
            Me.columnlineno_.MaxLength = 2
            Me.columnqty.AllowDBNull = false
            Me.columnldesc.AllowDBNull = false
            Me.columnldesc.MaxLength = 40
            Me.columnlamount.AllowDBNull = false
            Me.columnltotal.AllowDBNull = false
            Me.columnlvat.AllowDBNull = false
            Me.columnlmemo.AllowDBNull = false
            Me.columnlmemo.MaxLength = 2147483647
            Me.columntimestamp_column.ReadOnly = true
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewinvlineRow() As invlineRow
            Return CType(Me.NewRow,invlineRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New invlineRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(invlineRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.invlineRowChangedEvent) Is Nothing) Then
                RaiseEvent invlineRowChanged(Me, New invlineRowChangeEvent(CType(e.Row,invlineRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.invlineRowChangingEvent) Is Nothing) Then
                RaiseEvent invlineRowChanging(Me, New invlineRowChangeEvent(CType(e.Row,invlineRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.invlineRowDeletedEvent) Is Nothing) Then
                RaiseEvent invlineRowDeleted(Me, New invlineRowChangeEvent(CType(e.Row,invlineRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.invlineRowDeletingEvent) Is Nothing) Then
                RaiseEvent invlineRowDeleting(Me, New invlineRowChangeEvent(CType(e.Row,invlineRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveinvlineRow(ByVal row As invlineRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "invlineDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class invoiceheadDataTable
        Inherits Global.System.Data.TypedTableBase(Of invoiceheadRow)
        
        Private columniaccno As Global.System.Data.DataColumn
        
        Private columninvno As Global.System.Data.DataColumn
        
        Private columnidate As Global.System.Data.DataColumn
        
        Private columnpdate As Global.System.Data.DataColumn
        
        Private columniamount As Global.System.Data.DataColumn
        
        Private columnvatamount As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "invoicehead"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iaccnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniaccno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property invnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninvno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property idateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property pdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iamountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property vatamountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As invoiceheadRow
            Get
                Return CType(Me.Rows(index),invoiceheadRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invoiceheadRowChanging As invoiceheadRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invoiceheadRowChanged As invoiceheadRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invoiceheadRowDeleting As invoiceheadRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invoiceheadRowDeleted As invoiceheadRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddinvoiceheadRow(ByVal row As invoiceheadRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddinvoiceheadRow(ByVal iaccno As String, ByVal invno As String, ByVal idate As Date, ByVal pdate As Date, ByVal iamount As Decimal, ByVal vatamount As Decimal) As invoiceheadRow
            Dim rowinvoiceheadRow As invoiceheadRow = CType(Me.NewRow,invoiceheadRow)
            Dim columnValuesArray() As Object = New Object() {iaccno, invno, idate, pdate, iamount, vatamount, Nothing}
            rowinvoiceheadRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowinvoiceheadRow)
            Return rowinvoiceheadRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As invoiceheadRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),invoiceheadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As invoiceheadDataTable = CType(MyBase.Clone,invoiceheadDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New invoiceheadDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columniaccno = MyBase.Columns("iaccno")
            Me.columninvno = MyBase.Columns("invno")
            Me.columnidate = MyBase.Columns("idate")
            Me.columnpdate = MyBase.Columns("pdate")
            Me.columniamount = MyBase.Columns("iamount")
            Me.columnvatamount = MyBase.Columns("vatamount")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columniaccno = New Global.System.Data.DataColumn("iaccno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniaccno)
            Me.columninvno = New Global.System.Data.DataColumn("invno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninvno)
            Me.columnidate = New Global.System.Data.DataColumn("idate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidate)
            Me.columnpdate = New Global.System.Data.DataColumn("pdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpdate)
            Me.columniamount = New Global.System.Data.DataColumn("iamount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniamount)
            Me.columnvatamount = New Global.System.Data.DataColumn("vatamount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatamount)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columniaccno.AllowDBNull = false
            Me.columniaccno.MaxLength = 4
            Me.columninvno.AllowDBNull = false
            Me.columninvno.MaxLength = 6
            Me.columnidate.AllowDBNull = false
            Me.columnpdate.AllowDBNull = false
            Me.columniamount.AllowDBNull = false
            Me.columnvatamount.AllowDBNull = false
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewinvoiceheadRow() As invoiceheadRow
            Return CType(Me.NewRow,invoiceheadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New invoiceheadRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(invoiceheadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.invoiceheadRowChangedEvent) Is Nothing) Then
                RaiseEvent invoiceheadRowChanged(Me, New invoiceheadRowChangeEvent(CType(e.Row,invoiceheadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.invoiceheadRowChangingEvent) Is Nothing) Then
                RaiseEvent invoiceheadRowChanging(Me, New invoiceheadRowChangeEvent(CType(e.Row,invoiceheadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.invoiceheadRowDeletedEvent) Is Nothing) Then
                RaiseEvent invoiceheadRowDeleted(Me, New invoiceheadRowChangeEvent(CType(e.Row,invoiceheadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.invoiceheadRowDeletingEvent) Is Nothing) Then
                RaiseEvent invoiceheadRowDeleting(Me, New invoiceheadRowChangeEvent(CType(e.Row,invoiceheadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveinvoiceheadRow(ByVal row As invoiceheadRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "invoiceheadDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class invtransDataTable
        Inherits Global.System.Data.TypedTableBase(Of invtransRow)
        
        Private columndoc_ref As Global.System.Data.DataColumn
        
        Private columnddate As Global.System.Data.DataColumn
        
        Private columnrec_type As Global.System.Data.DataColumn
        
        Private columnline_no As Global.System.Data.DataColumn
        
        Private columnpartid As Global.System.Data.DataColumn
        
        Private columniicode As Global.System.Data.DataColumn
        
        Private columnqty_ord As Global.System.Data.DataColumn
        
        Private columnqty_sent As Global.System.Data.DataColumn
        
        Private columnassured As Global.System.Data.DataColumn
        
        Private columndesc_area As Global.System.Data.DataColumn
        
        Private columnuprice As Global.System.Data.DataColumn
        
        Private columnpc_disc As Global.System.Data.DataColumn
        
        Private columnup_disc As Global.System.Data.DataColumn
        
        Private columncurcyprice As Global.System.Data.DataColumn
        
        Private columncurrency As Global.System.Data.DataColumn
        
        Private columnbin_ref As Global.System.Data.DataColumn
        
        Private columnbin_recd As Global.System.Data.DataColumn
        
        Private columniwho As Global.System.Data.DataColumn
        
        Private columnldate As Global.System.Data.DataColumn
        
        Private columnorder_ As Global.System.Data.DataColumn
        
        Private columnsupplier As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "invtrans"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property doc_refColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndoc_ref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ddateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnddate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property rec_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrec_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property line_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnline_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property partidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpartid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iicodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniicode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qty_ordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty_ord
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qty_sentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty_sent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property assuredColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnassured
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property desc_areaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndesc_area
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property upriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property pc_discColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpc_disc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property up_discColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnup_disc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property curcypriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncurcyprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property currencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property bin_refColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbin_ref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property bin_recdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbin_recd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iwhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniwho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ldateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnldate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property order_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnorder_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property supplierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsupplier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As invtransRow
            Get
                Return CType(Me.Rows(index),invtransRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invtransRowChanging As invtransRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invtransRowChanged As invtransRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invtransRowDeleting As invtransRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invtransRowDeleted As invtransRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddinvtransRow(ByVal row As invtransRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddinvtransRow( _
                    ByVal doc_ref As String,  _
                    ByVal ddate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal line_no As Decimal,  _
                    ByVal partid As String,  _
                    ByVal iicode As String,  _
                    ByVal qty_ord As Decimal,  _
                    ByVal qty_sent As Decimal,  _
                    ByVal assured As String,  _
                    ByVal desc_area As String,  _
                    ByVal uprice As Decimal,  _
                    ByVal pc_disc As Decimal,  _
                    ByVal up_disc As Decimal,  _
                    ByVal curcyprice As String,  _
                    ByVal currency As String,  _
                    ByVal bin_ref As String,  _
                    ByVal bin_recd As Decimal,  _
                    ByVal iwho As String,  _
                    ByVal ldate As Date,  _
                    ByVal order_ As String,  _
                    ByVal supplier As String) As invtransRow
            Dim rowinvtransRow As invtransRow = CType(Me.NewRow,invtransRow)
            Dim columnValuesArray() As Object = New Object() {doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_sent, assured, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref, bin_recd, iwho, ldate, order_, supplier, Nothing}
            rowinvtransRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowinvtransRow)
            Return rowinvtransRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As invtransRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),invtransRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As invtransDataTable = CType(MyBase.Clone,invtransDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New invtransDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columndoc_ref = MyBase.Columns("doc_ref")
            Me.columnddate = MyBase.Columns("ddate")
            Me.columnrec_type = MyBase.Columns("rec_type")
            Me.columnline_no = MyBase.Columns("line_no")
            Me.columnpartid = MyBase.Columns("partid")
            Me.columniicode = MyBase.Columns("iicode")
            Me.columnqty_ord = MyBase.Columns("qty_ord")
            Me.columnqty_sent = MyBase.Columns("qty_sent")
            Me.columnassured = MyBase.Columns("assured")
            Me.columndesc_area = MyBase.Columns("desc_area")
            Me.columnuprice = MyBase.Columns("uprice")
            Me.columnpc_disc = MyBase.Columns("pc_disc")
            Me.columnup_disc = MyBase.Columns("up_disc")
            Me.columncurcyprice = MyBase.Columns("curcyprice")
            Me.columncurrency = MyBase.Columns("currency")
            Me.columnbin_ref = MyBase.Columns("bin_ref")
            Me.columnbin_recd = MyBase.Columns("bin_recd")
            Me.columniwho = MyBase.Columns("iwho")
            Me.columnldate = MyBase.Columns("ldate")
            Me.columnorder_ = MyBase.Columns("order_")
            Me.columnsupplier = MyBase.Columns("supplier")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columndoc_ref = New Global.System.Data.DataColumn("doc_ref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndoc_ref)
            Me.columnddate = New Global.System.Data.DataColumn("ddate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnddate)
            Me.columnrec_type = New Global.System.Data.DataColumn("rec_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrec_type)
            Me.columnline_no = New Global.System.Data.DataColumn("line_no", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnline_no)
            Me.columnpartid = New Global.System.Data.DataColumn("partid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpartid)
            Me.columniicode = New Global.System.Data.DataColumn("iicode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniicode)
            Me.columnqty_ord = New Global.System.Data.DataColumn("qty_ord", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty_ord)
            Me.columnqty_sent = New Global.System.Data.DataColumn("qty_sent", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty_sent)
            Me.columnassured = New Global.System.Data.DataColumn("assured", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassured)
            Me.columndesc_area = New Global.System.Data.DataColumn("desc_area", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndesc_area)
            Me.columnuprice = New Global.System.Data.DataColumn("uprice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuprice)
            Me.columnpc_disc = New Global.System.Data.DataColumn("pc_disc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpc_disc)
            Me.columnup_disc = New Global.System.Data.DataColumn("up_disc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnup_disc)
            Me.columncurcyprice = New Global.System.Data.DataColumn("curcyprice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurcyprice)
            Me.columncurrency = New Global.System.Data.DataColumn("currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurrency)
            Me.columnbin_ref = New Global.System.Data.DataColumn("bin_ref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbin_ref)
            Me.columnbin_recd = New Global.System.Data.DataColumn("bin_recd", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbin_recd)
            Me.columniwho = New Global.System.Data.DataColumn("iwho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniwho)
            Me.columnldate = New Global.System.Data.DataColumn("ldate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnldate)
            Me.columnorder_ = New Global.System.Data.DataColumn("order_", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnorder_)
            Me.columnsupplier = New Global.System.Data.DataColumn("supplier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsupplier)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columndoc_ref.AllowDBNull = false
            Me.columndoc_ref.MaxLength = 10
            Me.columnddate.AllowDBNull = false
            Me.columnrec_type.AllowDBNull = false
            Me.columnrec_type.MaxLength = 1
            Me.columnline_no.AllowDBNull = false
            Me.columnpartid.AllowDBNull = false
            Me.columnpartid.MaxLength = 15
            Me.columniicode.AllowDBNull = false
            Me.columniicode.MaxLength = 5
            Me.columnqty_ord.AllowDBNull = false
            Me.columnqty_sent.AllowDBNull = false
            Me.columnassured.AllowDBNull = false
            Me.columnassured.MaxLength = 1
            Me.columndesc_area.AllowDBNull = false
            Me.columndesc_area.MaxLength = 40
            Me.columnuprice.AllowDBNull = false
            Me.columnpc_disc.AllowDBNull = false
            Me.columnup_disc.AllowDBNull = false
            Me.columncurcyprice.AllowDBNull = false
            Me.columncurcyprice.MaxLength = 9
            Me.columncurrency.AllowDBNull = false
            Me.columncurrency.MaxLength = 3
            Me.columnbin_ref.AllowDBNull = false
            Me.columnbin_ref.MaxLength = 10
            Me.columnbin_recd.AllowDBNull = false
            Me.columniwho.AllowDBNull = false
            Me.columniwho.MaxLength = 5
            Me.columnldate.AllowDBNull = false
            Me.columnorder_.AllowDBNull = false
            Me.columnorder_.MaxLength = 1
            Me.columnsupplier.AllowDBNull = false
            Me.columnsupplier.MaxLength = 7
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewinvtransRow() As invtransRow
            Return CType(Me.NewRow,invtransRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New invtransRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(invtransRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.invtransRowChangedEvent) Is Nothing) Then
                RaiseEvent invtransRowChanged(Me, New invtransRowChangeEvent(CType(e.Row,invtransRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.invtransRowChangingEvent) Is Nothing) Then
                RaiseEvent invtransRowChanging(Me, New invtransRowChangeEvent(CType(e.Row,invtransRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.invtransRowDeletedEvent) Is Nothing) Then
                RaiseEvent invtransRowDeleted(Me, New invtransRowChangeEvent(CType(e.Row,invtransRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.invtransRowDeletingEvent) Is Nothing) Then
                RaiseEvent invtransRowDeleting(Me, New invtransRowChangeEvent(CType(e.Row,invtransRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveinvtransRow(ByVal row As invtransRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "invtransDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class invtransoldDataTable
        Inherits Global.System.Data.TypedTableBase(Of invtransoldRow)
        
        Private columndoc_ref As Global.System.Data.DataColumn
        
        Private columnddate As Global.System.Data.DataColumn
        
        Private columnrec_type As Global.System.Data.DataColumn
        
        Private columnline_no As Global.System.Data.DataColumn
        
        Private columnpartid As Global.System.Data.DataColumn
        
        Private columniicode As Global.System.Data.DataColumn
        
        Private columnqty_ord As Global.System.Data.DataColumn
        
        Private columnqty_sent As Global.System.Data.DataColumn
        
        Private columnassured As Global.System.Data.DataColumn
        
        Private columndesc_area As Global.System.Data.DataColumn
        
        Private columnuprice As Global.System.Data.DataColumn
        
        Private columnpc_disc As Global.System.Data.DataColumn
        
        Private columnup_disc As Global.System.Data.DataColumn
        
        Private columncurcyprice As Global.System.Data.DataColumn
        
        Private columncurrency As Global.System.Data.DataColumn
        
        Private columnbin_ref As Global.System.Data.DataColumn
        
        Private columnbin_recd As Global.System.Data.DataColumn
        
        Private columniwho As Global.System.Data.DataColumn
        
        Private columnldate As Global.System.Data.DataColumn
        
        Private columnorder_ As Global.System.Data.DataColumn
        
        Private columnsupplier As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "invtransold"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property doc_refColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndoc_ref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ddateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnddate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property rec_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrec_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property line_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnline_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property partidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpartid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iicodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniicode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qty_ordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty_ord
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qty_sentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty_sent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property assuredColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnassured
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property desc_areaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndesc_area
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property upriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property pc_discColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpc_disc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property up_discColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnup_disc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property curcypriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncurcyprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property currencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property bin_refColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbin_ref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property bin_recdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbin_recd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iwhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniwho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ldateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnldate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property order_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnorder_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property supplierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsupplier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As invtransoldRow
            Get
                Return CType(Me.Rows(index),invtransoldRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invtransoldRowChanging As invtransoldRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invtransoldRowChanged As invtransoldRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invtransoldRowDeleting As invtransoldRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invtransoldRowDeleted As invtransoldRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddinvtransoldRow(ByVal row As invtransoldRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddinvtransoldRow( _
                    ByVal doc_ref As String,  _
                    ByVal ddate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal line_no As Decimal,  _
                    ByVal partid As String,  _
                    ByVal iicode As String,  _
                    ByVal qty_ord As Decimal,  _
                    ByVal qty_sent As Decimal,  _
                    ByVal assured As String,  _
                    ByVal desc_area As String,  _
                    ByVal uprice As Decimal,  _
                    ByVal pc_disc As Decimal,  _
                    ByVal up_disc As Decimal,  _
                    ByVal curcyprice As String,  _
                    ByVal currency As String,  _
                    ByVal bin_ref As String,  _
                    ByVal bin_recd As Decimal,  _
                    ByVal iwho As String,  _
                    ByVal ldate As Date,  _
                    ByVal order_ As String,  _
                    ByVal supplier As String) As invtransoldRow
            Dim rowinvtransoldRow As invtransoldRow = CType(Me.NewRow,invtransoldRow)
            Dim columnValuesArray() As Object = New Object() {doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_sent, assured, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref, bin_recd, iwho, ldate, order_, supplier, Nothing}
            rowinvtransoldRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowinvtransoldRow)
            Return rowinvtransoldRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As invtransoldRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),invtransoldRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As invtransoldDataTable = CType(MyBase.Clone,invtransoldDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New invtransoldDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columndoc_ref = MyBase.Columns("doc_ref")
            Me.columnddate = MyBase.Columns("ddate")
            Me.columnrec_type = MyBase.Columns("rec_type")
            Me.columnline_no = MyBase.Columns("line_no")
            Me.columnpartid = MyBase.Columns("partid")
            Me.columniicode = MyBase.Columns("iicode")
            Me.columnqty_ord = MyBase.Columns("qty_ord")
            Me.columnqty_sent = MyBase.Columns("qty_sent")
            Me.columnassured = MyBase.Columns("assured")
            Me.columndesc_area = MyBase.Columns("desc_area")
            Me.columnuprice = MyBase.Columns("uprice")
            Me.columnpc_disc = MyBase.Columns("pc_disc")
            Me.columnup_disc = MyBase.Columns("up_disc")
            Me.columncurcyprice = MyBase.Columns("curcyprice")
            Me.columncurrency = MyBase.Columns("currency")
            Me.columnbin_ref = MyBase.Columns("bin_ref")
            Me.columnbin_recd = MyBase.Columns("bin_recd")
            Me.columniwho = MyBase.Columns("iwho")
            Me.columnldate = MyBase.Columns("ldate")
            Me.columnorder_ = MyBase.Columns("order_")
            Me.columnsupplier = MyBase.Columns("supplier")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columndoc_ref = New Global.System.Data.DataColumn("doc_ref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndoc_ref)
            Me.columnddate = New Global.System.Data.DataColumn("ddate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnddate)
            Me.columnrec_type = New Global.System.Data.DataColumn("rec_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrec_type)
            Me.columnline_no = New Global.System.Data.DataColumn("line_no", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnline_no)
            Me.columnpartid = New Global.System.Data.DataColumn("partid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpartid)
            Me.columniicode = New Global.System.Data.DataColumn("iicode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniicode)
            Me.columnqty_ord = New Global.System.Data.DataColumn("qty_ord", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty_ord)
            Me.columnqty_sent = New Global.System.Data.DataColumn("qty_sent", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty_sent)
            Me.columnassured = New Global.System.Data.DataColumn("assured", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassured)
            Me.columndesc_area = New Global.System.Data.DataColumn("desc_area", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndesc_area)
            Me.columnuprice = New Global.System.Data.DataColumn("uprice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuprice)
            Me.columnpc_disc = New Global.System.Data.DataColumn("pc_disc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpc_disc)
            Me.columnup_disc = New Global.System.Data.DataColumn("up_disc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnup_disc)
            Me.columncurcyprice = New Global.System.Data.DataColumn("curcyprice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurcyprice)
            Me.columncurrency = New Global.System.Data.DataColumn("currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurrency)
            Me.columnbin_ref = New Global.System.Data.DataColumn("bin_ref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbin_ref)
            Me.columnbin_recd = New Global.System.Data.DataColumn("bin_recd", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbin_recd)
            Me.columniwho = New Global.System.Data.DataColumn("iwho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniwho)
            Me.columnldate = New Global.System.Data.DataColumn("ldate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnldate)
            Me.columnorder_ = New Global.System.Data.DataColumn("order_", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnorder_)
            Me.columnsupplier = New Global.System.Data.DataColumn("supplier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsupplier)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columndoc_ref.AllowDBNull = false
            Me.columndoc_ref.MaxLength = 10
            Me.columnddate.AllowDBNull = false
            Me.columnrec_type.AllowDBNull = false
            Me.columnrec_type.MaxLength = 1
            Me.columnline_no.AllowDBNull = false
            Me.columnpartid.AllowDBNull = false
            Me.columnpartid.MaxLength = 15
            Me.columniicode.AllowDBNull = false
            Me.columniicode.MaxLength = 5
            Me.columnqty_ord.AllowDBNull = false
            Me.columnqty_sent.AllowDBNull = false
            Me.columnassured.AllowDBNull = false
            Me.columnassured.MaxLength = 1
            Me.columndesc_area.AllowDBNull = false
            Me.columndesc_area.MaxLength = 40
            Me.columnuprice.AllowDBNull = false
            Me.columnpc_disc.AllowDBNull = false
            Me.columnup_disc.AllowDBNull = false
            Me.columncurcyprice.AllowDBNull = false
            Me.columncurcyprice.MaxLength = 9
            Me.columncurrency.AllowDBNull = false
            Me.columncurrency.MaxLength = 3
            Me.columnbin_ref.AllowDBNull = false
            Me.columnbin_ref.MaxLength = 10
            Me.columnbin_recd.AllowDBNull = false
            Me.columniwho.AllowDBNull = false
            Me.columniwho.MaxLength = 5
            Me.columnldate.AllowDBNull = false
            Me.columnorder_.AllowDBNull = false
            Me.columnorder_.MaxLength = 1
            Me.columnsupplier.AllowDBNull = false
            Me.columnsupplier.MaxLength = 7
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewinvtransoldRow() As invtransoldRow
            Return CType(Me.NewRow,invtransoldRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New invtransoldRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(invtransoldRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.invtransoldRowChangedEvent) Is Nothing) Then
                RaiseEvent invtransoldRowChanged(Me, New invtransoldRowChangeEvent(CType(e.Row,invtransoldRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.invtransoldRowChangingEvent) Is Nothing) Then
                RaiseEvent invtransoldRowChanging(Me, New invtransoldRowChangeEvent(CType(e.Row,invtransoldRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.invtransoldRowDeletedEvent) Is Nothing) Then
                RaiseEvent invtransoldRowDeleted(Me, New invtransoldRowChangeEvent(CType(e.Row,invtransoldRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.invtransoldRowDeletingEvent) Is Nothing) Then
                RaiseEvent invtransoldRowDeleting(Me, New invtransoldRowChangeEvent(CType(e.Row,invtransoldRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveinvtransoldRow(ByVal row As invtransoldRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "invtransoldDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class invtransold6DataTable
        Inherits Global.System.Data.TypedTableBase(Of invtransold6Row)
        
        Private columndoc_ref As Global.System.Data.DataColumn
        
        Private columnddate As Global.System.Data.DataColumn
        
        Private columnrec_type As Global.System.Data.DataColumn
        
        Private columnline_no As Global.System.Data.DataColumn
        
        Private columnpartid As Global.System.Data.DataColumn
        
        Private columniicode As Global.System.Data.DataColumn
        
        Private columnqty_ord As Global.System.Data.DataColumn
        
        Private columnqty_sent As Global.System.Data.DataColumn
        
        Private columnassured As Global.System.Data.DataColumn
        
        Private columndesc_area As Global.System.Data.DataColumn
        
        Private columnuprice As Global.System.Data.DataColumn
        
        Private columnpc_disc As Global.System.Data.DataColumn
        
        Private columnup_disc As Global.System.Data.DataColumn
        
        Private columncurcyprice As Global.System.Data.DataColumn
        
        Private columncurrency As Global.System.Data.DataColumn
        
        Private columnbin_ref As Global.System.Data.DataColumn
        
        Private columnbin_recd As Global.System.Data.DataColumn
        
        Private columniwho As Global.System.Data.DataColumn
        
        Private columnldate As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "invtransold6"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property doc_refColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndoc_ref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ddateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnddate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property rec_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrec_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property line_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnline_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property partidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpartid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iicodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniicode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qty_ordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty_ord
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qty_sentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty_sent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property assuredColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnassured
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property desc_areaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndesc_area
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property upriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property pc_discColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpc_disc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property up_discColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnup_disc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property curcypriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncurcyprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property currencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property bin_refColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbin_ref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property bin_recdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbin_recd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iwhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniwho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ldateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnldate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As invtransold6Row
            Get
                Return CType(Me.Rows(index),invtransold6Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invtransold6RowChanging As invtransold6RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invtransold6RowChanged As invtransold6RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invtransold6RowDeleting As invtransold6RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invtransold6RowDeleted As invtransold6RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub Addinvtransold6Row(ByVal row As invtransold6Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function Addinvtransold6Row( _
                    ByVal doc_ref As String,  _
                    ByVal ddate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal line_no As Decimal,  _
                    ByVal partid As String,  _
                    ByVal iicode As String,  _
                    ByVal qty_ord As Decimal,  _
                    ByVal qty_sent As Decimal,  _
                    ByVal assured As String,  _
                    ByVal desc_area As String,  _
                    ByVal uprice As Decimal,  _
                    ByVal pc_disc As Decimal,  _
                    ByVal up_disc As Decimal,  _
                    ByVal curcyprice As String,  _
                    ByVal currency As String,  _
                    ByVal bin_ref As String,  _
                    ByVal bin_recd As Decimal,  _
                    ByVal iwho As String,  _
                    ByVal ldate As Date) As invtransold6Row
            Dim rowinvtransold6Row As invtransold6Row = CType(Me.NewRow,invtransold6Row)
            Dim columnValuesArray() As Object = New Object() {doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_sent, assured, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref, bin_recd, iwho, ldate, Nothing}
            rowinvtransold6Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowinvtransold6Row)
            Return rowinvtransold6Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As invtransold6Row
            Return CType(Me.Rows.Find(New Object() {UniqueID}),invtransold6Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As invtransold6DataTable = CType(MyBase.Clone,invtransold6DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New invtransold6DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columndoc_ref = MyBase.Columns("doc_ref")
            Me.columnddate = MyBase.Columns("ddate")
            Me.columnrec_type = MyBase.Columns("rec_type")
            Me.columnline_no = MyBase.Columns("line_no")
            Me.columnpartid = MyBase.Columns("partid")
            Me.columniicode = MyBase.Columns("iicode")
            Me.columnqty_ord = MyBase.Columns("qty_ord")
            Me.columnqty_sent = MyBase.Columns("qty_sent")
            Me.columnassured = MyBase.Columns("assured")
            Me.columndesc_area = MyBase.Columns("desc_area")
            Me.columnuprice = MyBase.Columns("uprice")
            Me.columnpc_disc = MyBase.Columns("pc_disc")
            Me.columnup_disc = MyBase.Columns("up_disc")
            Me.columncurcyprice = MyBase.Columns("curcyprice")
            Me.columncurrency = MyBase.Columns("currency")
            Me.columnbin_ref = MyBase.Columns("bin_ref")
            Me.columnbin_recd = MyBase.Columns("bin_recd")
            Me.columniwho = MyBase.Columns("iwho")
            Me.columnldate = MyBase.Columns("ldate")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columndoc_ref = New Global.System.Data.DataColumn("doc_ref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndoc_ref)
            Me.columnddate = New Global.System.Data.DataColumn("ddate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnddate)
            Me.columnrec_type = New Global.System.Data.DataColumn("rec_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrec_type)
            Me.columnline_no = New Global.System.Data.DataColumn("line_no", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnline_no)
            Me.columnpartid = New Global.System.Data.DataColumn("partid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpartid)
            Me.columniicode = New Global.System.Data.DataColumn("iicode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniicode)
            Me.columnqty_ord = New Global.System.Data.DataColumn("qty_ord", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty_ord)
            Me.columnqty_sent = New Global.System.Data.DataColumn("qty_sent", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty_sent)
            Me.columnassured = New Global.System.Data.DataColumn("assured", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassured)
            Me.columndesc_area = New Global.System.Data.DataColumn("desc_area", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndesc_area)
            Me.columnuprice = New Global.System.Data.DataColumn("uprice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuprice)
            Me.columnpc_disc = New Global.System.Data.DataColumn("pc_disc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpc_disc)
            Me.columnup_disc = New Global.System.Data.DataColumn("up_disc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnup_disc)
            Me.columncurcyprice = New Global.System.Data.DataColumn("curcyprice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurcyprice)
            Me.columncurrency = New Global.System.Data.DataColumn("currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurrency)
            Me.columnbin_ref = New Global.System.Data.DataColumn("bin_ref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbin_ref)
            Me.columnbin_recd = New Global.System.Data.DataColumn("bin_recd", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbin_recd)
            Me.columniwho = New Global.System.Data.DataColumn("iwho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniwho)
            Me.columnldate = New Global.System.Data.DataColumn("ldate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnldate)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columndoc_ref.AllowDBNull = false
            Me.columndoc_ref.MaxLength = 10
            Me.columnddate.AllowDBNull = false
            Me.columnrec_type.AllowDBNull = false
            Me.columnrec_type.MaxLength = 1
            Me.columnline_no.AllowDBNull = false
            Me.columnpartid.AllowDBNull = false
            Me.columnpartid.MaxLength = 15
            Me.columniicode.AllowDBNull = false
            Me.columniicode.MaxLength = 5
            Me.columnqty_ord.AllowDBNull = false
            Me.columnqty_sent.AllowDBNull = false
            Me.columnassured.AllowDBNull = false
            Me.columnassured.MaxLength = 1
            Me.columndesc_area.AllowDBNull = false
            Me.columndesc_area.MaxLength = 40
            Me.columnuprice.AllowDBNull = false
            Me.columnpc_disc.AllowDBNull = false
            Me.columnup_disc.AllowDBNull = false
            Me.columncurcyprice.AllowDBNull = false
            Me.columncurcyprice.MaxLength = 9
            Me.columncurrency.AllowDBNull = false
            Me.columncurrency.MaxLength = 3
            Me.columnbin_ref.AllowDBNull = false
            Me.columnbin_ref.MaxLength = 10
            Me.columnbin_recd.AllowDBNull = false
            Me.columniwho.AllowDBNull = false
            Me.columniwho.MaxLength = 5
            Me.columnldate.AllowDBNull = false
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Newinvtransold6Row() As invtransold6Row
            Return CType(Me.NewRow,invtransold6Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New invtransold6Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(invtransold6Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.invtransold6RowChangedEvent) Is Nothing) Then
                RaiseEvent invtransold6RowChanged(Me, New invtransold6RowChangeEvent(CType(e.Row,invtransold6Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.invtransold6RowChangingEvent) Is Nothing) Then
                RaiseEvent invtransold6RowChanging(Me, New invtransold6RowChangeEvent(CType(e.Row,invtransold6Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.invtransold6RowDeletedEvent) Is Nothing) Then
                RaiseEvent invtransold6RowDeleted(Me, New invtransold6RowChangeEvent(CType(e.Row,invtransold6Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.invtransold6RowDeletingEvent) Is Nothing) Then
                RaiseEvent invtransold6RowDeleting(Me, New invtransold6RowChangeEvent(CType(e.Row,invtransold6Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Removeinvtransold6Row(ByVal row As invtransold6Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "invtransold6DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class invworkDataTable
        Inherits Global.System.Data.TypedTableBase(Of invworkRow)
        
        Private columndoc_ref As Global.System.Data.DataColumn
        
        Private columnddate As Global.System.Data.DataColumn
        
        Private columnrec_type As Global.System.Data.DataColumn
        
        Private columnline_no As Global.System.Data.DataColumn
        
        Private columnpartid As Global.System.Data.DataColumn
        
        Private columniicode As Global.System.Data.DataColumn
        
        Private columnqty_ord As Global.System.Data.DataColumn
        
        Private columnqty_sent As Global.System.Data.DataColumn
        
        Private columnassured As Global.System.Data.DataColumn
        
        Private columndesc_area As Global.System.Data.DataColumn
        
        Private columnuprice As Global.System.Data.DataColumn
        
        Private columnpc_disc As Global.System.Data.DataColumn
        
        Private columnup_disc As Global.System.Data.DataColumn
        
        Private columncurcyprice As Global.System.Data.DataColumn
        
        Private columncurrency As Global.System.Data.DataColumn
        
        Private columnbin_ref As Global.System.Data.DataColumn
        
        Private columnbin_recd As Global.System.Data.DataColumn
        
        Private columniwho As Global.System.Data.DataColumn
        
        Private columnldate As Global.System.Data.DataColumn
        
        Private columnorder_ As Global.System.Data.DataColumn
        
        Private columnsupplier As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "invwork"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property doc_refColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndoc_ref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ddateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnddate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property rec_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrec_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property line_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnline_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property partidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpartid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iicodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniicode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qty_ordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty_ord
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qty_sentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty_sent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property assuredColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnassured
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property desc_areaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndesc_area
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property upriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property pc_discColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpc_disc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property up_discColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnup_disc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property curcypriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncurcyprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property currencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property bin_refColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbin_ref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property bin_recdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbin_recd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iwhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniwho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ldateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnldate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property order_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnorder_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property supplierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsupplier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As invworkRow
            Get
                Return CType(Me.Rows(index),invworkRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invworkRowChanging As invworkRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invworkRowChanged As invworkRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invworkRowDeleting As invworkRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invworkRowDeleted As invworkRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddinvworkRow(ByVal row As invworkRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddinvworkRow( _
                    ByVal doc_ref As String,  _
                    ByVal ddate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal line_no As Decimal,  _
                    ByVal partid As String,  _
                    ByVal iicode As String,  _
                    ByVal qty_ord As Decimal,  _
                    ByVal qty_sent As Decimal,  _
                    ByVal assured As String,  _
                    ByVal desc_area As String,  _
                    ByVal uprice As Decimal,  _
                    ByVal pc_disc As Decimal,  _
                    ByVal up_disc As Decimal,  _
                    ByVal curcyprice As String,  _
                    ByVal currency As String,  _
                    ByVal bin_ref As String,  _
                    ByVal bin_recd As Decimal,  _
                    ByVal iwho As String,  _
                    ByVal ldate As Date,  _
                    ByVal order_ As String,  _
                    ByVal supplier As String) As invworkRow
            Dim rowinvworkRow As invworkRow = CType(Me.NewRow,invworkRow)
            Dim columnValuesArray() As Object = New Object() {doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_sent, assured, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref, bin_recd, iwho, ldate, order_, supplier, Nothing}
            rowinvworkRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowinvworkRow)
            Return rowinvworkRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As invworkRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),invworkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As invworkDataTable = CType(MyBase.Clone,invworkDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New invworkDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columndoc_ref = MyBase.Columns("doc_ref")
            Me.columnddate = MyBase.Columns("ddate")
            Me.columnrec_type = MyBase.Columns("rec_type")
            Me.columnline_no = MyBase.Columns("line_no")
            Me.columnpartid = MyBase.Columns("partid")
            Me.columniicode = MyBase.Columns("iicode")
            Me.columnqty_ord = MyBase.Columns("qty_ord")
            Me.columnqty_sent = MyBase.Columns("qty_sent")
            Me.columnassured = MyBase.Columns("assured")
            Me.columndesc_area = MyBase.Columns("desc_area")
            Me.columnuprice = MyBase.Columns("uprice")
            Me.columnpc_disc = MyBase.Columns("pc_disc")
            Me.columnup_disc = MyBase.Columns("up_disc")
            Me.columncurcyprice = MyBase.Columns("curcyprice")
            Me.columncurrency = MyBase.Columns("currency")
            Me.columnbin_ref = MyBase.Columns("bin_ref")
            Me.columnbin_recd = MyBase.Columns("bin_recd")
            Me.columniwho = MyBase.Columns("iwho")
            Me.columnldate = MyBase.Columns("ldate")
            Me.columnorder_ = MyBase.Columns("order_")
            Me.columnsupplier = MyBase.Columns("supplier")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columndoc_ref = New Global.System.Data.DataColumn("doc_ref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndoc_ref)
            Me.columnddate = New Global.System.Data.DataColumn("ddate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnddate)
            Me.columnrec_type = New Global.System.Data.DataColumn("rec_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrec_type)
            Me.columnline_no = New Global.System.Data.DataColumn("line_no", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnline_no)
            Me.columnpartid = New Global.System.Data.DataColumn("partid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpartid)
            Me.columniicode = New Global.System.Data.DataColumn("iicode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniicode)
            Me.columnqty_ord = New Global.System.Data.DataColumn("qty_ord", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty_ord)
            Me.columnqty_sent = New Global.System.Data.DataColumn("qty_sent", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty_sent)
            Me.columnassured = New Global.System.Data.DataColumn("assured", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassured)
            Me.columndesc_area = New Global.System.Data.DataColumn("desc_area", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndesc_area)
            Me.columnuprice = New Global.System.Data.DataColumn("uprice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuprice)
            Me.columnpc_disc = New Global.System.Data.DataColumn("pc_disc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpc_disc)
            Me.columnup_disc = New Global.System.Data.DataColumn("up_disc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnup_disc)
            Me.columncurcyprice = New Global.System.Data.DataColumn("curcyprice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurcyprice)
            Me.columncurrency = New Global.System.Data.DataColumn("currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurrency)
            Me.columnbin_ref = New Global.System.Data.DataColumn("bin_ref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbin_ref)
            Me.columnbin_recd = New Global.System.Data.DataColumn("bin_recd", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbin_recd)
            Me.columniwho = New Global.System.Data.DataColumn("iwho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniwho)
            Me.columnldate = New Global.System.Data.DataColumn("ldate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnldate)
            Me.columnorder_ = New Global.System.Data.DataColumn("order_", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnorder_)
            Me.columnsupplier = New Global.System.Data.DataColumn("supplier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsupplier)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columndoc_ref.AllowDBNull = false
            Me.columndoc_ref.MaxLength = 10
            Me.columnddate.AllowDBNull = false
            Me.columnrec_type.AllowDBNull = false
            Me.columnrec_type.MaxLength = 1
            Me.columnline_no.AllowDBNull = false
            Me.columnpartid.AllowDBNull = false
            Me.columnpartid.MaxLength = 15
            Me.columniicode.AllowDBNull = false
            Me.columniicode.MaxLength = 5
            Me.columnqty_ord.AllowDBNull = false
            Me.columnqty_sent.AllowDBNull = false
            Me.columnassured.AllowDBNull = false
            Me.columnassured.MaxLength = 1
            Me.columndesc_area.AllowDBNull = false
            Me.columndesc_area.MaxLength = 40
            Me.columnuprice.AllowDBNull = false
            Me.columnpc_disc.AllowDBNull = false
            Me.columnup_disc.AllowDBNull = false
            Me.columncurcyprice.AllowDBNull = false
            Me.columncurcyprice.MaxLength = 9
            Me.columncurrency.AllowDBNull = false
            Me.columncurrency.MaxLength = 3
            Me.columnbin_ref.AllowDBNull = false
            Me.columnbin_ref.MaxLength = 10
            Me.columnbin_recd.AllowDBNull = false
            Me.columniwho.AllowDBNull = false
            Me.columniwho.MaxLength = 5
            Me.columnldate.AllowDBNull = false
            Me.columnorder_.AllowDBNull = false
            Me.columnorder_.MaxLength = 1
            Me.columnsupplier.AllowDBNull = false
            Me.columnsupplier.MaxLength = 7
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewinvworkRow() As invworkRow
            Return CType(Me.NewRow,invworkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New invworkRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(invworkRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.invworkRowChangedEvent) Is Nothing) Then
                RaiseEvent invworkRowChanged(Me, New invworkRowChangeEvent(CType(e.Row,invworkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.invworkRowChangingEvent) Is Nothing) Then
                RaiseEvent invworkRowChanging(Me, New invworkRowChangeEvent(CType(e.Row,invworkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.invworkRowDeletedEvent) Is Nothing) Then
                RaiseEvent invworkRowDeleted(Me, New invworkRowChangeEvent(CType(e.Row,invworkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.invworkRowDeletingEvent) Is Nothing) Then
                RaiseEvent invworkRowDeleting(Me, New invworkRowChangeEvent(CType(e.Row,invworkRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveinvworkRow(ByVal row As invworkRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "invworkDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class invworkoldDataTable
        Inherits Global.System.Data.TypedTableBase(Of invworkoldRow)
        
        Private columndoc_ref As Global.System.Data.DataColumn
        
        Private columnddate As Global.System.Data.DataColumn
        
        Private columnrec_type As Global.System.Data.DataColumn
        
        Private columnline_no As Global.System.Data.DataColumn
        
        Private columnpartid As Global.System.Data.DataColumn
        
        Private columniicode As Global.System.Data.DataColumn
        
        Private columnqty_ord As Global.System.Data.DataColumn
        
        Private columnqty_sent As Global.System.Data.DataColumn
        
        Private columnassured As Global.System.Data.DataColumn
        
        Private columndesc_area As Global.System.Data.DataColumn
        
        Private columnuprice As Global.System.Data.DataColumn
        
        Private columnpc_disc As Global.System.Data.DataColumn
        
        Private columnup_disc As Global.System.Data.DataColumn
        
        Private columncurcyprice As Global.System.Data.DataColumn
        
        Private columncurrency As Global.System.Data.DataColumn
        
        Private columnbin_ref As Global.System.Data.DataColumn
        
        Private columnbin_recd As Global.System.Data.DataColumn
        
        Private columniwho As Global.System.Data.DataColumn
        
        Private columnldate As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "invworkold"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property doc_refColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndoc_ref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ddateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnddate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property rec_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrec_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property line_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnline_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property partidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpartid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iicodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniicode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qty_ordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty_ord
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qty_sentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty_sent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property assuredColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnassured
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property desc_areaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndesc_area
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property upriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property pc_discColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpc_disc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property up_discColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnup_disc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property curcypriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncurcyprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property currencyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncurrency
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property bin_refColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbin_ref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property bin_recdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbin_recd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iwhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniwho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ldateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnldate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As invworkoldRow
            Get
                Return CType(Me.Rows(index),invworkoldRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invworkoldRowChanging As invworkoldRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invworkoldRowChanged As invworkoldRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invworkoldRowDeleting As invworkoldRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event invworkoldRowDeleted As invworkoldRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddinvworkoldRow(ByVal row As invworkoldRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddinvworkoldRow( _
                    ByVal doc_ref As String,  _
                    ByVal ddate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal line_no As Decimal,  _
                    ByVal partid As String,  _
                    ByVal iicode As String,  _
                    ByVal qty_ord As Decimal,  _
                    ByVal qty_sent As Decimal,  _
                    ByVal assured As String,  _
                    ByVal desc_area As String,  _
                    ByVal uprice As Decimal,  _
                    ByVal pc_disc As Decimal,  _
                    ByVal up_disc As Decimal,  _
                    ByVal curcyprice As String,  _
                    ByVal currency As String,  _
                    ByVal bin_ref As String,  _
                    ByVal bin_recd As Decimal,  _
                    ByVal iwho As String,  _
                    ByVal ldate As Date) As invworkoldRow
            Dim rowinvworkoldRow As invworkoldRow = CType(Me.NewRow,invworkoldRow)
            Dim columnValuesArray() As Object = New Object() {doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_sent, assured, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref, bin_recd, iwho, ldate, Nothing}
            rowinvworkoldRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowinvworkoldRow)
            Return rowinvworkoldRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As invworkoldRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),invworkoldRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As invworkoldDataTable = CType(MyBase.Clone,invworkoldDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New invworkoldDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columndoc_ref = MyBase.Columns("doc_ref")
            Me.columnddate = MyBase.Columns("ddate")
            Me.columnrec_type = MyBase.Columns("rec_type")
            Me.columnline_no = MyBase.Columns("line_no")
            Me.columnpartid = MyBase.Columns("partid")
            Me.columniicode = MyBase.Columns("iicode")
            Me.columnqty_ord = MyBase.Columns("qty_ord")
            Me.columnqty_sent = MyBase.Columns("qty_sent")
            Me.columnassured = MyBase.Columns("assured")
            Me.columndesc_area = MyBase.Columns("desc_area")
            Me.columnuprice = MyBase.Columns("uprice")
            Me.columnpc_disc = MyBase.Columns("pc_disc")
            Me.columnup_disc = MyBase.Columns("up_disc")
            Me.columncurcyprice = MyBase.Columns("curcyprice")
            Me.columncurrency = MyBase.Columns("currency")
            Me.columnbin_ref = MyBase.Columns("bin_ref")
            Me.columnbin_recd = MyBase.Columns("bin_recd")
            Me.columniwho = MyBase.Columns("iwho")
            Me.columnldate = MyBase.Columns("ldate")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columndoc_ref = New Global.System.Data.DataColumn("doc_ref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndoc_ref)
            Me.columnddate = New Global.System.Data.DataColumn("ddate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnddate)
            Me.columnrec_type = New Global.System.Data.DataColumn("rec_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrec_type)
            Me.columnline_no = New Global.System.Data.DataColumn("line_no", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnline_no)
            Me.columnpartid = New Global.System.Data.DataColumn("partid", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpartid)
            Me.columniicode = New Global.System.Data.DataColumn("iicode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniicode)
            Me.columnqty_ord = New Global.System.Data.DataColumn("qty_ord", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty_ord)
            Me.columnqty_sent = New Global.System.Data.DataColumn("qty_sent", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty_sent)
            Me.columnassured = New Global.System.Data.DataColumn("assured", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassured)
            Me.columndesc_area = New Global.System.Data.DataColumn("desc_area", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndesc_area)
            Me.columnuprice = New Global.System.Data.DataColumn("uprice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuprice)
            Me.columnpc_disc = New Global.System.Data.DataColumn("pc_disc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpc_disc)
            Me.columnup_disc = New Global.System.Data.DataColumn("up_disc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnup_disc)
            Me.columncurcyprice = New Global.System.Data.DataColumn("curcyprice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurcyprice)
            Me.columncurrency = New Global.System.Data.DataColumn("currency", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurrency)
            Me.columnbin_ref = New Global.System.Data.DataColumn("bin_ref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbin_ref)
            Me.columnbin_recd = New Global.System.Data.DataColumn("bin_recd", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbin_recd)
            Me.columniwho = New Global.System.Data.DataColumn("iwho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniwho)
            Me.columnldate = New Global.System.Data.DataColumn("ldate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnldate)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columndoc_ref.AllowDBNull = false
            Me.columndoc_ref.MaxLength = 10
            Me.columnddate.AllowDBNull = false
            Me.columnrec_type.AllowDBNull = false
            Me.columnrec_type.MaxLength = 1
            Me.columnline_no.AllowDBNull = false
            Me.columnpartid.AllowDBNull = false
            Me.columnpartid.MaxLength = 15
            Me.columniicode.AllowDBNull = false
            Me.columniicode.MaxLength = 5
            Me.columnqty_ord.AllowDBNull = false
            Me.columnqty_sent.AllowDBNull = false
            Me.columnassured.AllowDBNull = false
            Me.columnassured.MaxLength = 1
            Me.columndesc_area.AllowDBNull = false
            Me.columndesc_area.MaxLength = 40
            Me.columnuprice.AllowDBNull = false
            Me.columnpc_disc.AllowDBNull = false
            Me.columnup_disc.AllowDBNull = false
            Me.columncurcyprice.AllowDBNull = false
            Me.columncurcyprice.MaxLength = 9
            Me.columncurrency.AllowDBNull = false
            Me.columncurrency.MaxLength = 3
            Me.columnbin_ref.AllowDBNull = false
            Me.columnbin_ref.MaxLength = 10
            Me.columnbin_recd.AllowDBNull = false
            Me.columniwho.AllowDBNull = false
            Me.columniwho.MaxLength = 5
            Me.columnldate.AllowDBNull = false
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewinvworkoldRow() As invworkoldRow
            Return CType(Me.NewRow,invworkoldRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New invworkoldRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(invworkoldRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.invworkoldRowChangedEvent) Is Nothing) Then
                RaiseEvent invworkoldRowChanged(Me, New invworkoldRowChangeEvent(CType(e.Row,invworkoldRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.invworkoldRowChangingEvent) Is Nothing) Then
                RaiseEvent invworkoldRowChanging(Me, New invworkoldRowChangeEvent(CType(e.Row,invworkoldRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.invworkoldRowDeletedEvent) Is Nothing) Then
                RaiseEvent invworkoldRowDeleted(Me, New invworkoldRowChangeEvent(CType(e.Row,invworkoldRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.invworkoldRowDeletingEvent) Is Nothing) Then
                RaiseEvent invworkoldRowDeleting(Me, New invworkoldRowChangeEvent(CType(e.Row,invworkoldRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveinvworkoldRow(ByVal row As invworkoldRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "invworkoldDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class issueDataTable
        Inherits Global.System.Data.TypedTableBase(Of issueRow)
        
        Private columnpno As Global.System.Data.DataColumn
        
        Private columnissue As Global.System.Data.DataColumn
        
        Private columnidate As Global.System.Data.DataColumn
        
        Private columnidesc As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "issue"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property pnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property issueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnissue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property idateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property idescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As issueRow
            Get
                Return CType(Me.Rows(index),issueRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event issueRowChanging As issueRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event issueRowChanged As issueRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event issueRowDeleting As issueRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event issueRowDeleted As issueRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddissueRow(ByVal row As issueRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddissueRow(ByVal pno As String, ByVal issue As String, ByVal idate As Date, ByVal idesc As String) As issueRow
            Dim rowissueRow As issueRow = CType(Me.NewRow,issueRow)
            Dim columnValuesArray() As Object = New Object() {pno, issue, idate, idesc, Nothing}
            rowissueRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowissueRow)
            Return rowissueRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As issueRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),issueRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As issueDataTable = CType(MyBase.Clone,issueDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New issueDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnpno = MyBase.Columns("pno")
            Me.columnissue = MyBase.Columns("issue")
            Me.columnidate = MyBase.Columns("idate")
            Me.columnidesc = MyBase.Columns("idesc")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnpno = New Global.System.Data.DataColumn("pno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpno)
            Me.columnissue = New Global.System.Data.DataColumn("issue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnissue)
            Me.columnidate = New Global.System.Data.DataColumn("idate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidate)
            Me.columnidesc = New Global.System.Data.DataColumn("idesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidesc)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnpno.AllowDBNull = false
            Me.columnpno.MaxLength = 5
            Me.columnissue.AllowDBNull = false
            Me.columnissue.MaxLength = 3
            Me.columnidate.AllowDBNull = false
            Me.columnidesc.AllowDBNull = false
            Me.columnidesc.MaxLength = 50
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewissueRow() As issueRow
            Return CType(Me.NewRow,issueRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New issueRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(issueRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.issueRowChangedEvent) Is Nothing) Then
                RaiseEvent issueRowChanged(Me, New issueRowChangeEvent(CType(e.Row,issueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.issueRowChangingEvent) Is Nothing) Then
                RaiseEvent issueRowChanging(Me, New issueRowChangeEvent(CType(e.Row,issueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.issueRowDeletedEvent) Is Nothing) Then
                RaiseEvent issueRowDeleted(Me, New issueRowChangeEvent(CType(e.Row,issueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.issueRowDeletingEvent) Is Nothing) Then
                RaiseEvent issueRowDeleting(Me, New issueRowChangeEvent(CType(e.Row,issueRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveissueRow(ByVal row As issueRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "issueDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class locationDataTable
        Inherits Global.System.Data.TypedTableBase(Of locationRow)
        
        Private columnldesc As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "location"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ldescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnldesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As locationRow
            Get
                Return CType(Me.Rows(index),locationRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event locationRowChanging As locationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event locationRowChanged As locationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event locationRowDeleting As locationRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event locationRowDeleted As locationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddlocationRow(ByVal row As locationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddlocationRow(ByVal ldesc As String) As locationRow
            Dim rowlocationRow As locationRow = CType(Me.NewRow,locationRow)
            Dim columnValuesArray() As Object = New Object() {ldesc, Nothing}
            rowlocationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowlocationRow)
            Return rowlocationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As locationRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),locationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As locationDataTable = CType(MyBase.Clone,locationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New locationDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnldesc = MyBase.Columns("ldesc")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnldesc = New Global.System.Data.DataColumn("ldesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnldesc)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnldesc.AllowDBNull = false
            Me.columnldesc.MaxLength = 30
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewlocationRow() As locationRow
            Return CType(Me.NewRow,locationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New locationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(locationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.locationRowChangedEvent) Is Nothing) Then
                RaiseEvent locationRowChanged(Me, New locationRowChangeEvent(CType(e.Row,locationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.locationRowChangingEvent) Is Nothing) Then
                RaiseEvent locationRowChanging(Me, New locationRowChangeEvent(CType(e.Row,locationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.locationRowDeletedEvent) Is Nothing) Then
                RaiseEvent locationRowDeleted(Me, New locationRowChangeEvent(CType(e.Row,locationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.locationRowDeletingEvent) Is Nothing) Then
                RaiseEvent locationRowDeleting(Me, New locationRowChangeEvent(CType(e.Row,locationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovelocationRow(ByVal row As locationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "locationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class mainDataTable
        Inherits Global.System.Data.TypedTableBase(Of mainRow)
        
        Private columnaccno As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columnadd1 As Global.System.Data.DataColumn
        
        Private columnadd2 As Global.System.Data.DataColumn
        
        Private columnadd3 As Global.System.Data.DataColumn
        
        Private columnadd4 As Global.System.Data.DataColumn
        
        Private columnadd5 As Global.System.Data.DataColumn
        
        Private columnpcode As Global.System.Data.DataColumn
        
        Private columnbankname As Global.System.Data.DataColumn
        
        Private columnbankaccno As Global.System.Data.DataColumn
        
        Private columnbanksort As Global.System.Data.DataColumn
        
        Private columnvatno As Global.System.Data.DataColumn
        
        Private columnvatrate As Global.System.Data.DataColumn
        
        Private columninvoiceno As Global.System.Data.DataColumn
        
        Private columntelno As Global.System.Data.DataColumn
        
        Private columnfaxno As Global.System.Data.DataColumn
        
        Private columnemail As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "main"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property accnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property add1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnadd1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property add2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnadd2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property add3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnadd3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property add4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnadd4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property add5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnadd5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property pcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property banknameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbankname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property bankaccnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbankaccno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property banksortColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbanksort
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property vatnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property vatrateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatrate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property invoicenoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninvoiceno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property telnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntelno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property faxnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfaxno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As mainRow
            Get
                Return CType(Me.Rows(index),mainRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event mainRowChanging As mainRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event mainRowChanged As mainRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event mainRowDeleting As mainRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event mainRowDeleted As mainRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddmainRow(ByVal row As mainRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddmainRow( _
                    ByVal accno As Decimal,  _
                    ByVal name As String,  _
                    ByVal add1 As String,  _
                    ByVal add2 As String,  _
                    ByVal add3 As String,  _
                    ByVal add4 As String,  _
                    ByVal add5 As String,  _
                    ByVal pcode As String,  _
                    ByVal bankname As String,  _
                    ByVal bankaccno As String,  _
                    ByVal banksort As String,  _
                    ByVal vatno As String,  _
                    ByVal vatrate As Decimal,  _
                    ByVal invoiceno As Decimal,  _
                    ByVal telno As String,  _
                    ByVal faxno As String,  _
                    ByVal email As String) As mainRow
            Dim rowmainRow As mainRow = CType(Me.NewRow,mainRow)
            Dim columnValuesArray() As Object = New Object() {accno, name, add1, add2, add3, add4, add5, pcode, bankname, bankaccno, banksort, vatno, vatrate, invoiceno, telno, faxno, email, Nothing}
            rowmainRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowmainRow)
            Return rowmainRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As mainRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),mainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As mainDataTable = CType(MyBase.Clone,mainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New mainDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnaccno = MyBase.Columns("accno")
            Me.columnname = MyBase.Columns("name")
            Me.columnadd1 = MyBase.Columns("add1")
            Me.columnadd2 = MyBase.Columns("add2")
            Me.columnadd3 = MyBase.Columns("add3")
            Me.columnadd4 = MyBase.Columns("add4")
            Me.columnadd5 = MyBase.Columns("add5")
            Me.columnpcode = MyBase.Columns("pcode")
            Me.columnbankname = MyBase.Columns("bankname")
            Me.columnbankaccno = MyBase.Columns("bankaccno")
            Me.columnbanksort = MyBase.Columns("banksort")
            Me.columnvatno = MyBase.Columns("vatno")
            Me.columnvatrate = MyBase.Columns("vatrate")
            Me.columninvoiceno = MyBase.Columns("invoiceno")
            Me.columntelno = MyBase.Columns("telno")
            Me.columnfaxno = MyBase.Columns("faxno")
            Me.columnemail = MyBase.Columns("email")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnaccno = New Global.System.Data.DataColumn("accno", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccno)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columnadd1 = New Global.System.Data.DataColumn("add1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadd1)
            Me.columnadd2 = New Global.System.Data.DataColumn("add2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadd2)
            Me.columnadd3 = New Global.System.Data.DataColumn("add3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadd3)
            Me.columnadd4 = New Global.System.Data.DataColumn("add4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadd4)
            Me.columnadd5 = New Global.System.Data.DataColumn("add5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnadd5)
            Me.columnpcode = New Global.System.Data.DataColumn("pcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpcode)
            Me.columnbankname = New Global.System.Data.DataColumn("bankname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbankname)
            Me.columnbankaccno = New Global.System.Data.DataColumn("bankaccno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbankaccno)
            Me.columnbanksort = New Global.System.Data.DataColumn("banksort", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbanksort)
            Me.columnvatno = New Global.System.Data.DataColumn("vatno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatno)
            Me.columnvatrate = New Global.System.Data.DataColumn("vatrate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatrate)
            Me.columninvoiceno = New Global.System.Data.DataColumn("invoiceno", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninvoiceno)
            Me.columntelno = New Global.System.Data.DataColumn("telno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntelno)
            Me.columnfaxno = New Global.System.Data.DataColumn("faxno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfaxno)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnaccno.AllowDBNull = false
            Me.columnname.AllowDBNull = false
            Me.columnname.MaxLength = 40
            Me.columnadd1.AllowDBNull = false
            Me.columnadd1.MaxLength = 40
            Me.columnadd2.AllowDBNull = false
            Me.columnadd2.MaxLength = 40
            Me.columnadd3.AllowDBNull = false
            Me.columnadd3.MaxLength = 40
            Me.columnadd4.AllowDBNull = false
            Me.columnadd4.MaxLength = 40
            Me.columnadd5.AllowDBNull = false
            Me.columnadd5.MaxLength = 40
            Me.columnpcode.AllowDBNull = false
            Me.columnpcode.MaxLength = 10
            Me.columnbankname.AllowDBNull = false
            Me.columnbankname.MaxLength = 40
            Me.columnbankaccno.AllowDBNull = false
            Me.columnbankaccno.MaxLength = 8
            Me.columnbanksort.AllowDBNull = false
            Me.columnbanksort.MaxLength = 8
            Me.columnvatno.AllowDBNull = false
            Me.columnvatno.MaxLength = 10
            Me.columnvatrate.AllowDBNull = false
            Me.columninvoiceno.AllowDBNull = false
            Me.columntelno.AllowDBNull = false
            Me.columntelno.MaxLength = 20
            Me.columnfaxno.AllowDBNull = false
            Me.columnfaxno.MaxLength = 20
            Me.columnemail.AllowDBNull = false
            Me.columnemail.MaxLength = 35
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewmainRow() As mainRow
            Return CType(Me.NewRow,mainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New mainRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(mainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.mainRowChangedEvent) Is Nothing) Then
                RaiseEvent mainRowChanged(Me, New mainRowChangeEvent(CType(e.Row,mainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.mainRowChangingEvent) Is Nothing) Then
                RaiseEvent mainRowChanging(Me, New mainRowChangeEvent(CType(e.Row,mainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.mainRowDeletedEvent) Is Nothing) Then
                RaiseEvent mainRowDeleted(Me, New mainRowChangeEvent(CType(e.Row,mainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.mainRowDeletingEvent) Is Nothing) Then
                RaiseEvent mainRowDeleting(Me, New mainRowChangeEvent(CType(e.Row,mainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovemainRow(ByVal row As mainRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "mainDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class markupDataTable
        Inherits Global.System.Data.TypedTableBase(Of markupRow)
        
        Private columnsupplier As Global.System.Data.DataColumn
        
        Private columncountrycde As Global.System.Data.DataColumn
        
        Private columnsup_discpc As Global.System.Data.DataColumn
        
        Private columnmupercent As Global.System.Data.DataColumn
        
        Private columnwho As Global.System.Data.DataColumn
        
        Private columnlupdate As Global.System.Data.DataColumn
        
        Private columnaccount As Global.System.Data.DataColumn
        
        Private columnmulti As Global.System.Data.DataColumn
        
        Private columnddays As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "markup"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property supplierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsupplier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property countrycdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncountrycde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property sup_discpcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsup_discpc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property mupercentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmupercent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property whoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lupdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlupdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property accountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property multiColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmulti
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ddaysColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnddays
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As markupRow
            Get
                Return CType(Me.Rows(index),markupRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event markupRowChanging As markupRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event markupRowChanged As markupRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event markupRowDeleting As markupRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event markupRowDeleted As markupRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddmarkupRow(ByVal row As markupRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddmarkupRow(ByVal supplier As String, ByVal countrycde As String, ByVal sup_discpc As Decimal, ByVal mupercent As Decimal, ByVal who As String, ByVal lupdate As Date, ByVal account As String, ByVal multi As Boolean, ByVal ddays As Decimal) As markupRow
            Dim rowmarkupRow As markupRow = CType(Me.NewRow,markupRow)
            Dim columnValuesArray() As Object = New Object() {supplier, countrycde, sup_discpc, mupercent, who, lupdate, account, multi, ddays, Nothing}
            rowmarkupRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowmarkupRow)
            Return rowmarkupRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As markupRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),markupRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As markupDataTable = CType(MyBase.Clone,markupDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New markupDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnsupplier = MyBase.Columns("supplier")
            Me.columncountrycde = MyBase.Columns("countrycde")
            Me.columnsup_discpc = MyBase.Columns("sup_discpc")
            Me.columnmupercent = MyBase.Columns("mupercent")
            Me.columnwho = MyBase.Columns("who")
            Me.columnlupdate = MyBase.Columns("lupdate")
            Me.columnaccount = MyBase.Columns("account")
            Me.columnmulti = MyBase.Columns("multi")
            Me.columnddays = MyBase.Columns("ddays")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnsupplier = New Global.System.Data.DataColumn("supplier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsupplier)
            Me.columncountrycde = New Global.System.Data.DataColumn("countrycde", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncountrycde)
            Me.columnsup_discpc = New Global.System.Data.DataColumn("sup_discpc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsup_discpc)
            Me.columnmupercent = New Global.System.Data.DataColumn("mupercent", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmupercent)
            Me.columnwho = New Global.System.Data.DataColumn("who", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwho)
            Me.columnlupdate = New Global.System.Data.DataColumn("lupdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlupdate)
            Me.columnaccount = New Global.System.Data.DataColumn("account", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccount)
            Me.columnmulti = New Global.System.Data.DataColumn("multi", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmulti)
            Me.columnddays = New Global.System.Data.DataColumn("ddays", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnddays)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnsupplier.AllowDBNull = false
            Me.columnsupplier.MaxLength = 7
            Me.columncountrycde.AllowDBNull = false
            Me.columncountrycde.MaxLength = 3
            Me.columnsup_discpc.AllowDBNull = false
            Me.columnmupercent.AllowDBNull = false
            Me.columnwho.AllowDBNull = false
            Me.columnwho.MaxLength = 5
            Me.columnlupdate.AllowDBNull = false
            Me.columnaccount.AllowDBNull = false
            Me.columnaccount.MaxLength = 4
            Me.columnmulti.AllowDBNull = false
            Me.columnddays.AllowDBNull = false
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewmarkupRow() As markupRow
            Return CType(Me.NewRow,markupRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New markupRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(markupRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.markupRowChangedEvent) Is Nothing) Then
                RaiseEvent markupRowChanged(Me, New markupRowChangeEvent(CType(e.Row,markupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.markupRowChangingEvent) Is Nothing) Then
                RaiseEvent markupRowChanging(Me, New markupRowChangeEvent(CType(e.Row,markupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.markupRowDeletedEvent) Is Nothing) Then
                RaiseEvent markupRowDeleted(Me, New markupRowChangeEvent(CType(e.Row,markupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.markupRowDeletingEvent) Is Nothing) Then
                RaiseEvent markupRowDeleting(Me, New markupRowChangeEvent(CType(e.Row,markupRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovemarkupRow(ByVal row As markupRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "markupDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class namesDataTable
        Inherits Global.System.Data.TypedTableBase(Of namesRow)
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "names"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As namesRow
            Get
                Return CType(Me.Rows(index),namesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event namesRowChanging As namesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event namesRowChanged As namesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event namesRowDeleting As namesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event namesRowDeleted As namesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddnamesRow(ByVal row As namesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddnamesRow(ByVal name As String) As namesRow
            Dim rownamesRow As namesRow = CType(Me.NewRow,namesRow)
            Dim columnValuesArray() As Object = New Object() {name, Nothing}
            rownamesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rownamesRow)
            Return rownamesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As namesRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),namesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As namesDataTable = CType(MyBase.Clone,namesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New namesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnname = MyBase.Columns("name")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnname.AllowDBNull = false
            Me.columnname.MaxLength = 20
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewnamesRow() As namesRow
            Return CType(Me.NewRow,namesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New namesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(namesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.namesRowChangedEvent) Is Nothing) Then
                RaiseEvent namesRowChanged(Me, New namesRowChangeEvent(CType(e.Row,namesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.namesRowChangingEvent) Is Nothing) Then
                RaiseEvent namesRowChanging(Me, New namesRowChangeEvent(CType(e.Row,namesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.namesRowDeletedEvent) Is Nothing) Then
                RaiseEvent namesRowDeleted(Me, New namesRowChangeEvent(CType(e.Row,namesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.namesRowDeletingEvent) Is Nothing) Then
                RaiseEvent namesRowDeleting(Me, New namesRowChangeEvent(CType(e.Row,namesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovenamesRow(ByVal row As namesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "namesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class orddetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of orddetailRow)
        
        Private columnorderno As Global.System.Data.DataColumn
        
        Private columndinvno As Global.System.Data.DataColumn
        
        Private columnsupplier As Global.System.Data.DataColumn
        
        Private columnpartno As Global.System.Data.DataColumn
        
        Private columndesc_ As Global.System.Data.DataColumn
        
        Private columnqtyord As Global.System.Data.DataColumn
        
        Private columnqtyrec As Global.System.Data.DataColumn
        
        Private columniicode As Global.System.Data.DataColumn
        
        Private columnlocatebin As Global.System.Data.DataColumn
        
        Private columnprice As Global.System.Data.DataColumn
        
        Private columnowho As Global.System.Data.DataColumn
        
        Private columnddate As Global.System.Data.DataColumn
        
        Private columnotype As Global.System.Data.DataColumn
        
        Private columnrecno As Global.System.Data.DataColumn
        
        Private columnoline As Global.System.Data.DataColumn
        
        Private columnacode As Global.System.Data.DataColumn
        
        Private columnback2back As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "orddetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ordernoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnorderno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property dinvnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndinvno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property supplierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsupplier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property partnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpartno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property desc_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columndesc_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qtyordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqtyord
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qtyrecColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqtyrec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iicodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniicode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property locatebinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlocatebin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property priceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property owhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnowho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ddateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnddate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property otypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnotype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property recnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrecno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property olineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoline
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property acodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnacode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property back2backColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnback2back
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As orddetailRow
            Get
                Return CType(Me.Rows(index),orddetailRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event orddetailRowChanging As orddetailRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event orddetailRowChanged As orddetailRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event orddetailRowDeleting As orddetailRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event orddetailRowDeleted As orddetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddorddetailRow(ByVal row As orddetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddorddetailRow( _
                    ByVal orderno As String,  _
                    ByVal dinvno As String,  _
                    ByVal supplier As String,  _
                    ByVal partno As String,  _
                    ByVal desc_ As String,  _
                    ByVal qtyord As Decimal,  _
                    ByVal qtyrec As Decimal,  _
                    ByVal iicode As String,  _
                    ByVal locatebin As String,  _
                    ByVal price As Decimal,  _
                    ByVal owho As String,  _
                    ByVal ddate As Date,  _
                    ByVal otype As String,  _
                    ByVal recno As Decimal,  _
                    ByVal oline As String,  _
                    ByVal acode As String,  _
                    ByVal back2back As Boolean) As orddetailRow
            Dim roworddetailRow As orddetailRow = CType(Me.NewRow,orddetailRow)
            Dim columnValuesArray() As Object = New Object() {orderno, dinvno, supplier, partno, desc_, qtyord, qtyrec, iicode, locatebin, price, owho, ddate, otype, recno, oline, acode, back2back, Nothing}
            roworddetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(roworddetailRow)
            Return roworddetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As orddetailRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),orddetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As orddetailDataTable = CType(MyBase.Clone,orddetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New orddetailDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnorderno = MyBase.Columns("orderno")
            Me.columndinvno = MyBase.Columns("dinvno")
            Me.columnsupplier = MyBase.Columns("supplier")
            Me.columnpartno = MyBase.Columns("partno")
            Me.columndesc_ = MyBase.Columns("desc_")
            Me.columnqtyord = MyBase.Columns("qtyord")
            Me.columnqtyrec = MyBase.Columns("qtyrec")
            Me.columniicode = MyBase.Columns("iicode")
            Me.columnlocatebin = MyBase.Columns("locatebin")
            Me.columnprice = MyBase.Columns("price")
            Me.columnowho = MyBase.Columns("owho")
            Me.columnddate = MyBase.Columns("ddate")
            Me.columnotype = MyBase.Columns("otype")
            Me.columnrecno = MyBase.Columns("recno")
            Me.columnoline = MyBase.Columns("oline")
            Me.columnacode = MyBase.Columns("acode")
            Me.columnback2back = MyBase.Columns("back2back")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnorderno = New Global.System.Data.DataColumn("orderno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnorderno)
            Me.columndinvno = New Global.System.Data.DataColumn("dinvno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndinvno)
            Me.columnsupplier = New Global.System.Data.DataColumn("supplier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsupplier)
            Me.columnpartno = New Global.System.Data.DataColumn("partno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpartno)
            Me.columndesc_ = New Global.System.Data.DataColumn("desc_", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndesc_)
            Me.columnqtyord = New Global.System.Data.DataColumn("qtyord", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqtyord)
            Me.columnqtyrec = New Global.System.Data.DataColumn("qtyrec", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqtyrec)
            Me.columniicode = New Global.System.Data.DataColumn("iicode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniicode)
            Me.columnlocatebin = New Global.System.Data.DataColumn("locatebin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlocatebin)
            Me.columnprice = New Global.System.Data.DataColumn("price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprice)
            Me.columnowho = New Global.System.Data.DataColumn("owho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnowho)
            Me.columnddate = New Global.System.Data.DataColumn("ddate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnddate)
            Me.columnotype = New Global.System.Data.DataColumn("otype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnotype)
            Me.columnrecno = New Global.System.Data.DataColumn("recno", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrecno)
            Me.columnoline = New Global.System.Data.DataColumn("oline", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoline)
            Me.columnacode = New Global.System.Data.DataColumn("acode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnacode)
            Me.columnback2back = New Global.System.Data.DataColumn("back2back", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnback2back)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnorderno.AllowDBNull = false
            Me.columnorderno.MaxLength = 6
            Me.columndinvno.AllowDBNull = false
            Me.columndinvno.MaxLength = 5
            Me.columnsupplier.AllowDBNull = false
            Me.columnsupplier.MaxLength = 7
            Me.columnpartno.AllowDBNull = false
            Me.columnpartno.MaxLength = 20
            Me.columndesc_.AllowDBNull = false
            Me.columndesc_.MaxLength = 40
            Me.columnqtyord.AllowDBNull = false
            Me.columnqtyrec.AllowDBNull = false
            Me.columniicode.AllowDBNull = false
            Me.columniicode.MaxLength = 5
            Me.columnlocatebin.AllowDBNull = false
            Me.columnlocatebin.MaxLength = 8
            Me.columnprice.AllowDBNull = false
            Me.columnowho.AllowDBNull = false
            Me.columnowho.MaxLength = 5
            Me.columnddate.AllowDBNull = false
            Me.columnotype.AllowDBNull = false
            Me.columnotype.MaxLength = 1
            Me.columnrecno.AllowDBNull = false
            Me.columnoline.AllowDBNull = false
            Me.columnoline.MaxLength = 3
            Me.columnacode.AllowDBNull = false
            Me.columnacode.MaxLength = 4
            Me.columnback2back.AllowDBNull = false
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NeworddetailRow() As orddetailRow
            Return CType(Me.NewRow,orddetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New orddetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(orddetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.orddetailRowChangedEvent) Is Nothing) Then
                RaiseEvent orddetailRowChanged(Me, New orddetailRowChangeEvent(CType(e.Row,orddetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.orddetailRowChangingEvent) Is Nothing) Then
                RaiseEvent orddetailRowChanging(Me, New orddetailRowChangeEvent(CType(e.Row,orddetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.orddetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent orddetailRowDeleted(Me, New orddetailRowChangeEvent(CType(e.Row,orddetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.orddetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent orddetailRowDeleting(Me, New orddetailRowChangeEvent(CType(e.Row,orddetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveorddetailRow(ByVal row As orddetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "orddetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class orderheadDataTable
        Inherits Global.System.Data.TypedTableBase(Of orderheadRow)
        
        Private columnorderno As Global.System.Data.DataColumn
        
        Private columnosupplier As Global.System.Data.DataColumn
        
        Private columnosname As Global.System.Data.DataColumn
        
        Private columnocurr As Global.System.Data.DataColumn
        
        Private columnoadd1 As Global.System.Data.DataColumn
        
        Private columnoadd2 As Global.System.Data.DataColumn
        
        Private columnoadd3 As Global.System.Data.DataColumn
        
        Private columnoadd4 As Global.System.Data.DataColumn
        
        Private columnoadd5 As Global.System.Data.DataColumn
        
        Private columnoscontact As Global.System.Data.DataColumn
        
        Private columnostelno As Global.System.Data.DataColumn
        
        Private columnosfaxno As Global.System.Data.DataColumn
        
        Private columnosemail As Global.System.Data.DataColumn
        
        Private columnodate As Global.System.Data.DataColumn
        
        Private columnoheader As Global.System.Data.DataColumn
        
        Private columnomemo1 As Global.System.Data.DataColumn
        
        Private columnomemo2 As Global.System.Data.DataColumn
        
        Private columnomemo3 As Global.System.Data.DataColumn
        
        Private columnomemo4 As Global.System.Data.DataColumn
        
        Private columnodisc As Global.System.Data.DataColumn
        
        Private columnowho As Global.System.Data.DataColumn
        
        Private columnoinits As Global.System.Data.DataColumn
        
        Private columnosaccount As Global.System.Data.DataColumn
        
        Private columnoprinted As Global.System.Data.DataColumn
        
        Private columnddate As Global.System.Data.DataColumn
        
        Private columnback2back As Global.System.Data.DataColumn
        
        Private columntimestamp_column As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "orderhead"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ordernoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnorderno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property osupplierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnosupplier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property osnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnosname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ocurrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnocurr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property oadd1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnoadd1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property oadd2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnoadd2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property oadd3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnoadd3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property oadd4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnoadd4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property oadd5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnoadd5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property oscontactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoscontact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ostelnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnostelno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property osfaxnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnosfaxno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property osemailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnosemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property odateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnodate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property oheaderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoheader
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property omemo1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnomemo1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property omemo2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnomemo2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property omemo3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnomemo3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property omemo4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnomemo4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property odiscColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnodisc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property owhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnowho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property oinitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoinits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property osaccountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnosaccount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property oprintedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnoprinted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ddateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnddate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property back2backColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnback2back
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property timestamp_columnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimestamp_column
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As orderheadRow
            Get
                Return CType(Me.Rows(index),orderheadRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event orderheadRowChanging As orderheadRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event orderheadRowChanged As orderheadRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event orderheadRowDeleting As orderheadRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event orderheadRowDeleted As orderheadRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddorderheadRow(ByVal row As orderheadRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddorderheadRow( _
                    ByVal orderno As String,  _
                    ByVal osupplier As String,  _
                    ByVal osname As String,  _
                    ByVal ocurr As String,  _
                    ByVal oadd1 As String,  _
                    ByVal oadd2 As String,  _
                    ByVal oadd3 As String,  _
                    ByVal oadd4 As String,  _
                    ByVal oadd5 As String,  _
                    ByVal oscontact As String,  _
                    ByVal ostelno As String,  _
                    ByVal osfaxno As String,  _
                    ByVal osemail As String,  _
                    ByVal odate As Date,  _
                    ByVal oheader As String,  _
                    ByVal omemo1 As String,  _
                    ByVal omemo2 As String,  _
                    ByVal omemo3 As String,  _
                    ByVal omemo4 As String,  _
                    ByVal odisc As Boolean,  _
                    ByVal owho As String,  _
                    ByVal oinits As String,  _
                    ByVal osaccount As String,  _
                    ByVal oprinted As Boolean,  _
                    ByVal ddate As Date,  _
                    ByVal back2back As Boolean,  _
                    ByVal timestamp_column() As Byte) As orderheadRow
            Dim roworderheadRow As orderheadRow = CType(Me.NewRow,orderheadRow)
            Dim columnValuesArray() As Object = New Object() {orderno, osupplier, osname, ocurr, oadd1, oadd2, oadd3, oadd4, oadd5, oscontact, ostelno, osfaxno, osemail, odate, oheader, omemo1, omemo2, omemo3, omemo4, odisc, owho, oinits, osaccount, oprinted, ddate, back2back, timestamp_column, Nothing}
            roworderheadRow.ItemArray = columnValuesArray
            Me.Rows.Add(roworderheadRow)
            Return roworderheadRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As orderheadRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),orderheadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As orderheadDataTable = CType(MyBase.Clone,orderheadDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New orderheadDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnorderno = MyBase.Columns("orderno")
            Me.columnosupplier = MyBase.Columns("osupplier")
            Me.columnosname = MyBase.Columns("osname")
            Me.columnocurr = MyBase.Columns("ocurr")
            Me.columnoadd1 = MyBase.Columns("oadd1")
            Me.columnoadd2 = MyBase.Columns("oadd2")
            Me.columnoadd3 = MyBase.Columns("oadd3")
            Me.columnoadd4 = MyBase.Columns("oadd4")
            Me.columnoadd5 = MyBase.Columns("oadd5")
            Me.columnoscontact = MyBase.Columns("oscontact")
            Me.columnostelno = MyBase.Columns("ostelno")
            Me.columnosfaxno = MyBase.Columns("osfaxno")
            Me.columnosemail = MyBase.Columns("osemail")
            Me.columnodate = MyBase.Columns("odate")
            Me.columnoheader = MyBase.Columns("oheader")
            Me.columnomemo1 = MyBase.Columns("omemo1")
            Me.columnomemo2 = MyBase.Columns("omemo2")
            Me.columnomemo3 = MyBase.Columns("omemo3")
            Me.columnomemo4 = MyBase.Columns("omemo4")
            Me.columnodisc = MyBase.Columns("odisc")
            Me.columnowho = MyBase.Columns("owho")
            Me.columnoinits = MyBase.Columns("oinits")
            Me.columnosaccount = MyBase.Columns("osaccount")
            Me.columnoprinted = MyBase.Columns("oprinted")
            Me.columnddate = MyBase.Columns("ddate")
            Me.columnback2back = MyBase.Columns("back2back")
            Me.columntimestamp_column = MyBase.Columns("timestamp_column")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnorderno = New Global.System.Data.DataColumn("orderno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnorderno)
            Me.columnosupplier = New Global.System.Data.DataColumn("osupplier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnosupplier)
            Me.columnosname = New Global.System.Data.DataColumn("osname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnosname)
            Me.columnocurr = New Global.System.Data.DataColumn("ocurr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnocurr)
            Me.columnoadd1 = New Global.System.Data.DataColumn("oadd1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoadd1)
            Me.columnoadd2 = New Global.System.Data.DataColumn("oadd2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoadd2)
            Me.columnoadd3 = New Global.System.Data.DataColumn("oadd3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoadd3)
            Me.columnoadd4 = New Global.System.Data.DataColumn("oadd4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoadd4)
            Me.columnoadd5 = New Global.System.Data.DataColumn("oadd5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoadd5)
            Me.columnoscontact = New Global.System.Data.DataColumn("oscontact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoscontact)
            Me.columnostelno = New Global.System.Data.DataColumn("ostelno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnostelno)
            Me.columnosfaxno = New Global.System.Data.DataColumn("osfaxno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnosfaxno)
            Me.columnosemail = New Global.System.Data.DataColumn("osemail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnosemail)
            Me.columnodate = New Global.System.Data.DataColumn("odate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnodate)
            Me.columnoheader = New Global.System.Data.DataColumn("oheader", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoheader)
            Me.columnomemo1 = New Global.System.Data.DataColumn("omemo1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnomemo1)
            Me.columnomemo2 = New Global.System.Data.DataColumn("omemo2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnomemo2)
            Me.columnomemo3 = New Global.System.Data.DataColumn("omemo3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnomemo3)
            Me.columnomemo4 = New Global.System.Data.DataColumn("omemo4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnomemo4)
            Me.columnodisc = New Global.System.Data.DataColumn("odisc", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnodisc)
            Me.columnowho = New Global.System.Data.DataColumn("owho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnowho)
            Me.columnoinits = New Global.System.Data.DataColumn("oinits", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoinits)
            Me.columnosaccount = New Global.System.Data.DataColumn("osaccount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnosaccount)
            Me.columnoprinted = New Global.System.Data.DataColumn("oprinted", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnoprinted)
            Me.columnddate = New Global.System.Data.DataColumn("ddate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnddate)
            Me.columnback2back = New Global.System.Data.DataColumn("back2back", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnback2back)
            Me.columntimestamp_column = New Global.System.Data.DataColumn("timestamp_column", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimestamp_column)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnorderno.AllowDBNull = false
            Me.columnorderno.MaxLength = 6
            Me.columnosupplier.AllowDBNull = false
            Me.columnosupplier.MaxLength = 7
            Me.columnosname.AllowDBNull = false
            Me.columnosname.MaxLength = 40
            Me.columnocurr.AllowDBNull = false
            Me.columnocurr.MaxLength = 3
            Me.columnoadd1.AllowDBNull = false
            Me.columnoadd1.MaxLength = 40
            Me.columnoadd2.AllowDBNull = false
            Me.columnoadd2.MaxLength = 40
            Me.columnoadd3.AllowDBNull = false
            Me.columnoadd3.MaxLength = 40
            Me.columnoadd4.AllowDBNull = false
            Me.columnoadd4.MaxLength = 40
            Me.columnoadd5.AllowDBNull = false
            Me.columnoadd5.MaxLength = 30
            Me.columnoscontact.AllowDBNull = false
            Me.columnoscontact.MaxLength = 20
            Me.columnostelno.AllowDBNull = false
            Me.columnostelno.MaxLength = 20
            Me.columnosfaxno.AllowDBNull = false
            Me.columnosfaxno.MaxLength = 20
            Me.columnosemail.AllowDBNull = false
            Me.columnosemail.MaxLength = 40
            Me.columnodate.AllowDBNull = false
            Me.columnoheader.AllowDBNull = false
            Me.columnoheader.MaxLength = 40
            Me.columnomemo1.AllowDBNull = false
            Me.columnomemo1.MaxLength = 2147483647
            Me.columnomemo2.AllowDBNull = false
            Me.columnomemo2.MaxLength = 2147483647
            Me.columnomemo3.AllowDBNull = false
            Me.columnomemo3.MaxLength = 2147483647
            Me.columnomemo4.AllowDBNull = false
            Me.columnomemo4.MaxLength = 2147483647
            Me.columnodisc.AllowDBNull = false
            Me.columnowho.AllowDBNull = false
            Me.columnowho.MaxLength = 5
            Me.columnoinits.AllowDBNull = false
            Me.columnoinits.MaxLength = 3
            Me.columnosaccount.AllowDBNull = false
            Me.columnosaccount.MaxLength = 4
            Me.columnoprinted.AllowDBNull = false
            Me.columnddate.AllowDBNull = false
            Me.columnback2back.AllowDBNull = false
            Me.columntimestamp_column.ReadOnly = true
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NeworderheadRow() As orderheadRow
            Return CType(Me.NewRow,orderheadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New orderheadRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(orderheadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.orderheadRowChangedEvent) Is Nothing) Then
                RaiseEvent orderheadRowChanged(Me, New orderheadRowChangeEvent(CType(e.Row,orderheadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.orderheadRowChangingEvent) Is Nothing) Then
                RaiseEvent orderheadRowChanging(Me, New orderheadRowChangeEvent(CType(e.Row,orderheadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.orderheadRowDeletedEvent) Is Nothing) Then
                RaiseEvent orderheadRowDeleted(Me, New orderheadRowChangeEvent(CType(e.Row,orderheadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.orderheadRowDeletingEvent) Is Nothing) Then
                RaiseEvent orderheadRowDeleting(Me, New orderheadRowChangeEvent(CType(e.Row,orderheadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveorderheadRow(ByVal row As orderheadRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "orderheadDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class orderlineDataTable
        Inherits Global.System.Data.TypedTableBase(Of orderlineRow)
        
        Private columnlorderno As Global.System.Data.DataColumn
        
        Private columnllineno As Global.System.Data.DataColumn
        
        Private columnlpartno As Global.System.Data.DataColumn
        
        Private columnldesc As Global.System.Data.DataColumn
        
        Private columnlqtyord As Global.System.Data.DataColumn
        
        Private columnlqtypart As Global.System.Data.DataColumn
        
        Private columnlqtyrec As Global.System.Data.DataColumn
        
        Private columnlprice As Global.System.Data.DataColumn
        
        Private columnleprice As Global.System.Data.DataColumn
        
        Private columnliicode As Global.System.Data.DataColumn
        
        Private columnllocatebin As Global.System.Data.DataColumn
        
        Private columnlolinememo As Global.System.Data.DataColumn
        
        Private columnlnonstock As Global.System.Data.DataColumn
        
        Private columnlodate As Global.System.Data.DataColumn
        
        Private columnlrdate As Global.System.Data.DataColumn
        
        Private columnlback2back As Global.System.Data.DataColumn
        
        Private columntimestamp_column As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "orderline"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lordernoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlorderno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property llinenoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnllineno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lpartnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlpartno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ldescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnldesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lqtyordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlqtyord
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lqtypartColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlqtypart
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lqtyrecColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlqtyrec
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lpriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lepriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnleprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property liicodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnliicode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property llocatebinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnllocatebin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lolinememoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlolinememo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lnonstockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlnonstock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lodateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlodate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lrdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlrdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lback2backColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlback2back
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property timestamp_columnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimestamp_column
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As orderlineRow
            Get
                Return CType(Me.Rows(index),orderlineRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event orderlineRowChanging As orderlineRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event orderlineRowChanged As orderlineRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event orderlineRowDeleting As orderlineRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event orderlineRowDeleted As orderlineRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddorderlineRow(ByVal row As orderlineRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddorderlineRow( _
                    ByVal lorderno As String,  _
                    ByVal llineno As String,  _
                    ByVal lpartno As String,  _
                    ByVal ldesc As String,  _
                    ByVal lqtyord As Decimal,  _
                    ByVal lqtypart As Decimal,  _
                    ByVal lqtyrec As Decimal,  _
                    ByVal lprice As Decimal,  _
                    ByVal leprice As Decimal,  _
                    ByVal liicode As String,  _
                    ByVal llocatebin As String,  _
                    ByVal lolinememo As String,  _
                    ByVal lnonstock As Boolean,  _
                    ByVal lodate As Date,  _
                    ByVal lrdate As Date,  _
                    ByVal lback2back As Boolean,  _
                    ByVal timestamp_column() As Byte) As orderlineRow
            Dim roworderlineRow As orderlineRow = CType(Me.NewRow,orderlineRow)
            Dim columnValuesArray() As Object = New Object() {lorderno, llineno, lpartno, ldesc, lqtyord, lqtypart, lqtyrec, lprice, leprice, liicode, llocatebin, lolinememo, lnonstock, lodate, lrdate, lback2back, timestamp_column, Nothing}
            roworderlineRow.ItemArray = columnValuesArray
            Me.Rows.Add(roworderlineRow)
            Return roworderlineRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As orderlineRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),orderlineRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As orderlineDataTable = CType(MyBase.Clone,orderlineDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New orderlineDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnlorderno = MyBase.Columns("lorderno")
            Me.columnllineno = MyBase.Columns("llineno")
            Me.columnlpartno = MyBase.Columns("lpartno")
            Me.columnldesc = MyBase.Columns("ldesc")
            Me.columnlqtyord = MyBase.Columns("lqtyord")
            Me.columnlqtypart = MyBase.Columns("lqtypart")
            Me.columnlqtyrec = MyBase.Columns("lqtyrec")
            Me.columnlprice = MyBase.Columns("lprice")
            Me.columnleprice = MyBase.Columns("leprice")
            Me.columnliicode = MyBase.Columns("liicode")
            Me.columnllocatebin = MyBase.Columns("llocatebin")
            Me.columnlolinememo = MyBase.Columns("lolinememo")
            Me.columnlnonstock = MyBase.Columns("lnonstock")
            Me.columnlodate = MyBase.Columns("lodate")
            Me.columnlrdate = MyBase.Columns("lrdate")
            Me.columnlback2back = MyBase.Columns("lback2back")
            Me.columntimestamp_column = MyBase.Columns("timestamp_column")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnlorderno = New Global.System.Data.DataColumn("lorderno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlorderno)
            Me.columnllineno = New Global.System.Data.DataColumn("llineno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnllineno)
            Me.columnlpartno = New Global.System.Data.DataColumn("lpartno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlpartno)
            Me.columnldesc = New Global.System.Data.DataColumn("ldesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnldesc)
            Me.columnlqtyord = New Global.System.Data.DataColumn("lqtyord", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlqtyord)
            Me.columnlqtypart = New Global.System.Data.DataColumn("lqtypart", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlqtypart)
            Me.columnlqtyrec = New Global.System.Data.DataColumn("lqtyrec", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlqtyrec)
            Me.columnlprice = New Global.System.Data.DataColumn("lprice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlprice)
            Me.columnleprice = New Global.System.Data.DataColumn("leprice", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnleprice)
            Me.columnliicode = New Global.System.Data.DataColumn("liicode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnliicode)
            Me.columnllocatebin = New Global.System.Data.DataColumn("llocatebin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnllocatebin)
            Me.columnlolinememo = New Global.System.Data.DataColumn("lolinememo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlolinememo)
            Me.columnlnonstock = New Global.System.Data.DataColumn("lnonstock", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlnonstock)
            Me.columnlodate = New Global.System.Data.DataColumn("lodate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlodate)
            Me.columnlrdate = New Global.System.Data.DataColumn("lrdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlrdate)
            Me.columnlback2back = New Global.System.Data.DataColumn("lback2back", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlback2back)
            Me.columntimestamp_column = New Global.System.Data.DataColumn("timestamp_column", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimestamp_column)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnlorderno.AllowDBNull = false
            Me.columnlorderno.MaxLength = 6
            Me.columnllineno.AllowDBNull = false
            Me.columnllineno.MaxLength = 3
            Me.columnlpartno.AllowDBNull = false
            Me.columnlpartno.MaxLength = 20
            Me.columnldesc.AllowDBNull = false
            Me.columnldesc.MaxLength = 40
            Me.columnlqtyord.AllowDBNull = false
            Me.columnlqtypart.AllowDBNull = false
            Me.columnlqtyrec.AllowDBNull = false
            Me.columnlprice.AllowDBNull = false
            Me.columnleprice.AllowDBNull = false
            Me.columnliicode.AllowDBNull = false
            Me.columnliicode.MaxLength = 5
            Me.columnllocatebin.AllowDBNull = false
            Me.columnllocatebin.MaxLength = 8
            Me.columnlolinememo.AllowDBNull = false
            Me.columnlolinememo.MaxLength = 2147483647
            Me.columnlnonstock.AllowDBNull = false
            Me.columnlodate.AllowDBNull = false
            Me.columnlrdate.AllowDBNull = false
            Me.columnlback2back.AllowDBNull = false
            Me.columntimestamp_column.ReadOnly = true
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NeworderlineRow() As orderlineRow
            Return CType(Me.NewRow,orderlineRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New orderlineRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(orderlineRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.orderlineRowChangedEvent) Is Nothing) Then
                RaiseEvent orderlineRowChanged(Me, New orderlineRowChangeEvent(CType(e.Row,orderlineRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.orderlineRowChangingEvent) Is Nothing) Then
                RaiseEvent orderlineRowChanging(Me, New orderlineRowChangeEvent(CType(e.Row,orderlineRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.orderlineRowDeletedEvent) Is Nothing) Then
                RaiseEvent orderlineRowDeleted(Me, New orderlineRowChangeEvent(CType(e.Row,orderlineRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.orderlineRowDeletingEvent) Is Nothing) Then
                RaiseEvent orderlineRowDeleting(Me, New orderlineRowChangeEvent(CType(e.Row,orderlineRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveorderlineRow(ByVal row As orderlineRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "orderlineDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class qictrlDataTable
        Inherits Global.System.Data.TypedTableBase(Of qictrlRow)
        
        Private columnquoteno As Global.System.Data.DataColumn
        
        Private columnqdate As Global.System.Data.DataColumn
        
        Private columncust_ref As Global.System.Data.DataColumn
        
        Private columncust_date As Global.System.Data.DataColumn
        
        Private columncdeldate As Global.System.Data.DataColumn
        
        Private columnaccountno As Global.System.Data.DataColumn
        
        Private columns_name As Global.System.Data.DataColumn
        
        Private columncontact As Global.System.Data.DataColumn
        
        Private columnholdnote As Global.System.Data.DataColumn
        
        Private columninvoice As Global.System.Data.DataColumn
        
        Private columnidate As Global.System.Data.DataColumn
        
        Private columnediscpc As Global.System.Data.DataColumn
        
        Private columnediscount As Global.System.Data.DataColumn
        
        Private columniaddr As Global.System.Data.DataColumn
        
        Private columndaddr As Global.System.Data.DataColumn
        
        Private columnsrequmnt As Global.System.Data.DataColumn
        
        Private columntermdays As Global.System.Data.DataColumn
        
        Private columnterms As Global.System.Data.DataColumn
        
        Private columnshipment As Global.System.Data.DataColumn
        
        Private columncarriage As Global.System.Data.DataColumn
        
        Private columnpacking As Global.System.Data.DataColumn
        
        Private columnvatpc As Global.System.Data.DataColumn
        
        Private columneurovat As Global.System.Data.DataColumn
        
        Private columnvatamt As Global.System.Data.DataColumn
        
        Private columnt_parts As Global.System.Data.DataColumn
        
        Private columnt_cost As Global.System.Data.DataColumn
        
        Private columns_pdate As Global.System.Data.DataColumn
        
        Private columns_paid As Global.System.Data.DataColumn
        
        Private columncpercent As Global.System.Data.DataColumn
        
        Private columnccard As Global.System.Data.DataColumn
        
        Private columns_adjust As Global.System.Data.DataColumn
        
        Private columns_acode As Global.System.Data.DataColumn
        
        Private columnentrykd As Global.System.Data.DataColumn
        
        Private columninvcurcy As Global.System.Data.DataColumn
        
        Private columninvrexch As Global.System.Data.DataColumn
        
        Private columnback2back As Global.System.Data.DataColumn
        
        Private columnphone As Global.System.Data.DataColumn
        
        Private columnfax As Global.System.Data.DataColumn
        
        Private columnemail As Global.System.Data.DataColumn
        
        Private columnbustype As Global.System.Data.DataColumn
        
        Private columnqiwho As Global.System.Data.DataColumn
        
        Private columnqiuse As Global.System.Data.DataColumn
        
        Private columnserv As Global.System.Data.DataColumn
        
        Private columnconf As Global.System.Data.DataColumn
        
        Private columntimestamp_column As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "qictrl"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property quotenoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnquoteno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property cust_refColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncust_ref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property cust_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncust_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property cdeldateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncdeldate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property accountnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccountno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property s_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property contactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property holdnoteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnholdnote
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property invoiceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninvoice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property idateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ediscpcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnediscpc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ediscountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnediscount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iaddrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniaddr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property daddrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndaddr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property srequmntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrequmnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property termdaysColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntermdays
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property termsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnterms
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property shipmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnshipment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property carriageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncarriage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property packingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpacking
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property vatpcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatpc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property eurovatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneurovat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property vatamtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatamt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property t_partsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnt_parts
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property t_costColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnt_cost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property s_pdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_pdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property s_paidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_paid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property cpercentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncpercent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ccardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnccard
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property s_adjustColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_adjust
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property s_acodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_acode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property entrykdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentrykd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property invcurcyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninvcurcy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property invrexchColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninvrexch
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property back2backColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnback2back
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property phoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnphone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property faxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property bustypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbustype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qiwhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqiwho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qiuseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqiuse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property servColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnserv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property confColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnconf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property timestamp_columnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimestamp_column
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As qictrlRow
            Get
                Return CType(Me.Rows(index),qictrlRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event qictrlRowChanging As qictrlRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event qictrlRowChanged As qictrlRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event qictrlRowDeleting As qictrlRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event qictrlRowDeleted As qictrlRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddqictrlRow(ByVal row As qictrlRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddqictrlRow( _
                    ByVal quoteno As String,  _
                    ByVal qdate As Date,  _
                    ByVal cust_ref As String,  _
                    ByVal cust_date As Date,  _
                    ByVal cdeldate As Date,  _
                    ByVal accountno As String,  _
                    ByVal s_name As String,  _
                    ByVal contact As String,  _
                    ByVal holdnote As String,  _
                    ByVal invoice As String,  _
                    ByVal idate As Date,  _
                    ByVal ediscpc As Decimal,  _
                    ByVal ediscount As Decimal,  _
                    ByVal iaddr As String,  _
                    ByVal daddr As String,  _
                    ByVal srequmnt As String,  _
                    ByVal termdays As Decimal,  _
                    ByVal terms As String,  _
                    ByVal shipment As String,  _
                    ByVal carriage As Decimal,  _
                    ByVal packing As Decimal,  _
                    ByVal vatpc As Decimal,  _
                    ByVal eurovat As String,  _
                    ByVal vatamt As Decimal,  _
                    ByVal t_parts As Decimal,  _
                    ByVal t_cost As Decimal,  _
                    ByVal s_pdate As Date,  _
                    ByVal s_paid As Decimal,  _
                    ByVal cpercent As Decimal,  _
                    ByVal ccard As Decimal,  _
                    ByVal s_adjust As Decimal,  _
                    ByVal s_acode As String,  _
                    ByVal entrykd As String,  _
                    ByVal invcurcy As String,  _
                    ByVal invrexch As Decimal,  _
                    ByVal back2back As Boolean,  _
                    ByVal phone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal bustype As String,  _
                    ByVal qiwho As String,  _
                    ByVal qiuse As String,  _
                    ByVal serv As Boolean,  _
                    ByVal conf As Boolean,  _
                    ByVal timestamp_column() As Byte) As qictrlRow
            Dim rowqictrlRow As qictrlRow = CType(Me.NewRow,qictrlRow)
            Dim columnValuesArray() As Object = New Object() {quoteno, qdate, cust_ref, cust_date, cdeldate, accountno, s_name, contact, holdnote, invoice, idate, ediscpc, ediscount, iaddr, daddr, srequmnt, termdays, terms, shipment, carriage, packing, vatpc, eurovat, vatamt, t_parts, t_cost, s_pdate, s_paid, cpercent, ccard, s_adjust, s_acode, entrykd, invcurcy, invrexch, back2back, phone, fax, email, bustype, qiwho, qiuse, serv, conf, timestamp_column, Nothing}
            rowqictrlRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowqictrlRow)
            Return rowqictrlRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As qictrlRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),qictrlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As qictrlDataTable = CType(MyBase.Clone,qictrlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New qictrlDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnquoteno = MyBase.Columns("quoteno")
            Me.columnqdate = MyBase.Columns("qdate")
            Me.columncust_ref = MyBase.Columns("cust_ref")
            Me.columncust_date = MyBase.Columns("cust_date")
            Me.columncdeldate = MyBase.Columns("cdeldate")
            Me.columnaccountno = MyBase.Columns("accountno")
            Me.columns_name = MyBase.Columns("s_name")
            Me.columncontact = MyBase.Columns("contact")
            Me.columnholdnote = MyBase.Columns("holdnote")
            Me.columninvoice = MyBase.Columns("invoice")
            Me.columnidate = MyBase.Columns("idate")
            Me.columnediscpc = MyBase.Columns("ediscpc")
            Me.columnediscount = MyBase.Columns("ediscount")
            Me.columniaddr = MyBase.Columns("iaddr")
            Me.columndaddr = MyBase.Columns("daddr")
            Me.columnsrequmnt = MyBase.Columns("srequmnt")
            Me.columntermdays = MyBase.Columns("termdays")
            Me.columnterms = MyBase.Columns("terms")
            Me.columnshipment = MyBase.Columns("shipment")
            Me.columncarriage = MyBase.Columns("carriage")
            Me.columnpacking = MyBase.Columns("packing")
            Me.columnvatpc = MyBase.Columns("vatpc")
            Me.columneurovat = MyBase.Columns("eurovat")
            Me.columnvatamt = MyBase.Columns("vatamt")
            Me.columnt_parts = MyBase.Columns("t_parts")
            Me.columnt_cost = MyBase.Columns("t_cost")
            Me.columns_pdate = MyBase.Columns("s_pdate")
            Me.columns_paid = MyBase.Columns("s_paid")
            Me.columncpercent = MyBase.Columns("cpercent")
            Me.columnccard = MyBase.Columns("ccard")
            Me.columns_adjust = MyBase.Columns("s_adjust")
            Me.columns_acode = MyBase.Columns("s_acode")
            Me.columnentrykd = MyBase.Columns("entrykd")
            Me.columninvcurcy = MyBase.Columns("invcurcy")
            Me.columninvrexch = MyBase.Columns("invrexch")
            Me.columnback2back = MyBase.Columns("back2back")
            Me.columnphone = MyBase.Columns("phone")
            Me.columnfax = MyBase.Columns("fax")
            Me.columnemail = MyBase.Columns("email")
            Me.columnbustype = MyBase.Columns("bustype")
            Me.columnqiwho = MyBase.Columns("qiwho")
            Me.columnqiuse = MyBase.Columns("qiuse")
            Me.columnserv = MyBase.Columns("serv")
            Me.columnconf = MyBase.Columns("conf")
            Me.columntimestamp_column = MyBase.Columns("timestamp_column")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnquoteno = New Global.System.Data.DataColumn("quoteno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquoteno)
            Me.columnqdate = New Global.System.Data.DataColumn("qdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqdate)
            Me.columncust_ref = New Global.System.Data.DataColumn("cust_ref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncust_ref)
            Me.columncust_date = New Global.System.Data.DataColumn("cust_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncust_date)
            Me.columncdeldate = New Global.System.Data.DataColumn("cdeldate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncdeldate)
            Me.columnaccountno = New Global.System.Data.DataColumn("accountno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccountno)
            Me.columns_name = New Global.System.Data.DataColumn("s_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_name)
            Me.columncontact = New Global.System.Data.DataColumn("contact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontact)
            Me.columnholdnote = New Global.System.Data.DataColumn("holdnote", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnholdnote)
            Me.columninvoice = New Global.System.Data.DataColumn("invoice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninvoice)
            Me.columnidate = New Global.System.Data.DataColumn("idate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidate)
            Me.columnediscpc = New Global.System.Data.DataColumn("ediscpc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnediscpc)
            Me.columnediscount = New Global.System.Data.DataColumn("ediscount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnediscount)
            Me.columniaddr = New Global.System.Data.DataColumn("iaddr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniaddr)
            Me.columndaddr = New Global.System.Data.DataColumn("daddr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndaddr)
            Me.columnsrequmnt = New Global.System.Data.DataColumn("srequmnt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrequmnt)
            Me.columntermdays = New Global.System.Data.DataColumn("termdays", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntermdays)
            Me.columnterms = New Global.System.Data.DataColumn("terms", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnterms)
            Me.columnshipment = New Global.System.Data.DataColumn("shipment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnshipment)
            Me.columncarriage = New Global.System.Data.DataColumn("carriage", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncarriage)
            Me.columnpacking = New Global.System.Data.DataColumn("packing", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpacking)
            Me.columnvatpc = New Global.System.Data.DataColumn("vatpc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatpc)
            Me.columneurovat = New Global.System.Data.DataColumn("eurovat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneurovat)
            Me.columnvatamt = New Global.System.Data.DataColumn("vatamt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatamt)
            Me.columnt_parts = New Global.System.Data.DataColumn("t_parts", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnt_parts)
            Me.columnt_cost = New Global.System.Data.DataColumn("t_cost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnt_cost)
            Me.columns_pdate = New Global.System.Data.DataColumn("s_pdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_pdate)
            Me.columns_paid = New Global.System.Data.DataColumn("s_paid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_paid)
            Me.columncpercent = New Global.System.Data.DataColumn("cpercent", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncpercent)
            Me.columnccard = New Global.System.Data.DataColumn("ccard", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnccard)
            Me.columns_adjust = New Global.System.Data.DataColumn("s_adjust", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_adjust)
            Me.columns_acode = New Global.System.Data.DataColumn("s_acode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_acode)
            Me.columnentrykd = New Global.System.Data.DataColumn("entrykd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentrykd)
            Me.columninvcurcy = New Global.System.Data.DataColumn("invcurcy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninvcurcy)
            Me.columninvrexch = New Global.System.Data.DataColumn("invrexch", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninvrexch)
            Me.columnback2back = New Global.System.Data.DataColumn("back2back", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnback2back)
            Me.columnphone = New Global.System.Data.DataColumn("phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnphone)
            Me.columnfax = New Global.System.Data.DataColumn("fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfax)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.columnbustype = New Global.System.Data.DataColumn("bustype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbustype)
            Me.columnqiwho = New Global.System.Data.DataColumn("qiwho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqiwho)
            Me.columnqiuse = New Global.System.Data.DataColumn("qiuse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqiuse)
            Me.columnserv = New Global.System.Data.DataColumn("serv", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnserv)
            Me.columnconf = New Global.System.Data.DataColumn("conf", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnconf)
            Me.columntimestamp_column = New Global.System.Data.DataColumn("timestamp_column", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimestamp_column)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnquoteno.AllowDBNull = false
            Me.columnquoteno.MaxLength = 8
            Me.columnqdate.AllowDBNull = false
            Me.columncust_ref.AllowDBNull = false
            Me.columncust_ref.MaxLength = 20
            Me.columncust_date.AllowDBNull = false
            Me.columncdeldate.AllowDBNull = false
            Me.columnaccountno.AllowDBNull = false
            Me.columnaccountno.MaxLength = 5
            Me.columns_name.AllowDBNull = false
            Me.columns_name.MaxLength = 40
            Me.columncontact.AllowDBNull = false
            Me.columncontact.MaxLength = 30
            Me.columnholdnote.AllowDBNull = false
            Me.columnholdnote.MaxLength = 5
            Me.columninvoice.AllowDBNull = false
            Me.columninvoice.MaxLength = 5
            Me.columnidate.AllowDBNull = false
            Me.columnediscpc.AllowDBNull = false
            Me.columnediscount.AllowDBNull = false
            Me.columniaddr.AllowDBNull = false
            Me.columniaddr.MaxLength = 2147483647
            Me.columndaddr.AllowDBNull = false
            Me.columndaddr.MaxLength = 2147483647
            Me.columnsrequmnt.AllowDBNull = false
            Me.columnsrequmnt.MaxLength = 2147483647
            Me.columntermdays.AllowDBNull = false
            Me.columnterms.AllowDBNull = false
            Me.columnterms.MaxLength = 30
            Me.columnshipment.AllowDBNull = false
            Me.columnshipment.MaxLength = 40
            Me.columncarriage.AllowDBNull = false
            Me.columnpacking.AllowDBNull = false
            Me.columnvatpc.AllowDBNull = false
            Me.columneurovat.AllowDBNull = false
            Me.columneurovat.MaxLength = 15
            Me.columnvatamt.AllowDBNull = false
            Me.columnt_parts.AllowDBNull = false
            Me.columnt_cost.AllowDBNull = false
            Me.columns_pdate.AllowDBNull = false
            Me.columns_paid.AllowDBNull = false
            Me.columncpercent.AllowDBNull = false
            Me.columnccard.AllowDBNull = false
            Me.columns_adjust.AllowDBNull = false
            Me.columns_acode.AllowDBNull = false
            Me.columns_acode.MaxLength = 8
            Me.columnentrykd.AllowDBNull = false
            Me.columnentrykd.MaxLength = 1
            Me.columninvcurcy.AllowDBNull = false
            Me.columninvcurcy.MaxLength = 3
            Me.columninvrexch.AllowDBNull = false
            Me.columnback2back.AllowDBNull = false
            Me.columnphone.AllowDBNull = false
            Me.columnphone.MaxLength = 15
            Me.columnfax.AllowDBNull = false
            Me.columnfax.MaxLength = 15
            Me.columnemail.AllowDBNull = false
            Me.columnemail.MaxLength = 40
            Me.columnbustype.AllowDBNull = false
            Me.columnbustype.MaxLength = 1
            Me.columnqiwho.AllowDBNull = false
            Me.columnqiwho.MaxLength = 5
            Me.columnqiuse.AllowDBNull = false
            Me.columnqiuse.MaxLength = 1
            Me.columnserv.AllowDBNull = false
            Me.columnconf.AllowDBNull = false
            Me.columntimestamp_column.ReadOnly = true
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewqictrlRow() As qictrlRow
            Return CType(Me.NewRow,qictrlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New qictrlRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(qictrlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qictrlRowChangedEvent) Is Nothing) Then
                RaiseEvent qictrlRowChanged(Me, New qictrlRowChangeEvent(CType(e.Row,qictrlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qictrlRowChangingEvent) Is Nothing) Then
                RaiseEvent qictrlRowChanging(Me, New qictrlRowChangeEvent(CType(e.Row,qictrlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qictrlRowDeletedEvent) Is Nothing) Then
                RaiseEvent qictrlRowDeleted(Me, New qictrlRowChangeEvent(CType(e.Row,qictrlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qictrlRowDeletingEvent) Is Nothing) Then
                RaiseEvent qictrlRowDeleting(Me, New qictrlRowChangeEvent(CType(e.Row,qictrlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveqictrlRow(ByVal row As qictrlRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "qictrlDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class qictrlnewDataTable
        Inherits Global.System.Data.TypedTableBase(Of qictrlnewRow)
        
        Private columnquoteno As Global.System.Data.DataColumn
        
        Private columnqdate As Global.System.Data.DataColumn
        
        Private columncust_ref As Global.System.Data.DataColumn
        
        Private columncust_date As Global.System.Data.DataColumn
        
        Private columnaccountno As Global.System.Data.DataColumn
        
        Private columns_name As Global.System.Data.DataColumn
        
        Private columncontact As Global.System.Data.DataColumn
        
        Private columnholdnote As Global.System.Data.DataColumn
        
        Private columninvoice As Global.System.Data.DataColumn
        
        Private columnidate As Global.System.Data.DataColumn
        
        Private columnediscpc As Global.System.Data.DataColumn
        
        Private columnediscount As Global.System.Data.DataColumn
        
        Private columniaddr As Global.System.Data.DataColumn
        
        Private columndaddr As Global.System.Data.DataColumn
        
        Private columnsrequmnt As Global.System.Data.DataColumn
        
        Private columntermdays As Global.System.Data.DataColumn
        
        Private columnterms As Global.System.Data.DataColumn
        
        Private columnshipment As Global.System.Data.DataColumn
        
        Private columncarriage As Global.System.Data.DataColumn
        
        Private columnpacking As Global.System.Data.DataColumn
        
        Private columnvatpc As Global.System.Data.DataColumn
        
        Private columneurovat As Global.System.Data.DataColumn
        
        Private columnvatamt As Global.System.Data.DataColumn
        
        Private columnt_parts As Global.System.Data.DataColumn
        
        Private columnt_cost As Global.System.Data.DataColumn
        
        Private columns_pdate As Global.System.Data.DataColumn
        
        Private columns_paid As Global.System.Data.DataColumn
        
        Private columncpercent As Global.System.Data.DataColumn
        
        Private columnccard As Global.System.Data.DataColumn
        
        Private columns_adjust As Global.System.Data.DataColumn
        
        Private columns_acode As Global.System.Data.DataColumn
        
        Private columnentrykd As Global.System.Data.DataColumn
        
        Private columninvcurcy As Global.System.Data.DataColumn
        
        Private columninvrexch As Global.System.Data.DataColumn
        
        Private columnback2back As Global.System.Data.DataColumn
        
        Private columnphone As Global.System.Data.DataColumn
        
        Private columnfax As Global.System.Data.DataColumn
        
        Private columnemail As Global.System.Data.DataColumn
        
        Private columnbustype As Global.System.Data.DataColumn
        
        Private columnqiwho As Global.System.Data.DataColumn
        
        Private columnqiuse As Global.System.Data.DataColumn
        
        Private columntimestamp_column As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "qictrlnew"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property quotenoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnquoteno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property cust_refColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncust_ref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property cust_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncust_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property accountnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccountno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property s_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property contactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property holdnoteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnholdnote
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property invoiceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninvoice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property idateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ediscpcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnediscpc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ediscountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnediscount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iaddrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniaddr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property daddrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndaddr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property srequmntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrequmnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property termdaysColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntermdays
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property termsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnterms
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property shipmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnshipment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property carriageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncarriage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property packingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpacking
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property vatpcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatpc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property eurovatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneurovat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property vatamtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatamt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property t_partsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnt_parts
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property t_costColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnt_cost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property s_pdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_pdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property s_paidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_paid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property cpercentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncpercent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ccardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnccard
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property s_adjustColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_adjust
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property s_acodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_acode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property entrykdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentrykd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property invcurcyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninvcurcy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property invrexchColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninvrexch
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property back2backColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnback2back
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property phoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnphone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property faxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property bustypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbustype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qiwhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqiwho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qiuseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqiuse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property timestamp_columnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimestamp_column
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As qictrlnewRow
            Get
                Return CType(Me.Rows(index),qictrlnewRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event qictrlnewRowChanging As qictrlnewRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event qictrlnewRowChanged As qictrlnewRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event qictrlnewRowDeleting As qictrlnewRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event qictrlnewRowDeleted As qictrlnewRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddqictrlnewRow(ByVal row As qictrlnewRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddqictrlnewRow( _
                    ByVal quoteno As String,  _
                    ByVal qdate As Date,  _
                    ByVal cust_ref As String,  _
                    ByVal cust_date As Date,  _
                    ByVal accountno As String,  _
                    ByVal s_name As String,  _
                    ByVal contact As String,  _
                    ByVal holdnote As String,  _
                    ByVal invoice As String,  _
                    ByVal idate As Date,  _
                    ByVal ediscpc As Decimal,  _
                    ByVal ediscount As Decimal,  _
                    ByVal iaddr As String,  _
                    ByVal daddr As String,  _
                    ByVal srequmnt As String,  _
                    ByVal termdays As Decimal,  _
                    ByVal terms As String,  _
                    ByVal shipment As String,  _
                    ByVal carriage As Decimal,  _
                    ByVal packing As Decimal,  _
                    ByVal vatpc As Decimal,  _
                    ByVal eurovat As String,  _
                    ByVal vatamt As Decimal,  _
                    ByVal t_parts As Decimal,  _
                    ByVal t_cost As Decimal,  _
                    ByVal s_pdate As Date,  _
                    ByVal s_paid As Decimal,  _
                    ByVal cpercent As Decimal,  _
                    ByVal ccard As Decimal,  _
                    ByVal s_adjust As Decimal,  _
                    ByVal s_acode As String,  _
                    ByVal entrykd As String,  _
                    ByVal invcurcy As String,  _
                    ByVal invrexch As Decimal,  _
                    ByVal back2back As Boolean,  _
                    ByVal phone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal bustype As String,  _
                    ByVal qiwho As String,  _
                    ByVal qiuse As String,  _
                    ByVal timestamp_column() As Byte) As qictrlnewRow
            Dim rowqictrlnewRow As qictrlnewRow = CType(Me.NewRow,qictrlnewRow)
            Dim columnValuesArray() As Object = New Object() {quoteno, qdate, cust_ref, cust_date, accountno, s_name, contact, holdnote, invoice, idate, ediscpc, ediscount, iaddr, daddr, srequmnt, termdays, terms, shipment, carriage, packing, vatpc, eurovat, vatamt, t_parts, t_cost, s_pdate, s_paid, cpercent, ccard, s_adjust, s_acode, entrykd, invcurcy, invrexch, back2back, phone, fax, email, bustype, qiwho, qiuse, timestamp_column, Nothing}
            rowqictrlnewRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowqictrlnewRow)
            Return rowqictrlnewRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As qictrlnewRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),qictrlnewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As qictrlnewDataTable = CType(MyBase.Clone,qictrlnewDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New qictrlnewDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnquoteno = MyBase.Columns("quoteno")
            Me.columnqdate = MyBase.Columns("qdate")
            Me.columncust_ref = MyBase.Columns("cust_ref")
            Me.columncust_date = MyBase.Columns("cust_date")
            Me.columnaccountno = MyBase.Columns("accountno")
            Me.columns_name = MyBase.Columns("s_name")
            Me.columncontact = MyBase.Columns("contact")
            Me.columnholdnote = MyBase.Columns("holdnote")
            Me.columninvoice = MyBase.Columns("invoice")
            Me.columnidate = MyBase.Columns("idate")
            Me.columnediscpc = MyBase.Columns("ediscpc")
            Me.columnediscount = MyBase.Columns("ediscount")
            Me.columniaddr = MyBase.Columns("iaddr")
            Me.columndaddr = MyBase.Columns("daddr")
            Me.columnsrequmnt = MyBase.Columns("srequmnt")
            Me.columntermdays = MyBase.Columns("termdays")
            Me.columnterms = MyBase.Columns("terms")
            Me.columnshipment = MyBase.Columns("shipment")
            Me.columncarriage = MyBase.Columns("carriage")
            Me.columnpacking = MyBase.Columns("packing")
            Me.columnvatpc = MyBase.Columns("vatpc")
            Me.columneurovat = MyBase.Columns("eurovat")
            Me.columnvatamt = MyBase.Columns("vatamt")
            Me.columnt_parts = MyBase.Columns("t_parts")
            Me.columnt_cost = MyBase.Columns("t_cost")
            Me.columns_pdate = MyBase.Columns("s_pdate")
            Me.columns_paid = MyBase.Columns("s_paid")
            Me.columncpercent = MyBase.Columns("cpercent")
            Me.columnccard = MyBase.Columns("ccard")
            Me.columns_adjust = MyBase.Columns("s_adjust")
            Me.columns_acode = MyBase.Columns("s_acode")
            Me.columnentrykd = MyBase.Columns("entrykd")
            Me.columninvcurcy = MyBase.Columns("invcurcy")
            Me.columninvrexch = MyBase.Columns("invrexch")
            Me.columnback2back = MyBase.Columns("back2back")
            Me.columnphone = MyBase.Columns("phone")
            Me.columnfax = MyBase.Columns("fax")
            Me.columnemail = MyBase.Columns("email")
            Me.columnbustype = MyBase.Columns("bustype")
            Me.columnqiwho = MyBase.Columns("qiwho")
            Me.columnqiuse = MyBase.Columns("qiuse")
            Me.columntimestamp_column = MyBase.Columns("timestamp_column")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnquoteno = New Global.System.Data.DataColumn("quoteno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquoteno)
            Me.columnqdate = New Global.System.Data.DataColumn("qdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqdate)
            Me.columncust_ref = New Global.System.Data.DataColumn("cust_ref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncust_ref)
            Me.columncust_date = New Global.System.Data.DataColumn("cust_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncust_date)
            Me.columnaccountno = New Global.System.Data.DataColumn("accountno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccountno)
            Me.columns_name = New Global.System.Data.DataColumn("s_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_name)
            Me.columncontact = New Global.System.Data.DataColumn("contact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontact)
            Me.columnholdnote = New Global.System.Data.DataColumn("holdnote", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnholdnote)
            Me.columninvoice = New Global.System.Data.DataColumn("invoice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninvoice)
            Me.columnidate = New Global.System.Data.DataColumn("idate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidate)
            Me.columnediscpc = New Global.System.Data.DataColumn("ediscpc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnediscpc)
            Me.columnediscount = New Global.System.Data.DataColumn("ediscount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnediscount)
            Me.columniaddr = New Global.System.Data.DataColumn("iaddr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniaddr)
            Me.columndaddr = New Global.System.Data.DataColumn("daddr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndaddr)
            Me.columnsrequmnt = New Global.System.Data.DataColumn("srequmnt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrequmnt)
            Me.columntermdays = New Global.System.Data.DataColumn("termdays", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntermdays)
            Me.columnterms = New Global.System.Data.DataColumn("terms", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnterms)
            Me.columnshipment = New Global.System.Data.DataColumn("shipment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnshipment)
            Me.columncarriage = New Global.System.Data.DataColumn("carriage", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncarriage)
            Me.columnpacking = New Global.System.Data.DataColumn("packing", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpacking)
            Me.columnvatpc = New Global.System.Data.DataColumn("vatpc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatpc)
            Me.columneurovat = New Global.System.Data.DataColumn("eurovat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneurovat)
            Me.columnvatamt = New Global.System.Data.DataColumn("vatamt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatamt)
            Me.columnt_parts = New Global.System.Data.DataColumn("t_parts", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnt_parts)
            Me.columnt_cost = New Global.System.Data.DataColumn("t_cost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnt_cost)
            Me.columns_pdate = New Global.System.Data.DataColumn("s_pdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_pdate)
            Me.columns_paid = New Global.System.Data.DataColumn("s_paid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_paid)
            Me.columncpercent = New Global.System.Data.DataColumn("cpercent", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncpercent)
            Me.columnccard = New Global.System.Data.DataColumn("ccard", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnccard)
            Me.columns_adjust = New Global.System.Data.DataColumn("s_adjust", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_adjust)
            Me.columns_acode = New Global.System.Data.DataColumn("s_acode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_acode)
            Me.columnentrykd = New Global.System.Data.DataColumn("entrykd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentrykd)
            Me.columninvcurcy = New Global.System.Data.DataColumn("invcurcy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninvcurcy)
            Me.columninvrexch = New Global.System.Data.DataColumn("invrexch", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninvrexch)
            Me.columnback2back = New Global.System.Data.DataColumn("back2back", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnback2back)
            Me.columnphone = New Global.System.Data.DataColumn("phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnphone)
            Me.columnfax = New Global.System.Data.DataColumn("fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfax)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.columnbustype = New Global.System.Data.DataColumn("bustype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbustype)
            Me.columnqiwho = New Global.System.Data.DataColumn("qiwho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqiwho)
            Me.columnqiuse = New Global.System.Data.DataColumn("qiuse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqiuse)
            Me.columntimestamp_column = New Global.System.Data.DataColumn("timestamp_column", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimestamp_column)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnquoteno.AllowDBNull = false
            Me.columnquoteno.MaxLength = 8
            Me.columnqdate.AllowDBNull = false
            Me.columncust_ref.AllowDBNull = false
            Me.columncust_ref.MaxLength = 20
            Me.columncust_date.AllowDBNull = false
            Me.columnaccountno.AllowDBNull = false
            Me.columnaccountno.MaxLength = 5
            Me.columns_name.AllowDBNull = false
            Me.columns_name.MaxLength = 30
            Me.columncontact.AllowDBNull = false
            Me.columncontact.MaxLength = 30
            Me.columnholdnote.AllowDBNull = false
            Me.columnholdnote.MaxLength = 5
            Me.columninvoice.AllowDBNull = false
            Me.columninvoice.MaxLength = 5
            Me.columnidate.AllowDBNull = false
            Me.columnediscpc.AllowDBNull = false
            Me.columnediscount.AllowDBNull = false
            Me.columniaddr.AllowDBNull = false
            Me.columniaddr.MaxLength = 2147483647
            Me.columndaddr.AllowDBNull = false
            Me.columndaddr.MaxLength = 2147483647
            Me.columnsrequmnt.AllowDBNull = false
            Me.columnsrequmnt.MaxLength = 2147483647
            Me.columntermdays.AllowDBNull = false
            Me.columnterms.AllowDBNull = false
            Me.columnterms.MaxLength = 30
            Me.columnshipment.AllowDBNull = false
            Me.columnshipment.MaxLength = 40
            Me.columncarriage.AllowDBNull = false
            Me.columnpacking.AllowDBNull = false
            Me.columnvatpc.AllowDBNull = false
            Me.columneurovat.AllowDBNull = false
            Me.columneurovat.MaxLength = 15
            Me.columnvatamt.AllowDBNull = false
            Me.columnt_parts.AllowDBNull = false
            Me.columnt_cost.AllowDBNull = false
            Me.columns_pdate.AllowDBNull = false
            Me.columns_paid.AllowDBNull = false
            Me.columncpercent.AllowDBNull = false
            Me.columnccard.AllowDBNull = false
            Me.columns_adjust.AllowDBNull = false
            Me.columns_acode.AllowDBNull = false
            Me.columns_acode.MaxLength = 8
            Me.columnentrykd.AllowDBNull = false
            Me.columnentrykd.MaxLength = 1
            Me.columninvcurcy.AllowDBNull = false
            Me.columninvcurcy.MaxLength = 3
            Me.columninvrexch.AllowDBNull = false
            Me.columnback2back.AllowDBNull = false
            Me.columnphone.AllowDBNull = false
            Me.columnphone.MaxLength = 15
            Me.columnfax.AllowDBNull = false
            Me.columnfax.MaxLength = 15
            Me.columnemail.AllowDBNull = false
            Me.columnemail.MaxLength = 40
            Me.columnbustype.AllowDBNull = false
            Me.columnbustype.MaxLength = 1
            Me.columnqiwho.AllowDBNull = false
            Me.columnqiwho.MaxLength = 5
            Me.columnqiuse.AllowDBNull = false
            Me.columnqiuse.MaxLength = 1
            Me.columntimestamp_column.ReadOnly = true
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewqictrlnewRow() As qictrlnewRow
            Return CType(Me.NewRow,qictrlnewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New qictrlnewRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(qictrlnewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qictrlnewRowChangedEvent) Is Nothing) Then
                RaiseEvent qictrlnewRowChanged(Me, New qictrlnewRowChangeEvent(CType(e.Row,qictrlnewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qictrlnewRowChangingEvent) Is Nothing) Then
                RaiseEvent qictrlnewRowChanging(Me, New qictrlnewRowChangeEvent(CType(e.Row,qictrlnewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qictrlnewRowDeletedEvent) Is Nothing) Then
                RaiseEvent qictrlnewRowDeleted(Me, New qictrlnewRowChangeEvent(CType(e.Row,qictrlnewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qictrlnewRowDeletingEvent) Is Nothing) Then
                RaiseEvent qictrlnewRowDeleting(Me, New qictrlnewRowChangeEvent(CType(e.Row,qictrlnewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveqictrlnewRow(ByVal row As qictrlnewRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "qictrlnewDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class qictrloldDataTable
        Inherits Global.System.Data.TypedTableBase(Of qictrloldRow)
        
        Private columnquoteno As Global.System.Data.DataColumn
        
        Private columnqdate As Global.System.Data.DataColumn
        
        Private columncust_ref As Global.System.Data.DataColumn
        
        Private columncust_date As Global.System.Data.DataColumn
        
        Private columnaccountno As Global.System.Data.DataColumn
        
        Private columns_name As Global.System.Data.DataColumn
        
        Private columncontact As Global.System.Data.DataColumn
        
        Private columnholdnote As Global.System.Data.DataColumn
        
        Private columninvoice As Global.System.Data.DataColumn
        
        Private columnidate As Global.System.Data.DataColumn
        
        Private columnediscpc As Global.System.Data.DataColumn
        
        Private columnediscount As Global.System.Data.DataColumn
        
        Private columniaddr As Global.System.Data.DataColumn
        
        Private columndaddr As Global.System.Data.DataColumn
        
        Private columnsrequmnt As Global.System.Data.DataColumn
        
        Private columntermdays As Global.System.Data.DataColumn
        
        Private columnterms As Global.System.Data.DataColumn
        
        Private columnshipment As Global.System.Data.DataColumn
        
        Private columncarriage As Global.System.Data.DataColumn
        
        Private columnpacking As Global.System.Data.DataColumn
        
        Private columnvatpc As Global.System.Data.DataColumn
        
        Private columneurovat As Global.System.Data.DataColumn
        
        Private columnvatamt As Global.System.Data.DataColumn
        
        Private columnt_parts As Global.System.Data.DataColumn
        
        Private columnt_cost As Global.System.Data.DataColumn
        
        Private columns_pdate As Global.System.Data.DataColumn
        
        Private columns_paid As Global.System.Data.DataColumn
        
        Private columncpercent As Global.System.Data.DataColumn
        
        Private columnccard As Global.System.Data.DataColumn
        
        Private columns_adjust As Global.System.Data.DataColumn
        
        Private columns_acode As Global.System.Data.DataColumn
        
        Private columnentrykd As Global.System.Data.DataColumn
        
        Private columninvcurcy As Global.System.Data.DataColumn
        
        Private columninvrexch As Global.System.Data.DataColumn
        
        Private columnback2back As Global.System.Data.DataColumn
        
        Private columnphone As Global.System.Data.DataColumn
        
        Private columnfax As Global.System.Data.DataColumn
        
        Private columnemail As Global.System.Data.DataColumn
        
        Private columnbustype As Global.System.Data.DataColumn
        
        Private columnqiwho As Global.System.Data.DataColumn
        
        Private columnqiuse As Global.System.Data.DataColumn
        
        Private columntimestamp_column As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "qictrlold"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property quotenoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnquoteno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property cust_refColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncust_ref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property cust_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncust_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property accountnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccountno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property s_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property contactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property holdnoteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnholdnote
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property invoiceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninvoice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property idateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ediscpcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnediscpc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ediscountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnediscount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iaddrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniaddr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property daddrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndaddr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property srequmntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrequmnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property termdaysColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntermdays
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property termsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnterms
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property shipmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnshipment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property carriageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncarriage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property packingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpacking
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property vatpcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatpc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property eurovatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneurovat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property vatamtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatamt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property t_partsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnt_parts
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property t_costColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnt_cost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property s_pdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_pdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property s_paidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_paid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property cpercentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncpercent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ccardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnccard
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property s_adjustColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_adjust
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property s_acodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_acode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property entrykdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentrykd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property invcurcyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninvcurcy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property invrexchColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninvrexch
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property back2backColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnback2back
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property phoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnphone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property faxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property bustypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbustype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qiwhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqiwho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qiuseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqiuse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property timestamp_columnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimestamp_column
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As qictrloldRow
            Get
                Return CType(Me.Rows(index),qictrloldRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event qictrloldRowChanging As qictrloldRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event qictrloldRowChanged As qictrloldRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event qictrloldRowDeleting As qictrloldRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event qictrloldRowDeleted As qictrloldRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddqictrloldRow(ByVal row As qictrloldRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddqictrloldRow( _
                    ByVal quoteno As String,  _
                    ByVal qdate As Date,  _
                    ByVal cust_ref As String,  _
                    ByVal cust_date As Date,  _
                    ByVal accountno As String,  _
                    ByVal s_name As String,  _
                    ByVal contact As String,  _
                    ByVal holdnote As String,  _
                    ByVal invoice As String,  _
                    ByVal idate As Date,  _
                    ByVal ediscpc As Decimal,  _
                    ByVal ediscount As Decimal,  _
                    ByVal iaddr As String,  _
                    ByVal daddr As String,  _
                    ByVal srequmnt As String,  _
                    ByVal termdays As Decimal,  _
                    ByVal terms As String,  _
                    ByVal shipment As String,  _
                    ByVal carriage As Decimal,  _
                    ByVal packing As Decimal,  _
                    ByVal vatpc As Decimal,  _
                    ByVal eurovat As String,  _
                    ByVal vatamt As Decimal,  _
                    ByVal t_parts As Decimal,  _
                    ByVal t_cost As Decimal,  _
                    ByVal s_pdate As Date,  _
                    ByVal s_paid As Decimal,  _
                    ByVal cpercent As Decimal,  _
                    ByVal ccard As Decimal,  _
                    ByVal s_adjust As Decimal,  _
                    ByVal s_acode As String,  _
                    ByVal entrykd As String,  _
                    ByVal invcurcy As String,  _
                    ByVal invrexch As Decimal,  _
                    ByVal back2back As Boolean,  _
                    ByVal phone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal bustype As String,  _
                    ByVal qiwho As String,  _
                    ByVal qiuse As String,  _
                    ByVal timestamp_column() As Byte) As qictrloldRow
            Dim rowqictrloldRow As qictrloldRow = CType(Me.NewRow,qictrloldRow)
            Dim columnValuesArray() As Object = New Object() {quoteno, qdate, cust_ref, cust_date, accountno, s_name, contact, holdnote, invoice, idate, ediscpc, ediscount, iaddr, daddr, srequmnt, termdays, terms, shipment, carriage, packing, vatpc, eurovat, vatamt, t_parts, t_cost, s_pdate, s_paid, cpercent, ccard, s_adjust, s_acode, entrykd, invcurcy, invrexch, back2back, phone, fax, email, bustype, qiwho, qiuse, timestamp_column, Nothing}
            rowqictrloldRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowqictrloldRow)
            Return rowqictrloldRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As qictrloldRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),qictrloldRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As qictrloldDataTable = CType(MyBase.Clone,qictrloldDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New qictrloldDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnquoteno = MyBase.Columns("quoteno")
            Me.columnqdate = MyBase.Columns("qdate")
            Me.columncust_ref = MyBase.Columns("cust_ref")
            Me.columncust_date = MyBase.Columns("cust_date")
            Me.columnaccountno = MyBase.Columns("accountno")
            Me.columns_name = MyBase.Columns("s_name")
            Me.columncontact = MyBase.Columns("contact")
            Me.columnholdnote = MyBase.Columns("holdnote")
            Me.columninvoice = MyBase.Columns("invoice")
            Me.columnidate = MyBase.Columns("idate")
            Me.columnediscpc = MyBase.Columns("ediscpc")
            Me.columnediscount = MyBase.Columns("ediscount")
            Me.columniaddr = MyBase.Columns("iaddr")
            Me.columndaddr = MyBase.Columns("daddr")
            Me.columnsrequmnt = MyBase.Columns("srequmnt")
            Me.columntermdays = MyBase.Columns("termdays")
            Me.columnterms = MyBase.Columns("terms")
            Me.columnshipment = MyBase.Columns("shipment")
            Me.columncarriage = MyBase.Columns("carriage")
            Me.columnpacking = MyBase.Columns("packing")
            Me.columnvatpc = MyBase.Columns("vatpc")
            Me.columneurovat = MyBase.Columns("eurovat")
            Me.columnvatamt = MyBase.Columns("vatamt")
            Me.columnt_parts = MyBase.Columns("t_parts")
            Me.columnt_cost = MyBase.Columns("t_cost")
            Me.columns_pdate = MyBase.Columns("s_pdate")
            Me.columns_paid = MyBase.Columns("s_paid")
            Me.columncpercent = MyBase.Columns("cpercent")
            Me.columnccard = MyBase.Columns("ccard")
            Me.columns_adjust = MyBase.Columns("s_adjust")
            Me.columns_acode = MyBase.Columns("s_acode")
            Me.columnentrykd = MyBase.Columns("entrykd")
            Me.columninvcurcy = MyBase.Columns("invcurcy")
            Me.columninvrexch = MyBase.Columns("invrexch")
            Me.columnback2back = MyBase.Columns("back2back")
            Me.columnphone = MyBase.Columns("phone")
            Me.columnfax = MyBase.Columns("fax")
            Me.columnemail = MyBase.Columns("email")
            Me.columnbustype = MyBase.Columns("bustype")
            Me.columnqiwho = MyBase.Columns("qiwho")
            Me.columnqiuse = MyBase.Columns("qiuse")
            Me.columntimestamp_column = MyBase.Columns("timestamp_column")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnquoteno = New Global.System.Data.DataColumn("quoteno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquoteno)
            Me.columnqdate = New Global.System.Data.DataColumn("qdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqdate)
            Me.columncust_ref = New Global.System.Data.DataColumn("cust_ref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncust_ref)
            Me.columncust_date = New Global.System.Data.DataColumn("cust_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncust_date)
            Me.columnaccountno = New Global.System.Data.DataColumn("accountno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccountno)
            Me.columns_name = New Global.System.Data.DataColumn("s_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_name)
            Me.columncontact = New Global.System.Data.DataColumn("contact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontact)
            Me.columnholdnote = New Global.System.Data.DataColumn("holdnote", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnholdnote)
            Me.columninvoice = New Global.System.Data.DataColumn("invoice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninvoice)
            Me.columnidate = New Global.System.Data.DataColumn("idate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidate)
            Me.columnediscpc = New Global.System.Data.DataColumn("ediscpc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnediscpc)
            Me.columnediscount = New Global.System.Data.DataColumn("ediscount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnediscount)
            Me.columniaddr = New Global.System.Data.DataColumn("iaddr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniaddr)
            Me.columndaddr = New Global.System.Data.DataColumn("daddr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndaddr)
            Me.columnsrequmnt = New Global.System.Data.DataColumn("srequmnt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrequmnt)
            Me.columntermdays = New Global.System.Data.DataColumn("termdays", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntermdays)
            Me.columnterms = New Global.System.Data.DataColumn("terms", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnterms)
            Me.columnshipment = New Global.System.Data.DataColumn("shipment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnshipment)
            Me.columncarriage = New Global.System.Data.DataColumn("carriage", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncarriage)
            Me.columnpacking = New Global.System.Data.DataColumn("packing", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpacking)
            Me.columnvatpc = New Global.System.Data.DataColumn("vatpc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatpc)
            Me.columneurovat = New Global.System.Data.DataColumn("eurovat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneurovat)
            Me.columnvatamt = New Global.System.Data.DataColumn("vatamt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatamt)
            Me.columnt_parts = New Global.System.Data.DataColumn("t_parts", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnt_parts)
            Me.columnt_cost = New Global.System.Data.DataColumn("t_cost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnt_cost)
            Me.columns_pdate = New Global.System.Data.DataColumn("s_pdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_pdate)
            Me.columns_paid = New Global.System.Data.DataColumn("s_paid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_paid)
            Me.columncpercent = New Global.System.Data.DataColumn("cpercent", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncpercent)
            Me.columnccard = New Global.System.Data.DataColumn("ccard", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnccard)
            Me.columns_adjust = New Global.System.Data.DataColumn("s_adjust", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_adjust)
            Me.columns_acode = New Global.System.Data.DataColumn("s_acode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_acode)
            Me.columnentrykd = New Global.System.Data.DataColumn("entrykd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentrykd)
            Me.columninvcurcy = New Global.System.Data.DataColumn("invcurcy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninvcurcy)
            Me.columninvrexch = New Global.System.Data.DataColumn("invrexch", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninvrexch)
            Me.columnback2back = New Global.System.Data.DataColumn("back2back", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnback2back)
            Me.columnphone = New Global.System.Data.DataColumn("phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnphone)
            Me.columnfax = New Global.System.Data.DataColumn("fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfax)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.columnbustype = New Global.System.Data.DataColumn("bustype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbustype)
            Me.columnqiwho = New Global.System.Data.DataColumn("qiwho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqiwho)
            Me.columnqiuse = New Global.System.Data.DataColumn("qiuse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqiuse)
            Me.columntimestamp_column = New Global.System.Data.DataColumn("timestamp_column", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimestamp_column)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnquoteno.AllowDBNull = false
            Me.columnquoteno.MaxLength = 8
            Me.columnqdate.AllowDBNull = false
            Me.columncust_ref.AllowDBNull = false
            Me.columncust_ref.MaxLength = 20
            Me.columncust_date.AllowDBNull = false
            Me.columnaccountno.AllowDBNull = false
            Me.columnaccountno.MaxLength = 5
            Me.columns_name.AllowDBNull = false
            Me.columns_name.MaxLength = 30
            Me.columncontact.AllowDBNull = false
            Me.columncontact.MaxLength = 30
            Me.columnholdnote.AllowDBNull = false
            Me.columnholdnote.MaxLength = 5
            Me.columninvoice.AllowDBNull = false
            Me.columninvoice.MaxLength = 5
            Me.columnidate.AllowDBNull = false
            Me.columnediscpc.AllowDBNull = false
            Me.columnediscount.AllowDBNull = false
            Me.columniaddr.AllowDBNull = false
            Me.columniaddr.MaxLength = 2147483647
            Me.columndaddr.AllowDBNull = false
            Me.columndaddr.MaxLength = 2147483647
            Me.columnsrequmnt.AllowDBNull = false
            Me.columnsrequmnt.MaxLength = 2147483647
            Me.columntermdays.AllowDBNull = false
            Me.columnterms.AllowDBNull = false
            Me.columnterms.MaxLength = 30
            Me.columnshipment.AllowDBNull = false
            Me.columnshipment.MaxLength = 40
            Me.columncarriage.AllowDBNull = false
            Me.columnpacking.AllowDBNull = false
            Me.columnvatpc.AllowDBNull = false
            Me.columneurovat.AllowDBNull = false
            Me.columneurovat.MaxLength = 15
            Me.columnvatamt.AllowDBNull = false
            Me.columnt_parts.AllowDBNull = false
            Me.columnt_cost.AllowDBNull = false
            Me.columns_pdate.AllowDBNull = false
            Me.columns_paid.AllowDBNull = false
            Me.columncpercent.AllowDBNull = false
            Me.columnccard.AllowDBNull = false
            Me.columns_adjust.AllowDBNull = false
            Me.columns_acode.AllowDBNull = false
            Me.columns_acode.MaxLength = 8
            Me.columnentrykd.AllowDBNull = false
            Me.columnentrykd.MaxLength = 1
            Me.columninvcurcy.AllowDBNull = false
            Me.columninvcurcy.MaxLength = 3
            Me.columninvrexch.AllowDBNull = false
            Me.columnback2back.AllowDBNull = false
            Me.columnphone.AllowDBNull = false
            Me.columnphone.MaxLength = 15
            Me.columnfax.AllowDBNull = false
            Me.columnfax.MaxLength = 15
            Me.columnemail.AllowDBNull = false
            Me.columnemail.MaxLength = 40
            Me.columnbustype.AllowDBNull = false
            Me.columnbustype.MaxLength = 1
            Me.columnqiwho.AllowDBNull = false
            Me.columnqiwho.MaxLength = 5
            Me.columnqiuse.AllowDBNull = false
            Me.columnqiuse.MaxLength = 1
            Me.columntimestamp_column.ReadOnly = true
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewqictrloldRow() As qictrloldRow
            Return CType(Me.NewRow,qictrloldRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New qictrloldRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(qictrloldRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qictrloldRowChangedEvent) Is Nothing) Then
                RaiseEvent qictrloldRowChanged(Me, New qictrloldRowChangeEvent(CType(e.Row,qictrloldRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qictrloldRowChangingEvent) Is Nothing) Then
                RaiseEvent qictrloldRowChanging(Me, New qictrloldRowChangeEvent(CType(e.Row,qictrloldRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qictrloldRowDeletedEvent) Is Nothing) Then
                RaiseEvent qictrloldRowDeleted(Me, New qictrloldRowChangeEvent(CType(e.Row,qictrloldRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qictrloldRowDeletingEvent) Is Nothing) Then
                RaiseEvent qictrloldRowDeleting(Me, New qictrloldRowChangeEvent(CType(e.Row,qictrloldRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveqictrloldRow(ByVal row As qictrloldRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "qictrloldDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class qictrlold6DataTable
        Inherits Global.System.Data.TypedTableBase(Of qictrlold6Row)
        
        Private columnquoteno As Global.System.Data.DataColumn
        
        Private columnqdate As Global.System.Data.DataColumn
        
        Private columncust_ref As Global.System.Data.DataColumn
        
        Private columncust_date As Global.System.Data.DataColumn
        
        Private columnaccountno As Global.System.Data.DataColumn
        
        Private columns_name As Global.System.Data.DataColumn
        
        Private columncontact As Global.System.Data.DataColumn
        
        Private columnholdnote As Global.System.Data.DataColumn
        
        Private columninvoice As Global.System.Data.DataColumn
        
        Private columnidate As Global.System.Data.DataColumn
        
        Private columnediscpc As Global.System.Data.DataColumn
        
        Private columnediscount As Global.System.Data.DataColumn
        
        Private columniaddr As Global.System.Data.DataColumn
        
        Private columndaddr As Global.System.Data.DataColumn
        
        Private columnsrequmnt As Global.System.Data.DataColumn
        
        Private columntermdays As Global.System.Data.DataColumn
        
        Private columnterms As Global.System.Data.DataColumn
        
        Private columnshipment As Global.System.Data.DataColumn
        
        Private columncarriage As Global.System.Data.DataColumn
        
        Private columnpacking As Global.System.Data.DataColumn
        
        Private columnvatpc As Global.System.Data.DataColumn
        
        Private columneurovat As Global.System.Data.DataColumn
        
        Private columnvatamt As Global.System.Data.DataColumn
        
        Private columnt_parts As Global.System.Data.DataColumn
        
        Private columnt_cost As Global.System.Data.DataColumn
        
        Private columns_pdate As Global.System.Data.DataColumn
        
        Private columns_paid As Global.System.Data.DataColumn
        
        Private columncpercent As Global.System.Data.DataColumn
        
        Private columnccard As Global.System.Data.DataColumn
        
        Private columns_adjust As Global.System.Data.DataColumn
        
        Private columns_acode As Global.System.Data.DataColumn
        
        Private columnentrykd As Global.System.Data.DataColumn
        
        Private columninvcurcy As Global.System.Data.DataColumn
        
        Private columninvrexch As Global.System.Data.DataColumn
        
        Private columnback2back As Global.System.Data.DataColumn
        
        Private columnphone As Global.System.Data.DataColumn
        
        Private columnfax As Global.System.Data.DataColumn
        
        Private columnemail As Global.System.Data.DataColumn
        
        Private columnbustype As Global.System.Data.DataColumn
        
        Private columnqiwho As Global.System.Data.DataColumn
        
        Private columnqiuse As Global.System.Data.DataColumn
        
        Private columntimestamp_column As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "qictrlold6"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property quotenoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnquoteno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property cust_refColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncust_ref
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property cust_dateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncust_date
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property accountnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccountno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property s_nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_name
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property contactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property holdnoteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnholdnote
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property invoiceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninvoice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property idateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ediscpcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnediscpc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ediscountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnediscount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iaddrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniaddr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property daddrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndaddr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property srequmntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsrequmnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property termdaysColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntermdays
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property termsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnterms
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property shipmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnshipment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property carriageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncarriage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property packingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpacking
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property vatpcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatpc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property eurovatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneurovat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property vatamtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatamt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property t_partsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnt_parts
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property t_costColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnt_cost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property s_pdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_pdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property s_paidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_paid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property cpercentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncpercent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ccardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnccard
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property s_adjustColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_adjust
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property s_acodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columns_acode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property entrykdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentrykd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property invcurcyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninvcurcy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property invrexchColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninvrexch
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property back2backColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnback2back
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property phoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnphone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property faxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property bustypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbustype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qiwhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqiwho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qiuseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqiuse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property timestamp_columnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimestamp_column
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As qictrlold6Row
            Get
                Return CType(Me.Rows(index),qictrlold6Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event qictrlold6RowChanging As qictrlold6RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event qictrlold6RowChanged As qictrlold6RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event qictrlold6RowDeleting As qictrlold6RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event qictrlold6RowDeleted As qictrlold6RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub Addqictrlold6Row(ByVal row As qictrlold6Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function Addqictrlold6Row( _
                    ByVal quoteno As String,  _
                    ByVal qdate As Date,  _
                    ByVal cust_ref As String,  _
                    ByVal cust_date As Date,  _
                    ByVal accountno As String,  _
                    ByVal s_name As String,  _
                    ByVal contact As String,  _
                    ByVal holdnote As String,  _
                    ByVal invoice As String,  _
                    ByVal idate As Date,  _
                    ByVal ediscpc As Decimal,  _
                    ByVal ediscount As Decimal,  _
                    ByVal iaddr As String,  _
                    ByVal daddr As String,  _
                    ByVal srequmnt As String,  _
                    ByVal termdays As Decimal,  _
                    ByVal terms As String,  _
                    ByVal shipment As String,  _
                    ByVal carriage As Decimal,  _
                    ByVal packing As Decimal,  _
                    ByVal vatpc As Decimal,  _
                    ByVal eurovat As String,  _
                    ByVal vatamt As Decimal,  _
                    ByVal t_parts As Decimal,  _
                    ByVal t_cost As Decimal,  _
                    ByVal s_pdate As Date,  _
                    ByVal s_paid As Decimal,  _
                    ByVal cpercent As Decimal,  _
                    ByVal ccard As Decimal,  _
                    ByVal s_adjust As Decimal,  _
                    ByVal s_acode As String,  _
                    ByVal entrykd As String,  _
                    ByVal invcurcy As String,  _
                    ByVal invrexch As Decimal,  _
                    ByVal back2back As Boolean,  _
                    ByVal phone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal bustype As String,  _
                    ByVal qiwho As String,  _
                    ByVal qiuse As String,  _
                    ByVal timestamp_column() As Byte) As qictrlold6Row
            Dim rowqictrlold6Row As qictrlold6Row = CType(Me.NewRow,qictrlold6Row)
            Dim columnValuesArray() As Object = New Object() {quoteno, qdate, cust_ref, cust_date, accountno, s_name, contact, holdnote, invoice, idate, ediscpc, ediscount, iaddr, daddr, srequmnt, termdays, terms, shipment, carriage, packing, vatpc, eurovat, vatamt, t_parts, t_cost, s_pdate, s_paid, cpercent, ccard, s_adjust, s_acode, entrykd, invcurcy, invrexch, back2back, phone, fax, email, bustype, qiwho, qiuse, timestamp_column, Nothing}
            rowqictrlold6Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowqictrlold6Row)
            Return rowqictrlold6Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As qictrlold6Row
            Return CType(Me.Rows.Find(New Object() {UniqueID}),qictrlold6Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As qictrlold6DataTable = CType(MyBase.Clone,qictrlold6DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New qictrlold6DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnquoteno = MyBase.Columns("quoteno")
            Me.columnqdate = MyBase.Columns("qdate")
            Me.columncust_ref = MyBase.Columns("cust_ref")
            Me.columncust_date = MyBase.Columns("cust_date")
            Me.columnaccountno = MyBase.Columns("accountno")
            Me.columns_name = MyBase.Columns("s_name")
            Me.columncontact = MyBase.Columns("contact")
            Me.columnholdnote = MyBase.Columns("holdnote")
            Me.columninvoice = MyBase.Columns("invoice")
            Me.columnidate = MyBase.Columns("idate")
            Me.columnediscpc = MyBase.Columns("ediscpc")
            Me.columnediscount = MyBase.Columns("ediscount")
            Me.columniaddr = MyBase.Columns("iaddr")
            Me.columndaddr = MyBase.Columns("daddr")
            Me.columnsrequmnt = MyBase.Columns("srequmnt")
            Me.columntermdays = MyBase.Columns("termdays")
            Me.columnterms = MyBase.Columns("terms")
            Me.columnshipment = MyBase.Columns("shipment")
            Me.columncarriage = MyBase.Columns("carriage")
            Me.columnpacking = MyBase.Columns("packing")
            Me.columnvatpc = MyBase.Columns("vatpc")
            Me.columneurovat = MyBase.Columns("eurovat")
            Me.columnvatamt = MyBase.Columns("vatamt")
            Me.columnt_parts = MyBase.Columns("t_parts")
            Me.columnt_cost = MyBase.Columns("t_cost")
            Me.columns_pdate = MyBase.Columns("s_pdate")
            Me.columns_paid = MyBase.Columns("s_paid")
            Me.columncpercent = MyBase.Columns("cpercent")
            Me.columnccard = MyBase.Columns("ccard")
            Me.columns_adjust = MyBase.Columns("s_adjust")
            Me.columns_acode = MyBase.Columns("s_acode")
            Me.columnentrykd = MyBase.Columns("entrykd")
            Me.columninvcurcy = MyBase.Columns("invcurcy")
            Me.columninvrexch = MyBase.Columns("invrexch")
            Me.columnback2back = MyBase.Columns("back2back")
            Me.columnphone = MyBase.Columns("phone")
            Me.columnfax = MyBase.Columns("fax")
            Me.columnemail = MyBase.Columns("email")
            Me.columnbustype = MyBase.Columns("bustype")
            Me.columnqiwho = MyBase.Columns("qiwho")
            Me.columnqiuse = MyBase.Columns("qiuse")
            Me.columntimestamp_column = MyBase.Columns("timestamp_column")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnquoteno = New Global.System.Data.DataColumn("quoteno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquoteno)
            Me.columnqdate = New Global.System.Data.DataColumn("qdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqdate)
            Me.columncust_ref = New Global.System.Data.DataColumn("cust_ref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncust_ref)
            Me.columncust_date = New Global.System.Data.DataColumn("cust_date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncust_date)
            Me.columnaccountno = New Global.System.Data.DataColumn("accountno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccountno)
            Me.columns_name = New Global.System.Data.DataColumn("s_name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_name)
            Me.columncontact = New Global.System.Data.DataColumn("contact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontact)
            Me.columnholdnote = New Global.System.Data.DataColumn("holdnote", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnholdnote)
            Me.columninvoice = New Global.System.Data.DataColumn("invoice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninvoice)
            Me.columnidate = New Global.System.Data.DataColumn("idate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidate)
            Me.columnediscpc = New Global.System.Data.DataColumn("ediscpc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnediscpc)
            Me.columnediscount = New Global.System.Data.DataColumn("ediscount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnediscount)
            Me.columniaddr = New Global.System.Data.DataColumn("iaddr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniaddr)
            Me.columndaddr = New Global.System.Data.DataColumn("daddr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndaddr)
            Me.columnsrequmnt = New Global.System.Data.DataColumn("srequmnt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsrequmnt)
            Me.columntermdays = New Global.System.Data.DataColumn("termdays", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntermdays)
            Me.columnterms = New Global.System.Data.DataColumn("terms", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnterms)
            Me.columnshipment = New Global.System.Data.DataColumn("shipment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnshipment)
            Me.columncarriage = New Global.System.Data.DataColumn("carriage", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncarriage)
            Me.columnpacking = New Global.System.Data.DataColumn("packing", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpacking)
            Me.columnvatpc = New Global.System.Data.DataColumn("vatpc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatpc)
            Me.columneurovat = New Global.System.Data.DataColumn("eurovat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneurovat)
            Me.columnvatamt = New Global.System.Data.DataColumn("vatamt", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatamt)
            Me.columnt_parts = New Global.System.Data.DataColumn("t_parts", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnt_parts)
            Me.columnt_cost = New Global.System.Data.DataColumn("t_cost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnt_cost)
            Me.columns_pdate = New Global.System.Data.DataColumn("s_pdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_pdate)
            Me.columns_paid = New Global.System.Data.DataColumn("s_paid", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_paid)
            Me.columncpercent = New Global.System.Data.DataColumn("cpercent", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncpercent)
            Me.columnccard = New Global.System.Data.DataColumn("ccard", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnccard)
            Me.columns_adjust = New Global.System.Data.DataColumn("s_adjust", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_adjust)
            Me.columns_acode = New Global.System.Data.DataColumn("s_acode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columns_acode)
            Me.columnentrykd = New Global.System.Data.DataColumn("entrykd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentrykd)
            Me.columninvcurcy = New Global.System.Data.DataColumn("invcurcy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninvcurcy)
            Me.columninvrexch = New Global.System.Data.DataColumn("invrexch", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninvrexch)
            Me.columnback2back = New Global.System.Data.DataColumn("back2back", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnback2back)
            Me.columnphone = New Global.System.Data.DataColumn("phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnphone)
            Me.columnfax = New Global.System.Data.DataColumn("fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfax)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.columnbustype = New Global.System.Data.DataColumn("bustype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbustype)
            Me.columnqiwho = New Global.System.Data.DataColumn("qiwho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqiwho)
            Me.columnqiuse = New Global.System.Data.DataColumn("qiuse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqiuse)
            Me.columntimestamp_column = New Global.System.Data.DataColumn("timestamp_column", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimestamp_column)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnquoteno.AllowDBNull = false
            Me.columnquoteno.MaxLength = 8
            Me.columnqdate.AllowDBNull = false
            Me.columncust_ref.AllowDBNull = false
            Me.columncust_ref.MaxLength = 20
            Me.columncust_date.AllowDBNull = false
            Me.columnaccountno.AllowDBNull = false
            Me.columnaccountno.MaxLength = 5
            Me.columns_name.AllowDBNull = false
            Me.columns_name.MaxLength = 30
            Me.columncontact.AllowDBNull = false
            Me.columncontact.MaxLength = 30
            Me.columnholdnote.AllowDBNull = false
            Me.columnholdnote.MaxLength = 5
            Me.columninvoice.AllowDBNull = false
            Me.columninvoice.MaxLength = 5
            Me.columnidate.AllowDBNull = false
            Me.columnediscpc.AllowDBNull = false
            Me.columnediscount.AllowDBNull = false
            Me.columniaddr.AllowDBNull = false
            Me.columniaddr.MaxLength = 2147483647
            Me.columndaddr.AllowDBNull = false
            Me.columndaddr.MaxLength = 2147483647
            Me.columnsrequmnt.AllowDBNull = false
            Me.columnsrequmnt.MaxLength = 2147483647
            Me.columntermdays.AllowDBNull = false
            Me.columnterms.AllowDBNull = false
            Me.columnterms.MaxLength = 30
            Me.columnshipment.AllowDBNull = false
            Me.columnshipment.MaxLength = 40
            Me.columncarriage.AllowDBNull = false
            Me.columnpacking.AllowDBNull = false
            Me.columnvatpc.AllowDBNull = false
            Me.columneurovat.AllowDBNull = false
            Me.columneurovat.MaxLength = 15
            Me.columnvatamt.AllowDBNull = false
            Me.columnt_parts.AllowDBNull = false
            Me.columnt_cost.AllowDBNull = false
            Me.columns_pdate.AllowDBNull = false
            Me.columns_paid.AllowDBNull = false
            Me.columncpercent.AllowDBNull = false
            Me.columnccard.AllowDBNull = false
            Me.columns_adjust.AllowDBNull = false
            Me.columns_acode.AllowDBNull = false
            Me.columns_acode.MaxLength = 8
            Me.columnentrykd.AllowDBNull = false
            Me.columnentrykd.MaxLength = 1
            Me.columninvcurcy.AllowDBNull = false
            Me.columninvcurcy.MaxLength = 3
            Me.columninvrexch.AllowDBNull = false
            Me.columnback2back.AllowDBNull = false
            Me.columnphone.AllowDBNull = false
            Me.columnphone.MaxLength = 15
            Me.columnfax.AllowDBNull = false
            Me.columnfax.MaxLength = 15
            Me.columnemail.AllowDBNull = false
            Me.columnemail.MaxLength = 40
            Me.columnbustype.AllowDBNull = false
            Me.columnbustype.MaxLength = 1
            Me.columnqiwho.AllowDBNull = false
            Me.columnqiwho.MaxLength = 5
            Me.columnqiuse.AllowDBNull = false
            Me.columnqiuse.MaxLength = 1
            Me.columntimestamp_column.ReadOnly = true
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Newqictrlold6Row() As qictrlold6Row
            Return CType(Me.NewRow,qictrlold6Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New qictrlold6Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(qictrlold6Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.qictrlold6RowChangedEvent) Is Nothing) Then
                RaiseEvent qictrlold6RowChanged(Me, New qictrlold6RowChangeEvent(CType(e.Row,qictrlold6Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.qictrlold6RowChangingEvent) Is Nothing) Then
                RaiseEvent qictrlold6RowChanging(Me, New qictrlold6RowChangeEvent(CType(e.Row,qictrlold6Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.qictrlold6RowDeletedEvent) Is Nothing) Then
                RaiseEvent qictrlold6RowDeleted(Me, New qictrlold6RowChangeEvent(CType(e.Row,qictrlold6Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.qictrlold6RowDeletingEvent) Is Nothing) Then
                RaiseEvent qictrlold6RowDeleting(Me, New qictrlold6RowChangeEvent(CType(e.Row,qictrlold6Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Removeqictrlold6Row(ByVal row As qictrlold6Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "qictrlold6DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class quotedetailDataTable
        Inherits Global.System.Data.TypedTableBase(Of quotedetailRow)
        
        Private columnquote_no As Global.System.Data.DataColumn
        
        Private columnquote_suf As Global.System.Data.DataColumn
        
        Private columnqline_no As Global.System.Data.DataColumn
        
        Private columnquantity As Global.System.Data.DataColumn
        
        Private columnqpart_no As Global.System.Data.DataColumn
        
        Private columnqdesc As Global.System.Data.DataColumn
        
        Private columnqline_memo As Global.System.Data.DataColumn
        
        Private columnqvalue As Global.System.Data.DataColumn
        
        Private columnnonstock As Global.System.Data.DataColumn
        
        Private columntimestamp_column As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "quotedetail"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property quote_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnquote_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property quote_sufColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnquote_suf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qline_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqline_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property quantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnquantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qpart_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqpart_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qdescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqdesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qline_memoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqline_memo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qvalueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqvalue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property nonstockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnonstock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property timestamp_columnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimestamp_column
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As quotedetailRow
            Get
                Return CType(Me.Rows(index),quotedetailRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event quotedetailRowChanging As quotedetailRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event quotedetailRowChanged As quotedetailRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event quotedetailRowDeleting As quotedetailRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event quotedetailRowDeleted As quotedetailRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddquotedetailRow(ByVal row As quotedetailRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddquotedetailRow(ByVal quote_no As String, ByVal quote_suf As String, ByVal qline_no As String, ByVal quantity As Decimal, ByVal qpart_no As String, ByVal qdesc As String, ByVal qline_memo As String, ByVal qvalue As Decimal, ByVal nonstock As Boolean, ByVal timestamp_column() As Byte) As quotedetailRow
            Dim rowquotedetailRow As quotedetailRow = CType(Me.NewRow,quotedetailRow)
            Dim columnValuesArray() As Object = New Object() {quote_no, quote_suf, qline_no, quantity, qpart_no, qdesc, qline_memo, qvalue, nonstock, timestamp_column, Nothing}
            rowquotedetailRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowquotedetailRow)
            Return rowquotedetailRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As quotedetailRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),quotedetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As quotedetailDataTable = CType(MyBase.Clone,quotedetailDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New quotedetailDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnquote_no = MyBase.Columns("quote_no")
            Me.columnquote_suf = MyBase.Columns("quote_suf")
            Me.columnqline_no = MyBase.Columns("qline_no")
            Me.columnquantity = MyBase.Columns("quantity")
            Me.columnqpart_no = MyBase.Columns("qpart_no")
            Me.columnqdesc = MyBase.Columns("qdesc")
            Me.columnqline_memo = MyBase.Columns("qline_memo")
            Me.columnqvalue = MyBase.Columns("qvalue")
            Me.columnnonstock = MyBase.Columns("nonstock")
            Me.columntimestamp_column = MyBase.Columns("timestamp_column")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnquote_no = New Global.System.Data.DataColumn("quote_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquote_no)
            Me.columnquote_suf = New Global.System.Data.DataColumn("quote_suf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquote_suf)
            Me.columnqline_no = New Global.System.Data.DataColumn("qline_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqline_no)
            Me.columnquantity = New Global.System.Data.DataColumn("quantity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquantity)
            Me.columnqpart_no = New Global.System.Data.DataColumn("qpart_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqpart_no)
            Me.columnqdesc = New Global.System.Data.DataColumn("qdesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqdesc)
            Me.columnqline_memo = New Global.System.Data.DataColumn("qline_memo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqline_memo)
            Me.columnqvalue = New Global.System.Data.DataColumn("qvalue", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqvalue)
            Me.columnnonstock = New Global.System.Data.DataColumn("nonstock", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnonstock)
            Me.columntimestamp_column = New Global.System.Data.DataColumn("timestamp_column", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimestamp_column)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnquote_no.AllowDBNull = false
            Me.columnquote_no.MaxLength = 6
            Me.columnquote_suf.AllowDBNull = false
            Me.columnquote_suf.MaxLength = 2
            Me.columnqline_no.AllowDBNull = false
            Me.columnqline_no.MaxLength = 3
            Me.columnquantity.AllowDBNull = false
            Me.columnqpart_no.AllowDBNull = false
            Me.columnqpart_no.MaxLength = 20
            Me.columnqdesc.AllowDBNull = false
            Me.columnqdesc.MaxLength = 40
            Me.columnqline_memo.AllowDBNull = false
            Me.columnqline_memo.MaxLength = 2147483647
            Me.columnqvalue.AllowDBNull = false
            Me.columnnonstock.AllowDBNull = false
            Me.columntimestamp_column.ReadOnly = true
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewquotedetailRow() As quotedetailRow
            Return CType(Me.NewRow,quotedetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New quotedetailRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(quotedetailRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.quotedetailRowChangedEvent) Is Nothing) Then
                RaiseEvent quotedetailRowChanged(Me, New quotedetailRowChangeEvent(CType(e.Row,quotedetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.quotedetailRowChangingEvent) Is Nothing) Then
                RaiseEvent quotedetailRowChanging(Me, New quotedetailRowChangeEvent(CType(e.Row,quotedetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.quotedetailRowDeletedEvent) Is Nothing) Then
                RaiseEvent quotedetailRowDeleted(Me, New quotedetailRowChangeEvent(CType(e.Row,quotedetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.quotedetailRowDeletingEvent) Is Nothing) Then
                RaiseEvent quotedetailRowDeleting(Me, New quotedetailRowChangeEvent(CType(e.Row,quotedetailRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovequotedetailRow(ByVal row As quotedetailRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "quotedetailDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class quoteheadDataTable
        Inherits Global.System.Data.TypedTableBase(Of quoteheadRow)
        
        Private columnquote_no As Global.System.Data.DataColumn
        
        Private columnquote_suf As Global.System.Data.DataColumn
        
        Private columnqdate As Global.System.Data.DataColumn
        
        Private columnqheader As Global.System.Data.DataColumn
        
        Private columnqmemo1 As Global.System.Data.DataColumn
        
        Private columnqmemo2 As Global.System.Data.DataColumn
        
        Private columnqmemo3 As Global.System.Data.DataColumn
        
        Private columnqmemo4 As Global.System.Data.DataColumn
        
        Private columnqdisc As Global.System.Data.DataColumn
        
        Private columnqwho As Global.System.Data.DataColumn
        
        Private columnqinits As Global.System.Data.DataColumn
        
        Private columntimestamp_column As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "quotehead"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property quote_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnquote_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property quote_sufColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnquote_suf
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qheaderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqheader
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qmemo1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnqmemo1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qmemo2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnqmemo2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qmemo3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnqmemo3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qmemo4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnqmemo4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qdiscColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqdisc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qwhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqwho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property qinitsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqinits
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property timestamp_columnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimestamp_column
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As quoteheadRow
            Get
                Return CType(Me.Rows(index),quoteheadRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event quoteheadRowChanging As quoteheadRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event quoteheadRowChanged As quoteheadRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event quoteheadRowDeleting As quoteheadRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event quoteheadRowDeleted As quoteheadRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddquoteheadRow(ByVal row As quoteheadRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddquoteheadRow(ByVal quote_no As String, ByVal quote_suf As String, ByVal qdate As Date, ByVal qheader As String, ByVal qmemo1 As String, ByVal qmemo2 As String, ByVal qmemo3 As String, ByVal qmemo4 As String, ByVal qdisc As Boolean, ByVal qwho As String, ByVal qinits As String, ByVal timestamp_column() As Byte) As quoteheadRow
            Dim rowquoteheadRow As quoteheadRow = CType(Me.NewRow,quoteheadRow)
            Dim columnValuesArray() As Object = New Object() {quote_no, quote_suf, qdate, qheader, qmemo1, qmemo2, qmemo3, qmemo4, qdisc, qwho, qinits, timestamp_column, Nothing}
            rowquoteheadRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowquoteheadRow)
            Return rowquoteheadRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As quoteheadRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),quoteheadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As quoteheadDataTable = CType(MyBase.Clone,quoteheadDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New quoteheadDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnquote_no = MyBase.Columns("quote_no")
            Me.columnquote_suf = MyBase.Columns("quote_suf")
            Me.columnqdate = MyBase.Columns("qdate")
            Me.columnqheader = MyBase.Columns("qheader")
            Me.columnqmemo1 = MyBase.Columns("qmemo1")
            Me.columnqmemo2 = MyBase.Columns("qmemo2")
            Me.columnqmemo3 = MyBase.Columns("qmemo3")
            Me.columnqmemo4 = MyBase.Columns("qmemo4")
            Me.columnqdisc = MyBase.Columns("qdisc")
            Me.columnqwho = MyBase.Columns("qwho")
            Me.columnqinits = MyBase.Columns("qinits")
            Me.columntimestamp_column = MyBase.Columns("timestamp_column")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnquote_no = New Global.System.Data.DataColumn("quote_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquote_no)
            Me.columnquote_suf = New Global.System.Data.DataColumn("quote_suf", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquote_suf)
            Me.columnqdate = New Global.System.Data.DataColumn("qdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqdate)
            Me.columnqheader = New Global.System.Data.DataColumn("qheader", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqheader)
            Me.columnqmemo1 = New Global.System.Data.DataColumn("qmemo1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqmemo1)
            Me.columnqmemo2 = New Global.System.Data.DataColumn("qmemo2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqmemo2)
            Me.columnqmemo3 = New Global.System.Data.DataColumn("qmemo3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqmemo3)
            Me.columnqmemo4 = New Global.System.Data.DataColumn("qmemo4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqmemo4)
            Me.columnqdisc = New Global.System.Data.DataColumn("qdisc", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqdisc)
            Me.columnqwho = New Global.System.Data.DataColumn("qwho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqwho)
            Me.columnqinits = New Global.System.Data.DataColumn("qinits", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqinits)
            Me.columntimestamp_column = New Global.System.Data.DataColumn("timestamp_column", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimestamp_column)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnquote_no.AllowDBNull = false
            Me.columnquote_no.MaxLength = 6
            Me.columnquote_suf.AllowDBNull = false
            Me.columnquote_suf.MaxLength = 2
            Me.columnqdate.AllowDBNull = false
            Me.columnqheader.AllowDBNull = false
            Me.columnqheader.MaxLength = 40
            Me.columnqmemo1.AllowDBNull = false
            Me.columnqmemo1.MaxLength = 2147483647
            Me.columnqmemo2.AllowDBNull = false
            Me.columnqmemo2.MaxLength = 2147483647
            Me.columnqmemo3.AllowDBNull = false
            Me.columnqmemo3.MaxLength = 2147483647
            Me.columnqmemo4.AllowDBNull = false
            Me.columnqmemo4.MaxLength = 2147483647
            Me.columnqdisc.AllowDBNull = false
            Me.columnqwho.AllowDBNull = false
            Me.columnqwho.MaxLength = 5
            Me.columnqinits.AllowDBNull = false
            Me.columnqinits.MaxLength = 3
            Me.columntimestamp_column.ReadOnly = true
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewquoteheadRow() As quoteheadRow
            Return CType(Me.NewRow,quoteheadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New quoteheadRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(quoteheadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.quoteheadRowChangedEvent) Is Nothing) Then
                RaiseEvent quoteheadRowChanged(Me, New quoteheadRowChangeEvent(CType(e.Row,quoteheadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.quoteheadRowChangingEvent) Is Nothing) Then
                RaiseEvent quoteheadRowChanging(Me, New quoteheadRowChangeEvent(CType(e.Row,quoteheadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.quoteheadRowDeletedEvent) Is Nothing) Then
                RaiseEvent quoteheadRowDeleted(Me, New quoteheadRowChangeEvent(CType(e.Row,quoteheadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.quoteheadRowDeletingEvent) Is Nothing) Then
                RaiseEvent quoteheadRowDeleting(Me, New quoteheadRowChangeEvent(CType(e.Row,quoteheadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovequoteheadRow(ByVal row As quoteheadRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "quoteheadDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class statusDataTable
        Inherits Global.System.Data.TypedTableBase(Of statusRow)
        
        Private columnstatus As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "status"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As statusRow
            Get
                Return CType(Me.Rows(index),statusRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event statusRowChanging As statusRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event statusRowChanged As statusRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event statusRowDeleting As statusRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event statusRowDeleted As statusRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddstatusRow(ByVal row As statusRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddstatusRow(ByVal status As String) As statusRow
            Dim rowstatusRow As statusRow = CType(Me.NewRow,statusRow)
            Dim columnValuesArray() As Object = New Object() {status, Nothing}
            rowstatusRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowstatusRow)
            Return rowstatusRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As statusRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),statusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As statusDataTable = CType(MyBase.Clone,statusDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New statusDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnstatus = MyBase.Columns("status")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnstatus = New Global.System.Data.DataColumn("status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnstatus.AllowDBNull = false
            Me.columnstatus.MaxLength = 20
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewstatusRow() As statusRow
            Return CType(Me.NewRow,statusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New statusRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(statusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.statusRowChangedEvent) Is Nothing) Then
                RaiseEvent statusRowChanged(Me, New statusRowChangeEvent(CType(e.Row,statusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.statusRowChangingEvent) Is Nothing) Then
                RaiseEvent statusRowChanging(Me, New statusRowChangeEvent(CType(e.Row,statusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.statusRowDeletedEvent) Is Nothing) Then
                RaiseEvent statusRowDeleted(Me, New statusRowChangeEvent(CType(e.Row,statusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.statusRowDeletingEvent) Is Nothing) Then
                RaiseEvent statusRowDeleting(Me, New statusRowChangeEvent(CType(e.Row,statusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovestatusRow(ByVal row As statusRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "statusDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class teventsDataTable
        Inherits Global.System.Data.TypedTableBase(Of teventsRow)
        
        Private columneassetno As Global.System.Data.DataColumn
        
        Private columnedate As Global.System.Data.DataColumn
        
        Private columnevent As Global.System.Data.DataColumn
        
        Private columnedesc As Global.System.Data.DataColumn
        
        Private columnewho As Global.System.Data.DataColumn
        
        Private columneperiod As Global.System.Data.DataColumn
        
        Private columnecomplete As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tevents"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property eassetnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneassetno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property edateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnedate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property eventColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnevent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property edescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnedesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ewhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnewho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property eperiodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneperiod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ecompleteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnecomplete
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As teventsRow
            Get
                Return CType(Me.Rows(index),teventsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event teventsRowChanging As teventsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event teventsRowChanged As teventsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event teventsRowDeleting As teventsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event teventsRowDeleted As teventsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddteventsRow(ByVal row As teventsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddteventsRow(ByVal eassetno As String, ByVal edate As Date, ByVal _event As String, ByVal edesc As String, ByVal ewho As String, ByVal eperiod As String, ByVal ecomplete As String) As teventsRow
            Dim rowteventsRow As teventsRow = CType(Me.NewRow,teventsRow)
            Dim columnValuesArray() As Object = New Object() {eassetno, edate, _event, edesc, ewho, eperiod, ecomplete, Nothing}
            rowteventsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowteventsRow)
            Return rowteventsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As teventsRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),teventsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As teventsDataTable = CType(MyBase.Clone,teventsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New teventsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columneassetno = MyBase.Columns("eassetno")
            Me.columnedate = MyBase.Columns("edate")
            Me.columnevent = MyBase.Columns("event")
            Me.columnedesc = MyBase.Columns("edesc")
            Me.columnewho = MyBase.Columns("ewho")
            Me.columneperiod = MyBase.Columns("eperiod")
            Me.columnecomplete = MyBase.Columns("ecomplete")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columneassetno = New Global.System.Data.DataColumn("eassetno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneassetno)
            Me.columnedate = New Global.System.Data.DataColumn("edate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnedate)
            Me.columnevent = New Global.System.Data.DataColumn("event", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnevent.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "eventColumn")
            Me.columnevent.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnevent")
            Me.columnevent.ExtendedProperties.Add("Generator_UserColumnName", "event")
            MyBase.Columns.Add(Me.columnevent)
            Me.columnedesc = New Global.System.Data.DataColumn("edesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnedesc)
            Me.columnewho = New Global.System.Data.DataColumn("ewho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnewho)
            Me.columneperiod = New Global.System.Data.DataColumn("eperiod", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneperiod)
            Me.columnecomplete = New Global.System.Data.DataColumn("ecomplete", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnecomplete)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columneassetno.AllowDBNull = false
            Me.columneassetno.MaxLength = 6
            Me.columnedate.AllowDBNull = false
            Me.columnevent.AllowDBNull = false
            Me.columnevent.MaxLength = 20
            Me.columnedesc.AllowDBNull = false
            Me.columnedesc.MaxLength = 40
            Me.columnewho.AllowDBNull = false
            Me.columnewho.MaxLength = 20
            Me.columneperiod.AllowDBNull = false
            Me.columneperiod.MaxLength = 2
            Me.columnecomplete.AllowDBNull = false
            Me.columnecomplete.MaxLength = 3
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewteventsRow() As teventsRow
            Return CType(Me.NewRow,teventsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New teventsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(teventsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.teventsRowChangedEvent) Is Nothing) Then
                RaiseEvent teventsRowChanged(Me, New teventsRowChangeEvent(CType(e.Row,teventsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.teventsRowChangingEvent) Is Nothing) Then
                RaiseEvent teventsRowChanging(Me, New teventsRowChangeEvent(CType(e.Row,teventsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.teventsRowDeletedEvent) Is Nothing) Then
                RaiseEvent teventsRowDeleted(Me, New teventsRowChangeEvent(CType(e.Row,teventsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.teventsRowDeletingEvent) Is Nothing) Then
                RaiseEvent teventsRowDeleting(Me, New teventsRowChangeEvent(CType(e.Row,teventsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveteventsRow(ByVal row As teventsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "teventsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tran2DataTable
        Inherits Global.System.Data.TypedTableBase(Of tran2Row)
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columnaccount As Global.System.Data.DataColumn
        
        Private columnad1 As Global.System.Data.DataColumn
        
        Private columnad2 As Global.System.Data.DataColumn
        
        Private columnad3 As Global.System.Data.DataColumn
        
        Private columnad4 As Global.System.Data.DataColumn
        
        Private columnad5 As Global.System.Data.DataColumn
        
        Private columnphone As Global.System.Data.DataColumn
        
        Private columntelex As Global.System.Data.DataColumn
        
        Private columnfax As Global.System.Data.DataColumn
        
        Private columnemail As Global.System.Data.DataColumn
        
        Private columneurovat As Global.System.Data.DataColumn
        
        Private columnvatpayable As Global.System.Data.DataColumn
        
        Private columnifmemo As Global.System.Data.DataColumn
        
        Private columnproforma As Global.System.Data.DataColumn
        
        Private columnudate As Global.System.Data.DataColumn
        
        Private columntermdays As Global.System.Data.DataColumn
        
        Private columnentrytype As Global.System.Data.DataColumn
        
        Private columnnwho As Global.System.Data.DataColumn
        
        Private columninuse As Global.System.Data.DataColumn
        
        Private columnnew_upd As Global.System.Data.DataColumn
        
        Private columnpeg_pact As Global.System.Data.DataColumn
        
        Private columnpeg_lsale As Global.System.Data.DataColumn
        
        Private columnxcard As Global.System.Data.DataColumn
        
        Private columnpromo As Global.System.Data.DataColumn
        
        Private columnADDMEMO As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tran2"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property accountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ad1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnad1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ad2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnad2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ad3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnad3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ad4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnad4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ad5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnad5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property phoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnphone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property telexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntelex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property faxColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfax
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property emailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnemail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property eurovatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneurovat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property vatpayableColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatpayable
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ifmemoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnifmemo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property proformaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproforma
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property udateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnudate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property termdaysColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntermdays
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property entrytypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnentrytype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property nwhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnwho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property inuseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninuse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property new_updColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnew_upd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property peg_pactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpeg_pact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property peg_lsaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpeg_lsale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property xcardColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnxcard
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property promoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpromo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ADDMEMOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnADDMEMO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tran2Row
            Get
                Return CType(Me.Rows(index),tran2Row)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tran2RowChanging As tran2RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tran2RowChanged As tran2RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tran2RowDeleting As tran2RowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tran2RowDeleted As tran2RowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub Addtran2Row(ByVal row As tran2Row)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function Addtran2Row( _
                    ByVal name As String,  _
                    ByVal account As String,  _
                    ByVal ad1 As String,  _
                    ByVal ad2 As String,  _
                    ByVal ad3 As String,  _
                    ByVal ad4 As String,  _
                    ByVal ad5 As String,  _
                    ByVal phone As String,  _
                    ByVal telex As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal eurovat As String,  _
                    ByVal vatpayable As Boolean,  _
                    ByVal ifmemo As String,  _
                    ByVal proforma As String,  _
                    ByVal udate As String,  _
                    ByVal termdays As Decimal,  _
                    ByVal entrytype As String,  _
                    ByVal nwho As String,  _
                    ByVal inuse As String,  _
                    ByVal new_upd As Date,  _
                    ByVal peg_pact As String,  _
                    ByVal peg_lsale As String,  _
                    ByVal xcard As Boolean,  _
                    ByVal promo As Boolean,  _
                    ByVal ADDMEMO As String,  _
                    ByVal UniqueID As Decimal) As tran2Row
            Dim rowtran2Row As tran2Row = CType(Me.NewRow,tran2Row)
            Dim columnValuesArray() As Object = New Object() {name, account, ad1, ad2, ad3, ad4, ad5, phone, telex, fax, email, eurovat, vatpayable, ifmemo, proforma, udate, termdays, entrytype, nwho, inuse, new_upd, peg_pact, peg_lsale, xcard, promo, ADDMEMO, UniqueID}
            rowtran2Row.ItemArray = columnValuesArray
            Me.Rows.Add(rowtran2Row)
            Return rowtran2Row
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Decimal) As tran2Row
            Return CType(Me.Rows.Find(New Object() {UniqueID}),tran2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tran2DataTable = CType(MyBase.Clone,tran2DataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tran2DataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnname = MyBase.Columns("name")
            Me.columnaccount = MyBase.Columns("account")
            Me.columnad1 = MyBase.Columns("ad1")
            Me.columnad2 = MyBase.Columns("ad2")
            Me.columnad3 = MyBase.Columns("ad3")
            Me.columnad4 = MyBase.Columns("ad4")
            Me.columnad5 = MyBase.Columns("ad5")
            Me.columnphone = MyBase.Columns("phone")
            Me.columntelex = MyBase.Columns("telex")
            Me.columnfax = MyBase.Columns("fax")
            Me.columnemail = MyBase.Columns("email")
            Me.columneurovat = MyBase.Columns("eurovat")
            Me.columnvatpayable = MyBase.Columns("vatpayable")
            Me.columnifmemo = MyBase.Columns("ifmemo")
            Me.columnproforma = MyBase.Columns("proforma")
            Me.columnudate = MyBase.Columns("udate")
            Me.columntermdays = MyBase.Columns("termdays")
            Me.columnentrytype = MyBase.Columns("entrytype")
            Me.columnnwho = MyBase.Columns("nwho")
            Me.columninuse = MyBase.Columns("inuse")
            Me.columnnew_upd = MyBase.Columns("new_upd")
            Me.columnpeg_pact = MyBase.Columns("peg_pact")
            Me.columnpeg_lsale = MyBase.Columns("peg_lsale")
            Me.columnxcard = MyBase.Columns("xcard")
            Me.columnpromo = MyBase.Columns("promo")
            Me.columnADDMEMO = MyBase.Columns("ADDMEMO")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columnaccount = New Global.System.Data.DataColumn("account", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccount)
            Me.columnad1 = New Global.System.Data.DataColumn("ad1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnad1)
            Me.columnad2 = New Global.System.Data.DataColumn("ad2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnad2)
            Me.columnad3 = New Global.System.Data.DataColumn("ad3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnad3)
            Me.columnad4 = New Global.System.Data.DataColumn("ad4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnad4)
            Me.columnad5 = New Global.System.Data.DataColumn("ad5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnad5)
            Me.columnphone = New Global.System.Data.DataColumn("phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnphone)
            Me.columntelex = New Global.System.Data.DataColumn("telex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntelex)
            Me.columnfax = New Global.System.Data.DataColumn("fax", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfax)
            Me.columnemail = New Global.System.Data.DataColumn("email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnemail)
            Me.columneurovat = New Global.System.Data.DataColumn("eurovat", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneurovat)
            Me.columnvatpayable = New Global.System.Data.DataColumn("vatpayable", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatpayable)
            Me.columnifmemo = New Global.System.Data.DataColumn("ifmemo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnifmemo)
            Me.columnproforma = New Global.System.Data.DataColumn("proforma", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproforma)
            Me.columnudate = New Global.System.Data.DataColumn("udate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnudate)
            Me.columntermdays = New Global.System.Data.DataColumn("termdays", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntermdays)
            Me.columnentrytype = New Global.System.Data.DataColumn("entrytype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnentrytype)
            Me.columnnwho = New Global.System.Data.DataColumn("nwho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnwho)
            Me.columninuse = New Global.System.Data.DataColumn("inuse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninuse)
            Me.columnnew_upd = New Global.System.Data.DataColumn("new_upd", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnew_upd)
            Me.columnpeg_pact = New Global.System.Data.DataColumn("peg_pact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpeg_pact)
            Me.columnpeg_lsale = New Global.System.Data.DataColumn("peg_lsale", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpeg_lsale)
            Me.columnxcard = New Global.System.Data.DataColumn("xcard", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnxcard)
            Me.columnpromo = New Global.System.Data.DataColumn("promo", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpromo)
            Me.columnADDMEMO = New Global.System.Data.DataColumn("ADDMEMO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnADDMEMO)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnname.MaxLength = 40
            Me.columnaccount.AllowDBNull = false
            Me.columnaccount.MaxLength = 4
            Me.columnad1.MaxLength = 30
            Me.columnad2.MaxLength = 30
            Me.columnad3.MaxLength = 30
            Me.columnad4.MaxLength = 30
            Me.columnad5.MaxLength = 3000000
            Me.columnphone.MaxLength = 15
            Me.columntelex.MaxLength = 15
            Me.columnfax.MaxLength = 15
            Me.columnemail.MaxLength = 40
            Me.columneurovat.MaxLength = 20
            Me.columnifmemo.MaxLength = 1
            Me.columnproforma.MaxLength = 1
            Me.columnudate.MaxLength = 8
            Me.columnentrytype.MaxLength = 1
            Me.columnnwho.MaxLength = 5
            Me.columninuse.MaxLength = 1
            Me.columnpeg_pact.MaxLength = 8
            Me.columnpeg_lsale.MaxLength = 8
            Me.columnADDMEMO.MaxLength = 1073741823
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Newtran2Row() As tran2Row
            Return CType(Me.NewRow,tran2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tran2Row(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tran2Row)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tran2RowChangedEvent) Is Nothing) Then
                RaiseEvent tran2RowChanged(Me, New tran2RowChangeEvent(CType(e.Row,tran2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tran2RowChangingEvent) Is Nothing) Then
                RaiseEvent tran2RowChanging(Me, New tran2RowChangeEvent(CType(e.Row,tran2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tran2RowDeletedEvent) Is Nothing) Then
                RaiseEvent tran2RowDeleted(Me, New tran2RowChangeEvent(CType(e.Row,tran2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tran2RowDeletingEvent) Is Nothing) Then
                RaiseEvent tran2RowDeleting(Me, New tran2RowChangeEvent(CType(e.Row,tran2Row), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Removetran2Row(ByVal row As tran2Row)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tran2DataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tranbinsDataTable
        Inherits Global.System.Data.TypedTableBase(Of tranbinsRow)
        
        Private columniicode As Global.System.Data.DataColumn
        
        Private columnsourcecde As Global.System.Data.DataColumn
        
        Private columnassured As Global.System.Data.DataColumn
        
        Private columnlocatebin As Global.System.Data.DataColumn
        
        Private columnquantybin As Global.System.Data.DataColumn
        
        Private columnalloc As Global.System.Data.DataColumn
        
        Private columncurrcy_cde As Global.System.Data.DataColumn
        
        Private columnunit_value As Global.System.Data.DataColumn
        
        Private columncatalog_dt As Global.System.Data.DataColumn
        
        Private columniiupdate As Global.System.Data.DataColumn
        
        Private columnrec_type As Global.System.Data.DataColumn
        
        Private columnsnwho As Global.System.Data.DataColumn
        
        Private columnsinuse As Global.System.Data.DataColumn
        
        Private columnweight As Global.System.Data.DataColumn
        
        Private columnwqty As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tranbins"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iicodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniicode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property sourcecdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsourcecde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property assuredColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnassured
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property locatebinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlocatebin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property quantybinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnquantybin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property allocColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnalloc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property currcy_cdeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncurrcy_cde
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property unit_valueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunit_value
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property catalog_dtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncatalog_dt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property iiupdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columniiupdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property rec_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrec_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property snwhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsnwho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property sinuseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsinuse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property weightColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnweight
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property wqtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tranbinsRow
            Get
                Return CType(Me.Rows(index),tranbinsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tranbinsRowChanging As tranbinsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tranbinsRowChanged As tranbinsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tranbinsRowDeleting As tranbinsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tranbinsRowDeleted As tranbinsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddtranbinsRow(ByVal row As tranbinsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddtranbinsRow(ByVal iicode As String, ByVal sourcecde As String, ByVal assured As String, ByVal locatebin As String, ByVal quantybin As Decimal, ByVal alloc As Decimal, ByVal currcy_cde As String, ByVal unit_value As String, ByVal catalog_dt As Date, ByVal iiupdate As Date, ByVal rec_type As String, ByVal snwho As String, ByVal sinuse As String, ByVal weight As Decimal, ByVal wqty As Decimal) As tranbinsRow
            Dim rowtranbinsRow As tranbinsRow = CType(Me.NewRow,tranbinsRow)
            Dim columnValuesArray() As Object = New Object() {iicode, sourcecde, assured, locatebin, quantybin, alloc, currcy_cde, unit_value, catalog_dt, iiupdate, rec_type, snwho, sinuse, weight, wqty, Nothing}
            rowtranbinsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtranbinsRow)
            Return rowtranbinsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As tranbinsRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),tranbinsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tranbinsDataTable = CType(MyBase.Clone,tranbinsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tranbinsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columniicode = MyBase.Columns("iicode")
            Me.columnsourcecde = MyBase.Columns("sourcecde")
            Me.columnassured = MyBase.Columns("assured")
            Me.columnlocatebin = MyBase.Columns("locatebin")
            Me.columnquantybin = MyBase.Columns("quantybin")
            Me.columnalloc = MyBase.Columns("alloc")
            Me.columncurrcy_cde = MyBase.Columns("currcy_cde")
            Me.columnunit_value = MyBase.Columns("unit_value")
            Me.columncatalog_dt = MyBase.Columns("catalog_dt")
            Me.columniiupdate = MyBase.Columns("iiupdate")
            Me.columnrec_type = MyBase.Columns("rec_type")
            Me.columnsnwho = MyBase.Columns("snwho")
            Me.columnsinuse = MyBase.Columns("sinuse")
            Me.columnweight = MyBase.Columns("weight")
            Me.columnwqty = MyBase.Columns("wqty")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columniicode = New Global.System.Data.DataColumn("iicode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniicode)
            Me.columnsourcecde = New Global.System.Data.DataColumn("sourcecde", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsourcecde)
            Me.columnassured = New Global.System.Data.DataColumn("assured", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassured)
            Me.columnlocatebin = New Global.System.Data.DataColumn("locatebin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlocatebin)
            Me.columnquantybin = New Global.System.Data.DataColumn("quantybin", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquantybin)
            Me.columnalloc = New Global.System.Data.DataColumn("alloc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnalloc)
            Me.columncurrcy_cde = New Global.System.Data.DataColumn("currcy_cde", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncurrcy_cde)
            Me.columnunit_value = New Global.System.Data.DataColumn("unit_value", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunit_value)
            Me.columncatalog_dt = New Global.System.Data.DataColumn("catalog_dt", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncatalog_dt)
            Me.columniiupdate = New Global.System.Data.DataColumn("iiupdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columniiupdate)
            Me.columnrec_type = New Global.System.Data.DataColumn("rec_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrec_type)
            Me.columnsnwho = New Global.System.Data.DataColumn("snwho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsnwho)
            Me.columnsinuse = New Global.System.Data.DataColumn("sinuse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsinuse)
            Me.columnweight = New Global.System.Data.DataColumn("weight", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnweight)
            Me.columnwqty = New Global.System.Data.DataColumn("wqty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwqty)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columniicode.AllowDBNull = false
            Me.columniicode.MaxLength = 5
            Me.columnsourcecde.AllowDBNull = false
            Me.columnsourcecde.MaxLength = 7
            Me.columnassured.AllowDBNull = false
            Me.columnassured.MaxLength = 1
            Me.columnlocatebin.AllowDBNull = false
            Me.columnlocatebin.MaxLength = 8
            Me.columnquantybin.AllowDBNull = false
            Me.columnalloc.AllowDBNull = false
            Me.columncurrcy_cde.AllowDBNull = false
            Me.columncurrcy_cde.MaxLength = 3
            Me.columnunit_value.AllowDBNull = false
            Me.columnunit_value.MaxLength = 10
            Me.columncatalog_dt.AllowDBNull = false
            Me.columniiupdate.AllowDBNull = false
            Me.columnrec_type.AllowDBNull = false
            Me.columnrec_type.MaxLength = 1
            Me.columnsnwho.AllowDBNull = false
            Me.columnsnwho.MaxLength = 5
            Me.columnsinuse.AllowDBNull = false
            Me.columnsinuse.MaxLength = 1
            Me.columnweight.AllowDBNull = false
            Me.columnwqty.AllowDBNull = false
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewtranbinsRow() As tranbinsRow
            Return CType(Me.NewRow,tranbinsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tranbinsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tranbinsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tranbinsRowChangedEvent) Is Nothing) Then
                RaiseEvent tranbinsRowChanged(Me, New tranbinsRowChangeEvent(CType(e.Row,tranbinsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tranbinsRowChangingEvent) Is Nothing) Then
                RaiseEvent tranbinsRowChanging(Me, New tranbinsRowChangeEvent(CType(e.Row,tranbinsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tranbinsRowDeletedEvent) Is Nothing) Then
                RaiseEvent tranbinsRowDeleted(Me, New tranbinsRowChangeEvent(CType(e.Row,tranbinsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tranbinsRowDeletingEvent) Is Nothing) Then
                RaiseEvent tranbinsRowDeleting(Me, New tranbinsRowChangeEvent(CType(e.Row,tranbinsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovetranbinsRow(ByVal row As tranbinsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tranbinsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tranctlDataTable
        Inherits Global.System.Data.TypedTableBase(Of tranctlRow)
        
        Private columninvkey As Global.System.Data.DataColumn
        
        Private columnevaccat As Global.System.Data.DataColumn
        
        Private columntempinv As Global.System.Data.DataColumn
        
        Private columnlinvno As Global.System.Data.DataColumn
        
        Private columnvatpc As Global.System.Data.DataColumn
        
        Private columnholdnote As Global.System.Data.DataColumn
        
        Private columnlquote As Global.System.Data.DataColumn
        
        Private columndraftsord As Global.System.Data.DataColumn
        
        Private columnldate As Global.System.Data.DataColumn
        
        Private columntwho As Global.System.Data.DataColumn
        
        Private columnquoteno As Global.System.Data.DataColumn
        
        Private columnorderno As Global.System.Data.DataColumn
        
        Private columnidcode As Global.System.Data.DataColumn
        
        Private columninvno As Global.System.Data.DataColumn
        
        Private columnprojectno As Global.System.Data.DataColumn
        
        Private columnaccno As Global.System.Data.DataColumn
        
        Private columnassetno As Global.System.Data.DataColumn
        
        Private columnwoorderno As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tranctl"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property invkeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninvkey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property evaccatColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnevaccat
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property tempinvColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntempinv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property linvnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlinvno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property vatpcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvatpc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property holdnoteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnholdnote
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property lquoteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlquote
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property draftsordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndraftsord
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ldateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnldate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property twhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntwho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property quotenoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnquoteno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ordernoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnorderno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property idcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property invnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninvno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property projectnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprojectno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property accnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaccno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property assetnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnassetno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property woordernoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwoorderno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tranctlRow
            Get
                Return CType(Me.Rows(index),tranctlRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tranctlRowChanging As tranctlRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tranctlRowChanged As tranctlRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tranctlRowDeleting As tranctlRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tranctlRowDeleted As tranctlRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddtranctlRow(ByVal row As tranctlRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddtranctlRow( _
                    ByVal invkey As String,  _
                    ByVal evaccat As Date,  _
                    ByVal tempinv As Decimal,  _
                    ByVal linvno As Decimal,  _
                    ByVal vatpc As Decimal,  _
                    ByVal holdnote As Decimal,  _
                    ByVal lquote As Decimal,  _
                    ByVal draftsord As Decimal,  _
                    ByVal ldate As Date,  _
                    ByVal twho As String,  _
                    ByVal quoteno As Decimal,  _
                    ByVal orderno As Decimal,  _
                    ByVal idcode As Decimal,  _
                    ByVal invno As Decimal,  _
                    ByVal projectno As Decimal,  _
                    ByVal accno As Decimal,  _
                    ByVal assetno As Decimal,  _
                    ByVal woorderno As Decimal) As tranctlRow
            Dim rowtranctlRow As tranctlRow = CType(Me.NewRow,tranctlRow)
            Dim columnValuesArray() As Object = New Object() {invkey, evaccat, tempinv, linvno, vatpc, holdnote, lquote, draftsord, ldate, twho, quoteno, orderno, idcode, invno, projectno, accno, assetno, woorderno, Nothing}
            rowtranctlRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtranctlRow)
            Return rowtranctlRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As tranctlRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),tranctlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tranctlDataTable = CType(MyBase.Clone,tranctlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tranctlDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columninvkey = MyBase.Columns("invkey")
            Me.columnevaccat = MyBase.Columns("evaccat")
            Me.columntempinv = MyBase.Columns("tempinv")
            Me.columnlinvno = MyBase.Columns("linvno")
            Me.columnvatpc = MyBase.Columns("vatpc")
            Me.columnholdnote = MyBase.Columns("holdnote")
            Me.columnlquote = MyBase.Columns("lquote")
            Me.columndraftsord = MyBase.Columns("draftsord")
            Me.columnldate = MyBase.Columns("ldate")
            Me.columntwho = MyBase.Columns("twho")
            Me.columnquoteno = MyBase.Columns("quoteno")
            Me.columnorderno = MyBase.Columns("orderno")
            Me.columnidcode = MyBase.Columns("idcode")
            Me.columninvno = MyBase.Columns("invno")
            Me.columnprojectno = MyBase.Columns("projectno")
            Me.columnaccno = MyBase.Columns("accno")
            Me.columnassetno = MyBase.Columns("assetno")
            Me.columnwoorderno = MyBase.Columns("woorderno")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columninvkey = New Global.System.Data.DataColumn("invkey", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninvkey)
            Me.columnevaccat = New Global.System.Data.DataColumn("evaccat", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnevaccat)
            Me.columntempinv = New Global.System.Data.DataColumn("tempinv", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntempinv)
            Me.columnlinvno = New Global.System.Data.DataColumn("linvno", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlinvno)
            Me.columnvatpc = New Global.System.Data.DataColumn("vatpc", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvatpc)
            Me.columnholdnote = New Global.System.Data.DataColumn("holdnote", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnholdnote)
            Me.columnlquote = New Global.System.Data.DataColumn("lquote", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlquote)
            Me.columndraftsord = New Global.System.Data.DataColumn("draftsord", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndraftsord)
            Me.columnldate = New Global.System.Data.DataColumn("ldate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnldate)
            Me.columntwho = New Global.System.Data.DataColumn("twho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntwho)
            Me.columnquoteno = New Global.System.Data.DataColumn("quoteno", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnquoteno)
            Me.columnorderno = New Global.System.Data.DataColumn("orderno", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnorderno)
            Me.columnidcode = New Global.System.Data.DataColumn("idcode", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidcode)
            Me.columninvno = New Global.System.Data.DataColumn("invno", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninvno)
            Me.columnprojectno = New Global.System.Data.DataColumn("projectno", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprojectno)
            Me.columnaccno = New Global.System.Data.DataColumn("accno", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaccno)
            Me.columnassetno = New Global.System.Data.DataColumn("assetno", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnassetno)
            Me.columnwoorderno = New Global.System.Data.DataColumn("woorderno", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwoorderno)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columninvkey.AllowDBNull = false
            Me.columninvkey.MaxLength = 5
            Me.columnevaccat.AllowDBNull = false
            Me.columntempinv.AllowDBNull = false
            Me.columnlinvno.AllowDBNull = false
            Me.columnvatpc.AllowDBNull = false
            Me.columnholdnote.AllowDBNull = false
            Me.columnlquote.AllowDBNull = false
            Me.columndraftsord.AllowDBNull = false
            Me.columnldate.AllowDBNull = false
            Me.columntwho.AllowDBNull = false
            Me.columntwho.MaxLength = 5
            Me.columnquoteno.AllowDBNull = false
            Me.columnorderno.AllowDBNull = false
            Me.columnidcode.AllowDBNull = false
            Me.columninvno.AllowDBNull = false
            Me.columnprojectno.AllowDBNull = false
            Me.columnaccno.AllowDBNull = false
            Me.columnassetno.AllowDBNull = false
            Me.columnwoorderno.AllowDBNull = false
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewtranctlRow() As tranctlRow
            Return CType(Me.NewRow,tranctlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tranctlRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tranctlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tranctlRowChangedEvent) Is Nothing) Then
                RaiseEvent tranctlRowChanged(Me, New tranctlRowChangeEvent(CType(e.Row,tranctlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tranctlRowChangingEvent) Is Nothing) Then
                RaiseEvent tranctlRowChanging(Me, New tranctlRowChangeEvent(CType(e.Row,tranctlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tranctlRowDeletedEvent) Is Nothing) Then
                RaiseEvent tranctlRowDeleted(Me, New tranctlRowChangeEvent(CType(e.Row,tranctlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tranctlRowDeletingEvent) Is Nothing) Then
                RaiseEvent tranctlRowDeleting(Me, New tranctlRowChangeEvent(CType(e.Row,tranctlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovetranctlRow(ByVal row As tranctlRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tranctlDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class trandescDataTable
        Inherits Global.System.Data.TypedTableBase(Of trandescRow)
        
        Private columnpcode As Global.System.Data.DataColumn
        
        Private columnpsupplier As Global.System.Data.DataColumn
        
        Private columndescriptn As Global.System.Data.DataColumn
        
        Private columnminstock As Global.System.Data.DataColumn
        
        Private columnminorder As Global.System.Data.DataColumn
        
        Private columnifmemo As Global.System.Data.DataColumn
        
        Private columnidupdate As Global.System.Data.DataColumn
        
        Private columnidcode As Global.System.Data.DataColumn
        
        Private columnnwho As Global.System.Data.DataColumn
        
        Private columninuse As Global.System.Data.DataColumn
        
        Private columndescmemo As Global.System.Data.DataColumn
        
        Private columnmemodate As Global.System.Data.DataColumn
        
        Private columnobsolete As Global.System.Data.DataColumn
        
        Private columnobmessage As Global.System.Data.DataColumn
        
        Private columnccode As Global.System.Data.DataColumn
        
        Private columntimestamp_column As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "trandesc"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property pcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property psupplierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpsupplier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property descriptnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescriptn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property minstockColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnminstock
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property minorderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnminorder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ifmemoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnifmemo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property idupdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidupdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property idcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnidcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property nwhoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnwho
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property inuseColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninuse
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property descmemoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescmemo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property memodateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmemodate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property obsoleteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobsolete
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property obmessageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobmessage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property ccodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnccode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property timestamp_columnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimestamp_column
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As trandescRow
            Get
                Return CType(Me.Rows(index),trandescRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event trandescRowChanging As trandescRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event trandescRowChanged As trandescRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event trandescRowDeleting As trandescRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event trandescRowDeleted As trandescRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddtrandescRow(ByVal row As trandescRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddtrandescRow( _
                    ByVal pcode As String,  _
                    ByVal psupplier As String,  _
                    ByVal descriptn As String,  _
                    ByVal minstock As Decimal,  _
                    ByVal minorder As Decimal,  _
                    ByVal ifmemo As String,  _
                    ByVal idupdate As Date,  _
                    ByVal idcode As String,  _
                    ByVal nwho As String,  _
                    ByVal inuse As String,  _
                    ByVal descmemo As String,  _
                    ByVal memodate As Date,  _
                    ByVal obsolete As Boolean,  _
                    ByVal obmessage As String,  _
                    ByVal ccode As String,  _
                    ByVal timestamp_column() As Byte) As trandescRow
            Dim rowtrandescRow As trandescRow = CType(Me.NewRow,trandescRow)
            Dim columnValuesArray() As Object = New Object() {pcode, psupplier, descriptn, minstock, minorder, ifmemo, idupdate, idcode, nwho, inuse, descmemo, memodate, obsolete, obmessage, ccode, timestamp_column, Nothing}
            rowtrandescRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtrandescRow)
            Return rowtrandescRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As trandescRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),trandescRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As trandescDataTable = CType(MyBase.Clone,trandescDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New trandescDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnpcode = MyBase.Columns("pcode")
            Me.columnpsupplier = MyBase.Columns("psupplier")
            Me.columndescriptn = MyBase.Columns("descriptn")
            Me.columnminstock = MyBase.Columns("minstock")
            Me.columnminorder = MyBase.Columns("minorder")
            Me.columnifmemo = MyBase.Columns("ifmemo")
            Me.columnidupdate = MyBase.Columns("idupdate")
            Me.columnidcode = MyBase.Columns("idcode")
            Me.columnnwho = MyBase.Columns("nwho")
            Me.columninuse = MyBase.Columns("inuse")
            Me.columndescmemo = MyBase.Columns("descmemo")
            Me.columnmemodate = MyBase.Columns("memodate")
            Me.columnobsolete = MyBase.Columns("obsolete")
            Me.columnobmessage = MyBase.Columns("obmessage")
            Me.columnccode = MyBase.Columns("ccode")
            Me.columntimestamp_column = MyBase.Columns("timestamp_column")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnpcode = New Global.System.Data.DataColumn("pcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpcode)
            Me.columnpsupplier = New Global.System.Data.DataColumn("psupplier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpsupplier)
            Me.columndescriptn = New Global.System.Data.DataColumn("descriptn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescriptn)
            Me.columnminstock = New Global.System.Data.DataColumn("minstock", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnminstock)
            Me.columnminorder = New Global.System.Data.DataColumn("minorder", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnminorder)
            Me.columnifmemo = New Global.System.Data.DataColumn("ifmemo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnifmemo)
            Me.columnidupdate = New Global.System.Data.DataColumn("idupdate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidupdate)
            Me.columnidcode = New Global.System.Data.DataColumn("idcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnidcode)
            Me.columnnwho = New Global.System.Data.DataColumn("nwho", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnwho)
            Me.columninuse = New Global.System.Data.DataColumn("inuse", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninuse)
            Me.columndescmemo = New Global.System.Data.DataColumn("descmemo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescmemo)
            Me.columnmemodate = New Global.System.Data.DataColumn("memodate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmemodate)
            Me.columnobsolete = New Global.System.Data.DataColumn("obsolete", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobsolete)
            Me.columnobmessage = New Global.System.Data.DataColumn("obmessage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobmessage)
            Me.columnccode = New Global.System.Data.DataColumn("ccode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnccode)
            Me.columntimestamp_column = New Global.System.Data.DataColumn("timestamp_column", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimestamp_column)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnpcode.AllowDBNull = false
            Me.columnpcode.MaxLength = 20
            Me.columnpsupplier.AllowDBNull = false
            Me.columnpsupplier.MaxLength = 7
            Me.columndescriptn.AllowDBNull = false
            Me.columndescriptn.MaxLength = 40
            Me.columnminstock.AllowDBNull = false
            Me.columnminorder.AllowDBNull = false
            Me.columnifmemo.AllowDBNull = false
            Me.columnifmemo.MaxLength = 1
            Me.columnidupdate.AllowDBNull = false
            Me.columnidcode.AllowDBNull = false
            Me.columnidcode.MaxLength = 5
            Me.columnnwho.AllowDBNull = false
            Me.columnnwho.MaxLength = 5
            Me.columninuse.AllowDBNull = false
            Me.columninuse.MaxLength = 1
            Me.columndescmemo.AllowDBNull = false
            Me.columndescmemo.MaxLength = 2147483647
            Me.columnmemodate.AllowDBNull = false
            Me.columnobsolete.AllowDBNull = false
            Me.columnobmessage.AllowDBNull = false
            Me.columnobmessage.MaxLength = 2147483647
            Me.columnccode.AllowDBNull = false
            Me.columnccode.MaxLength = 10
            Me.columntimestamp_column.ReadOnly = true
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewtrandescRow() As trandescRow
            Return CType(Me.NewRow,trandescRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New trandescRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(trandescRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.trandescRowChangedEvent) Is Nothing) Then
                RaiseEvent trandescRowChanged(Me, New trandescRowChangeEvent(CType(e.Row,trandescRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.trandescRowChangingEvent) Is Nothing) Then
                RaiseEvent trandescRowChanging(Me, New trandescRowChangeEvent(CType(e.Row,trandescRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.trandescRowDeletedEvent) Is Nothing) Then
                RaiseEvent trandescRowDeleted(Me, New trandescRowChangeEvent(CType(e.Row,trandescRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.trandescRowDeletingEvent) Is Nothing) Then
                RaiseEvent trandescRowDeleting(Me, New trandescRowChangeEvent(CType(e.Row,trandescRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovetrandescRow(ByVal row As trandescRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "trandescDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tranmemoDataTable
        Inherits Global.System.Data.TypedTableBase(Of tranmemoRow)
        
        Private columnmemo_no As Global.System.Data.DataColumn
        
        Private columnmemo_type As Global.System.Data.DataColumn
        
        Private columnmemo1 As Global.System.Data.DataColumn
        
        Private columnmemo2 As Global.System.Data.DataColumn
        
        Private columnmemo3 As Global.System.Data.DataColumn
        
        Private columnmemo4 As Global.System.Data.DataColumn
        
        Private columnmemo5 As Global.System.Data.DataColumn
        
        Private columnmemo6 As Global.System.Data.DataColumn
        
        Private columnomemo1 As Global.System.Data.DataColumn
        
        Private columnomemo2 As Global.System.Data.DataColumn
        
        Private columnomemo3 As Global.System.Data.DataColumn
        
        Private columnomemo4 As Global.System.Data.DataColumn
        
        Private columnomemo5 As Global.System.Data.DataColumn
        
        Private columnomemo6 As Global.System.Data.DataColumn
        
        Private columntimestamp_column As Global.System.Data.DataColumn
        
        Private columnUniqueID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tranmemo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property memo_noColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmemo_no
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property memo_typeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmemo_type
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property memo1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmemo1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property memo2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmemo2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property memo3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmemo3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property memo4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmemo4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property memo5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmemo5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property memo6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnmemo6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property omemo1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnomemo1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property omemo2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnomemo2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property omemo3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnomemo3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property omemo4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnomemo4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property omemo5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnomemo5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property omemo6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnomemo6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property timestamp_columnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimestamp_column
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property UniqueIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUniqueID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tranmemoRow
            Get
                Return CType(Me.Rows(index),tranmemoRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tranmemoRowChanging As tranmemoRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tranmemoRowChanged As tranmemoRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tranmemoRowDeleting As tranmemoRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event tranmemoRowDeleted As tranmemoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddtranmemoRow(ByVal row As tranmemoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddtranmemoRow(ByVal memo_no As String, ByVal memo_type As String, ByVal memo1 As String, ByVal memo2 As String, ByVal memo3 As String, ByVal memo4 As String, ByVal memo5 As String, ByVal memo6 As String, ByVal omemo1 As String, ByVal omemo2 As String, ByVal omemo3 As String, ByVal omemo4 As String, ByVal omemo5 As String, ByVal omemo6 As String, ByVal timestamp_column() As Byte) As tranmemoRow
            Dim rowtranmemoRow As tranmemoRow = CType(Me.NewRow,tranmemoRow)
            Dim columnValuesArray() As Object = New Object() {memo_no, memo_type, memo1, memo2, memo3, memo4, memo5, memo6, omemo1, omemo2, omemo3, omemo4, omemo5, omemo6, timestamp_column, Nothing}
            rowtranmemoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtranmemoRow)
            Return rowtranmemoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function FindByUniqueID(ByVal UniqueID As Long) As tranmemoRow
            Return CType(Me.Rows.Find(New Object() {UniqueID}),tranmemoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tranmemoDataTable = CType(MyBase.Clone,tranmemoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tranmemoDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnmemo_no = MyBase.Columns("memo_no")
            Me.columnmemo_type = MyBase.Columns("memo_type")
            Me.columnmemo1 = MyBase.Columns("memo1")
            Me.columnmemo2 = MyBase.Columns("memo2")
            Me.columnmemo3 = MyBase.Columns("memo3")
            Me.columnmemo4 = MyBase.Columns("memo4")
            Me.columnmemo5 = MyBase.Columns("memo5")
            Me.columnmemo6 = MyBase.Columns("memo6")
            Me.columnomemo1 = MyBase.Columns("omemo1")
            Me.columnomemo2 = MyBase.Columns("omemo2")
            Me.columnomemo3 = MyBase.Columns("omemo3")
            Me.columnomemo4 = MyBase.Columns("omemo4")
            Me.columnomemo5 = MyBase.Columns("omemo5")
            Me.columnomemo6 = MyBase.Columns("omemo6")
            Me.columntimestamp_column = MyBase.Columns("timestamp_column")
            Me.columnUniqueID = MyBase.Columns("UniqueID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnmemo_no = New Global.System.Data.DataColumn("memo_no", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmemo_no)
            Me.columnmemo_type = New Global.System.Data.DataColumn("memo_type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmemo_type)
            Me.columnmemo1 = New Global.System.Data.DataColumn("memo1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmemo1)
            Me.columnmemo2 = New Global.System.Data.DataColumn("memo2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmemo2)
            Me.columnmemo3 = New Global.System.Data.DataColumn("memo3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmemo3)
            Me.columnmemo4 = New Global.System.Data.DataColumn("memo4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmemo4)
            Me.columnmemo5 = New Global.System.Data.DataColumn("memo5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmemo5)
            Me.columnmemo6 = New Global.System.Data.DataColumn("memo6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmemo6)
            Me.columnomemo1 = New Global.System.Data.DataColumn("omemo1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnomemo1)
            Me.columnomemo2 = New Global.System.Data.DataColumn("omemo2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnomemo2)
            Me.columnomemo3 = New Global.System.Data.DataColumn("omemo3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnomemo3)
            Me.columnomemo4 = New Global.System.Data.DataColumn("omemo4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnomemo4)
            Me.columnomemo5 = New Global.System.Data.DataColumn("omemo5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnomemo5)
            Me.columnomemo6 = New Global.System.Data.DataColumn("omemo6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnomemo6)
            Me.columntimestamp_column = New Global.System.Data.DataColumn("timestamp_column", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimestamp_column)
            Me.columnUniqueID = New Global.System.Data.DataColumn("UniqueID", GetType(Long), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUniqueID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUniqueID}, true))
            Me.columnmemo_no.AllowDBNull = false
            Me.columnmemo_no.MaxLength = 2
            Me.columnmemo_type.AllowDBNull = false
            Me.columnmemo_type.MaxLength = 6
            Me.columnmemo1.AllowDBNull = false
            Me.columnmemo1.MaxLength = 2147483647
            Me.columnmemo2.AllowDBNull = false
            Me.columnmemo2.MaxLength = 2147483647
            Me.columnmemo3.AllowDBNull = false
            Me.columnmemo3.MaxLength = 2147483647
            Me.columnmemo4.AllowDBNull = false
            Me.columnmemo4.MaxLength = 2147483647
            Me.columnmemo5.AllowDBNull = false
            Me.columnmemo5.MaxLength = 2147483647
            Me.columnmemo6.AllowDBNull = false
            Me.columnmemo6.MaxLength = 2147483647
            Me.columnomemo1.AllowDBNull = false
            Me.columnomemo1.MaxLength = 2147483647
            Me.columnomemo2.AllowDBNull = false
            Me.columnomemo2.MaxLength = 2147483647
            Me.columnomemo3.AllowDBNull = false
            Me.columnomemo3.MaxLength = 2147483647
            Me.columnomemo4.AllowDBNull = false
            Me.columnomemo4.MaxLength = 2147483647
            Me.columnomemo5.AllowDBNull = false
            Me.columnomemo5.MaxLength = 2147483647
            Me.columnomemo6.AllowDBNull = false
            Me.columnomemo6.MaxLength = 2147483647
            Me.columntimestamp_column.ReadOnly = true
            Me.columnUniqueID.AutoIncrement = true
            Me.columnUniqueID.AutoIncrementSeed = -1
            Me.columnUniqueID.AutoIncrementStep = -1
            Me.columnUniqueID.AllowDBNull = false
            Me.columnUniqueID.ReadOnly = true
            Me.columnUniqueID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewtranmemoRow() As tranmemoRow
            Return CType(Me.NewRow,tranmemoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tranmemoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tranmemoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tranmemoRowChangedEvent) Is Nothing) Then
                RaiseEvent tranmemoRowChanged(Me, New tranmemoRowChangeEvent(CType(e.Row,tranmemoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tranmemoRowChangingEvent) Is Nothing) Then
                RaiseEvent tranmemoRowChanging(Me, New tranmemoRowChangeEvent(CType(e.Row,tranmemoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tranmemoRowDeletedEvent) Is Nothing) Then
                RaiseEvent tranmemoRowDeleted(Me, New tranmemoRowChangeEvent(CType(e.Row,tranmemoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tranmemoRowDeletingEvent) Is Nothing) Then
                RaiseEvent tranmemoRowDeleting(Me, New tranmemoRowChangeEvent(CType(e.Row,tranmemoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemovetranmemoRow(ByVal row As tranmemoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tranmemoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AddressRecordTypeDataTable
        Inherits Global.System.Data.TypedTableBase(Of AddressRecordTypeRow)
        
        Private columnRecordTypeNew As Global.System.Data.DataColumn
        
        Private columnRecordTypeOld As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AddressRecordType"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RecordTypeNewColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordTypeNew
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property RecordTypeOldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordTypeOld
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AddressRecordTypeRow
            Get
                Return CType(Me.Rows(index),AddressRecordTypeRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AddressRecordTypeRowChanging As AddressRecordTypeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AddressRecordTypeRowChanged As AddressRecordTypeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AddressRecordTypeRowDeleting As AddressRecordTypeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Event AddressRecordTypeRowDeleted As AddressRecordTypeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Sub AddAddressRecordTypeRow(ByVal row As AddressRecordTypeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overloads Function AddAddressRecordTypeRow(ByVal RecordTypeNew As String, ByVal RecordTypeOld As String) As AddressRecordTypeRow
            Dim rowAddressRecordTypeRow As AddressRecordTypeRow = CType(Me.NewRow,AddressRecordTypeRow)
            Dim columnValuesArray() As Object = New Object() {RecordTypeNew, RecordTypeOld}
            rowAddressRecordTypeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAddressRecordTypeRow)
            Return rowAddressRecordTypeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AddressRecordTypeDataTable = CType(MyBase.Clone,AddressRecordTypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AddressRecordTypeDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnRecordTypeNew = MyBase.Columns("RecordTypeNew")
            Me.columnRecordTypeOld = MyBase.Columns("RecordTypeOld")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitClass()
            Me.columnRecordTypeNew = New Global.System.Data.DataColumn("RecordTypeNew", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordTypeNew)
            Me.columnRecordTypeOld = New Global.System.Data.DataColumn("RecordTypeOld", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordTypeOld)
            Me.columnRecordTypeNew.AllowDBNull = false
            Me.columnRecordTypeNew.MaxLength = 10
            Me.columnRecordTypeOld.AllowDBNull = false
            Me.columnRecordTypeOld.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function NewAddressRecordTypeRow() As AddressRecordTypeRow
            Return CType(Me.NewRow,AddressRecordTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AddressRecordTypeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AddressRecordTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AddressRecordTypeRowChangedEvent) Is Nothing) Then
                RaiseEvent AddressRecordTypeRowChanged(Me, New AddressRecordTypeRowChangeEvent(CType(e.Row,AddressRecordTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AddressRecordTypeRowChangingEvent) Is Nothing) Then
                RaiseEvent AddressRecordTypeRowChanging(Me, New AddressRecordTypeRowChangeEvent(CType(e.Row,AddressRecordTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AddressRecordTypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent AddressRecordTypeRowDeleted(Me, New AddressRecordTypeRowChangeEvent(CType(e.Row,AddressRecordTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AddressRecordTypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent AddressRecordTypeRowDeleting(Me, New AddressRecordTypeRowChangeEvent(CType(e.Row,AddressRecordTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub RemoveAddressRecordTypeRow(ByVal row As AddressRecordTypeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As TransvacDataV2DataSet1 = New TransvacDataV2DataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AddressRecordTypeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class accctlRow
        Inherits Global.System.Data.DataRow
        
        Private tableaccctl As accctlDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableaccctl = CType(Me.Table,accctlDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property name() As String
            Get
                Return CType(Me(Me.tableaccctl.nameColumn),String)
            End Get
            Set
                Me(Me.tableaccctl.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property level_() As Decimal
            Get
                Return CType(Me(Me.tableaccctl.level_Column),Decimal)
            End Get
            Set
                Me(Me.tableaccctl.level_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property comments() As String
            Get
                Return CType(Me(Me.tableaccctl.commentsColumn),String)
            End Get
            Set
                Me(Me.tableaccctl.commentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qinits() As String
            Get
                Return CType(Me(Me.tableaccctl.qinitsColumn),String)
            End Get
            Set
                Me(Me.tableaccctl.qinitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property title() As String
            Get
                Return CType(Me(Me.tableaccctl.titleColumn),String)
            End Get
            Set
                Me(Me.tableaccctl.titleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property sig() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableaccctl.sigColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sig' in table 'accctl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaccctl.sigColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property email() As String
            Get
                Return CType(Me(Me.tableaccctl.emailColumn),String)
            End Get
            Set
                Me(Me.tableaccctl.emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property timestamp_column() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableaccctl.timestamp_columnColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timestamp_column' in table 'accctl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaccctl.timestamp_columnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableaccctl.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableaccctl.UniqueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IssigNull() As Boolean
            Return Me.IsNull(Me.tableaccctl.sigColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetsigNull()
            Me(Me.tableaccctl.sigColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Istimestamp_columnNull() As Boolean
            Return Me.IsNull(Me.tableaccctl.timestamp_columnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Settimestamp_columnNull()
            Me(Me.tableaccctl.timestamp_columnColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class accountRow
        Inherits Global.System.Data.DataRow
        
        Private tableaccount As accountDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableaccount = CType(Me.Table,accountDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property accno() As String
            Get
                Return CType(Me(Me.tableaccount.accnoColumn),String)
            End Get
            Set
                Me(Me.tableaccount.accnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iname() As String
            Get
                Return CType(Me(Me.tableaccount.inameColumn),String)
            End Get
            Set
                Me(Me.tableaccount.inameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iadd1() As String
            Get
                Return CType(Me(Me.tableaccount.iadd1Column),String)
            End Get
            Set
                Me(Me.tableaccount.iadd1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iadd2() As String
            Get
                Return CType(Me(Me.tableaccount.iadd2Column),String)
            End Get
            Set
                Me(Me.tableaccount.iadd2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iadd3() As String
            Get
                Return CType(Me(Me.tableaccount.iadd3Column),String)
            End Get
            Set
                Me(Me.tableaccount.iadd3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iadd4() As String
            Get
                Return CType(Me(Me.tableaccount.iadd4Column),String)
            End Get
            Set
                Me(Me.tableaccount.iadd4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iadd5() As String
            Get
                Return CType(Me(Me.tableaccount.iadd5Column),String)
            End Get
            Set
                Me(Me.tableaccount.iadd5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ipcode() As String
            Get
                Return CType(Me(Me.tableaccount.ipcodeColumn),String)
            End Get
            Set
                Me(Me.tableaccount.ipcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property dname() As String
            Get
                Return CType(Me(Me.tableaccount.dnameColumn),String)
            End Get
            Set
                Me(Me.tableaccount.dnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property dadd1() As String
            Get
                Return CType(Me(Me.tableaccount.dadd1Column),String)
            End Get
            Set
                Me(Me.tableaccount.dadd1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property dadd2() As String
            Get
                Return CType(Me(Me.tableaccount.dadd2Column),String)
            End Get
            Set
                Me(Me.tableaccount.dadd2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property dadd3() As String
            Get
                Return CType(Me(Me.tableaccount.dadd3Column),String)
            End Get
            Set
                Me(Me.tableaccount.dadd3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property dadd4() As String
            Get
                Return CType(Me(Me.tableaccount.dadd4Column),String)
            End Get
            Set
                Me(Me.tableaccount.dadd4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property dadd5() As String
            Get
                Return CType(Me(Me.tableaccount.dadd5Column),String)
            End Get
            Set
                Me(Me.tableaccount.dadd5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property dpcode() As String
            Get
                Return CType(Me(Me.tableaccount.dpcodeColumn),String)
            End Get
            Set
                Me(Me.tableaccount.dpcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property idesc() As String
            Get
                Return CType(Me(Me.tableaccount.idescColumn),String)
            End Get
            Set
                Me(Me.tableaccount.idescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iamount() As Decimal
            Get
                Return CType(Me(Me.tableaccount.iamountColumn),Decimal)
            End Get
            Set
                Me(Me.tableaccount.iamountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iperiod() As Decimal
            Get
                Return CType(Me(Me.tableaccount.iperiodColumn),Decimal)
            End Get
            Set
                Me(Me.tableaccount.iperiodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property sdate() As Date
            Get
                Return CType(Me(Me.tableaccount.sdateColumn),Date)
            End Get
            Set
                Me(Me.tableaccount.sdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property edate() As Date
            Get
                Return CType(Me(Me.tableaccount.edateColumn),Date)
            End Get
            Set
                Me(Me.tableaccount.edateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property itelno() As String
            Get
                Return CType(Me(Me.tableaccount.itelnoColumn),String)
            End Get
            Set
                Me(Me.tableaccount.itelnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ifaxno() As String
            Get
                Return CType(Me(Me.tableaccount.ifaxnoColumn),String)
            End Get
            Set
                Me(Me.tableaccount.ifaxnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property imobno() As String
            Get
                Return CType(Me(Me.tableaccount.imobnoColumn),String)
            End Get
            Set
                Me(Me.tableaccount.imobnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iemail() As String
            Get
                Return CType(Me(Me.tableaccount.iemailColumn),String)
            End Get
            Set
                Me(Me.tableaccount.iemailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property notes() As String
            Get
                Return CType(Me(Me.tableaccount.notesColumn),String)
            End Get
            Set
                Me(Me.tableaccount.notesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property timestamp_column() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableaccount.timestamp_columnColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timestamp_column' in table 'account' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaccount.timestamp_columnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableaccount.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableaccount.UniqueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Istimestamp_columnNull() As Boolean
            Return Me.IsNull(Me.tableaccount.timestamp_columnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Settimestamp_columnNull()
            Me(Me.tableaccount.timestamp_columnColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class addnotesRow
        Inherits Global.System.Data.DataRow
        
        Private tableaddnotes As addnotesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableaddnotes = CType(Me.Table,addnotesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property account() As String
            Get
                Return CType(Me(Me.tableaddnotes.accountColumn),String)
            End Get
            Set
                Me(Me.tableaddnotes.accountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property actmemo() As String
            Get
                Return CType(Me(Me.tableaddnotes.actmemoColumn),String)
            End Get
            Set
                Me(Me.tableaddnotes.actmemoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property timestamp_column() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableaddnotes.timestamp_columnColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timestamp_column' in table 'addnotes' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableaddnotes.timestamp_columnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableaddnotes.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableaddnotes.UniqueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Istimestamp_columnNull() As Boolean
            Return Me.IsNull(Me.tableaddnotes.timestamp_columnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Settimestamp_columnNull()
            Me(Me.tableaddnotes.timestamp_columnColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class assetsRow
        Inherits Global.System.Data.DataRow
        
        Private tableassets As assetsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableassets = CType(Me.Table,assetsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property desc_() As String
            Get
                Return CType(Me(Me.tableassets.desc_Column),String)
            End Get
            Set
                Me(Me.tableassets.desc_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property assetno() As String
            Get
                Return CType(Me(Me.tableassets.assetnoColumn),String)
            End Get
            Set
                Me(Me.tableassets.assetnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property location() As String
            Get
                Return CType(Me(Me.tableassets.locationColumn),String)
            End Get
            Set
                Me(Me.tableassets.locationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property cat() As String
            Get
                Return CType(Me(Me.tableassets.catColumn),String)
            End Get
            Set
                Me(Me.tableassets.catColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property status() As String
            Get
                Return CType(Me(Me.tableassets.statusColumn),String)
            End Get
            Set
                Me(Me.tableassets.statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property modelno() As String
            Get
                Return CType(Me(Me.tableassets.modelnoColumn),String)
            End Get
            Set
                Me(Me.tableassets.modelnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property serialno() As String
            Get
                Return CType(Me(Me.tableassets.serialnoColumn),String)
            End Get
            Set
                Me(Me.tableassets.serialnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property dateacquir() As Date
            Get
                Return CType(Me(Me.tableassets.dateacquirColumn),Date)
            End Get
            Set
                Me(Me.tableassets.dateacquirColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property comments() As String
            Get
                Return CType(Me(Me.tableassets.commentsColumn),String)
            End Get
            Set
                Me(Me.tableassets.commentsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property nextsched() As Date
            Get
                Return CType(Me(Me.tableassets.nextschedColumn),Date)
            End Get
            Set
                Me(Me.tableassets.nextschedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _event() As String
            Get
                Return CType(Me(Me.tableassets.eventColumn),String)
            End Get
            Set
                Me(Me.tableassets.eventColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property department() As String
            Get
                Return CType(Me(Me.tableassets.departmentColumn),String)
            End Get
            Set
                Me(Me.tableassets.departmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property manufactur() As String
            Get
                Return CType(Me(Me.tableassets.manufacturColumn),String)
            End Get
            Set
                Me(Me.tableassets.manufacturColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property timestamp_column() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableassets.timestamp_columnColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timestamp_column' in table 'assets' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableassets.timestamp_columnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableassets.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableassets.UniqueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Istimestamp_columnNull() As Boolean
            Return Me.IsNull(Me.tableassets.timestamp_columnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Settimestamp_columnNull()
            Me(Me.tableassets.timestamp_columnColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ASSETSNEWRow
        Inherits Global.System.Data.DataRow
        
        Private tableASSETSNEW As ASSETSNEWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableASSETSNEW = CType(Me.Table,ASSETSNEWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DESC() As String
            Get
                Try 
                    Return CType(Me(Me.tableASSETSNEW.DESCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DESC' in table 'ASSETSNEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableASSETSNEW.DESCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ASSETNO() As String
            Get
                Return CType(Me(Me.tableASSETSNEW.ASSETNOColumn),String)
            End Get
            Set
                Me(Me.tableASSETSNEW.ASSETNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property LOCATION() As String
            Get
                Try 
                    Return CType(Me(Me.tableASSETSNEW.LOCATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LOCATION' in table 'ASSETSNEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableASSETSNEW.LOCATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property CAT() As String
            Get
                Try 
                    Return CType(Me(Me.tableASSETSNEW.CATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CAT' in table 'ASSETSNEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableASSETSNEW.CATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property STATUS() As String
            Get
                Try 
                    Return CType(Me(Me.tableASSETSNEW.STATUSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'STATUS' in table 'ASSETSNEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableASSETSNEW.STATUSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MODELNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableASSETSNEW.MODELNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MODELNO' in table 'ASSETSNEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableASSETSNEW.MODELNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property SERIALNO() As String
            Get
                Try 
                    Return CType(Me(Me.tableASSETSNEW.SERIALNOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SERIALNO' in table 'ASSETSNEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableASSETSNEW.SERIALNOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DATACQUIR() As Date
            Get
                Try 
                    Return CType(Me(Me.tableASSETSNEW.DATACQUIRColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DATACQUIR' in table 'ASSETSNEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableASSETSNEW.DATACQUIRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property COMMENTS() As String
            Get
                Try 
                    Return CType(Me(Me.tableASSETSNEW.COMMENTSColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'COMMENTS' in table 'ASSETSNEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableASSETSNEW.COMMENTSColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property NEXTSCHED() As Date
            Get
                Try 
                    Return CType(Me(Me.tableASSETSNEW.NEXTSCHEDColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NEXTSCHED' in table 'ASSETSNEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableASSETSNEW.NEXTSCHEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _EVENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableASSETSNEW.EVENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EVENT' in table 'ASSETSNEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableASSETSNEW.EVENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property DEPT() As String
            Get
                Try 
                    Return CType(Me(Me.tableASSETSNEW.DEPTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DEPT' in table 'ASSETSNEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableASSETSNEW.DEPTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property MANUFACTUR() As String
            Get
                Try 
                    Return CType(Me(Me.tableASSETSNEW.MANUFACTURColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MANUFACTUR' in table 'ASSETSNEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableASSETSNEW.MANUFACTURColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDESCNull() As Boolean
            Return Me.IsNull(Me.tableASSETSNEW.DESCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDESCNull()
            Me(Me.tableASSETSNEW.DESCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsLOCATIONNull() As Boolean
            Return Me.IsNull(Me.tableASSETSNEW.LOCATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetLOCATIONNull()
            Me(Me.tableASSETSNEW.LOCATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCATNull() As Boolean
            Return Me.IsNull(Me.tableASSETSNEW.CATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCATNull()
            Me(Me.tableASSETSNEW.CATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSTATUSNull() As Boolean
            Return Me.IsNull(Me.tableASSETSNEW.STATUSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSTATUSNull()
            Me(Me.tableASSETSNEW.STATUSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMODELNONull() As Boolean
            Return Me.IsNull(Me.tableASSETSNEW.MODELNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMODELNONull()
            Me(Me.tableASSETSNEW.MODELNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsSERIALNONull() As Boolean
            Return Me.IsNull(Me.tableASSETSNEW.SERIALNOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetSERIALNONull()
            Me(Me.tableASSETSNEW.SERIALNOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDATACQUIRNull() As Boolean
            Return Me.IsNull(Me.tableASSETSNEW.DATACQUIRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDATACQUIRNull()
            Me(Me.tableASSETSNEW.DATACQUIRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsCOMMENTSNull() As Boolean
            Return Me.IsNull(Me.tableASSETSNEW.COMMENTSColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetCOMMENTSNull()
            Me(Me.tableASSETSNEW.COMMENTSColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsNEXTSCHEDNull() As Boolean
            Return Me.IsNull(Me.tableASSETSNEW.NEXTSCHEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetNEXTSCHEDNull()
            Me(Me.tableASSETSNEW.NEXTSCHEDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Is_EVENTNull() As Boolean
            Return Me.IsNull(Me.tableASSETSNEW.EVENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Set_EVENTNull()
            Me(Me.tableASSETSNEW.EVENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsDEPTNull() As Boolean
            Return Me.IsNull(Me.tableASSETSNEW.DEPTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetDEPTNull()
            Me(Me.tableASSETSNEW.DEPTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsMANUFACTURNull() As Boolean
            Return Me.IsNull(Me.tableASSETSNEW.MANUFACTURColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetMANUFACTURNull()
            Me(Me.tableASSETSNEW.MANUFACTURColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class atransRow
        Inherits Global.System.Data.DataRow
        
        Private tableatrans As atransDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableatrans = CType(Me.Table,atransDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property tassetno() As String
            Get
                Return CType(Me(Me.tableatrans.tassetnoColumn),String)
            End Get
            Set
                Me(Me.tableatrans.tassetnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property tdate() As Date
            Get
                Return CType(Me(Me.tableatrans.tdateColumn),Date)
            End Get
            Set
                Me(Me.tableatrans.tdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property tdirect() As String
            Get
                Return CType(Me(Me.tableatrans.tdirectColumn),String)
            End Get
            Set
                Me(Me.tableatrans.tdirectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property tdesc() As String
            Get
                Return CType(Me(Me.tableatrans.tdescColumn),String)
            End Get
            Set
                Me(Me.tableatrans.tdescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property twho() As String
            Get
                Return CType(Me(Me.tableatrans.twhoColumn),String)
            End Get
            Set
                Me(Me.tableatrans.twhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableatrans.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableatrans.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class binallocRow
        Inherits Global.System.Data.DataRow
        
        Private tablebinalloc As binallocDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablebinalloc = CType(Me.Table,binallocDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property binpart() As String
            Get
                Return CType(Me(Me.tablebinalloc.binpartColumn),String)
            End Get
            Set
                Me(Me.tablebinalloc.binpartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property binsup() As String
            Get
                Return CType(Me(Me.tablebinalloc.binsupColumn),String)
            End Get
            Set
                Me(Me.tablebinalloc.binsupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property binref() As String
            Get
                Return CType(Me(Me.tablebinalloc.binrefColumn),String)
            End Get
            Set
                Me(Me.tablebinalloc.binrefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property bincode() As String
            Get
                Return CType(Me(Me.tablebinalloc.bincodeColumn),String)
            End Get
            Set
                Me(Me.tablebinalloc.bincodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property binrecno() As Decimal
            Get
                Return CType(Me(Me.tablebinalloc.binrecnoColumn),Decimal)
            End Get
            Set
                Me(Me.tablebinalloc.binrecnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property binalloc() As Decimal
            Get
                Return CType(Me(Me.tablebinalloc.binallocColumn),Decimal)
            End Get
            Set
                Me(Me.tablebinalloc.binallocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property bininvno() As String
            Get
                Return CType(Me(Me.tablebinalloc.bininvnoColumn),String)
            End Get
            Set
                Me(Me.tablebinalloc.bininvnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property binwho() As String
            Get
                Return CType(Me(Me.tablebinalloc.binwhoColumn),String)
            End Get
            Set
                Me(Me.tablebinalloc.binwhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property bindate() As Date
            Get
                Return CType(Me(Me.tablebinalloc.bindateColumn),Date)
            End Get
            Set
                Me(Me.tablebinalloc.bindateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property binordno() As String
            Get
                Return CType(Me(Me.tablebinalloc.binordnoColumn),String)
            End Get
            Set
                Me(Me.tablebinalloc.binordnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property bline() As String
            Get
                Return CType(Me(Me.tablebinalloc.blineColumn),String)
            End Get
            Set
                Me(Me.tablebinalloc.blineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tablebinalloc.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tablebinalloc.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class catRow
        Inherits Global.System.Data.DataRow
        
        Private tablecat As catDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecat = CType(Me.Table,catDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property cdesc() As String
            Get
                Return CType(Me(Me.tablecat.cdescColumn),String)
            End Get
            Set
                Me(Me.tablecat.cdescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tablecat.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tablecat.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class countryRow
        Inherits Global.System.Data.DataRow
        
        Private tablecountry As countryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecountry = CType(Me.Table,countryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property cty_code() As String
            Get
                Return CType(Me(Me.tablecountry.cty_codeColumn),String)
            End Get
            Set
                Me(Me.tablecountry.cty_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property cty_name() As String
            Get
                Return CType(Me(Me.tablecountry.cty_nameColumn),String)
            End Get
            Set
                Me(Me.tablecountry.cty_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property peg_code() As String
            Get
                Return CType(Me(Me.tablecountry.peg_codeColumn),String)
            End Get
            Set
                Me(Me.tablecountry.peg_codeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property peg_curcy() As String
            Get
                Return CType(Me(Me.tablecountry.peg_curcyColumn),String)
            End Get
            Set
                Me(Me.tablecountry.peg_curcyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property inv_rate() As Decimal
            Get
                Return CType(Me(Me.tablecountry.inv_rateColumn),Decimal)
            End Get
            Set
                Me(Me.tablecountry.inv_rateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property erate() As Decimal
            Get
                Return CType(Me(Me.tablecountry.erateColumn),Decimal)
            End Get
            Set
                Me(Me.tablecountry.erateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tablecountry.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tablecountry.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class custdiscRow
        Inherits Global.System.Data.DataRow
        
        Private tablecustdisc As custdiscDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecustdisc = CType(Me.Table,custdiscDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property accno() As String
            Get
                Return CType(Me(Me.tablecustdisc.accnoColumn),String)
            End Get
            Set
                Me(Me.tablecustdisc.accnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property supplier() As String
            Get
                Return CType(Me(Me.tablecustdisc.supplierColumn),String)
            End Get
            Set
                Me(Me.tablecustdisc.supplierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property dpercent() As Decimal
            Get
                Return CType(Me(Me.tablecustdisc.dpercentColumn),Decimal)
            End Get
            Set
                Me(Me.tablecustdisc.dpercentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property spercent() As Decimal
            Get
                Return CType(Me(Me.tablecustdisc.spercentColumn),Decimal)
            End Get
            Set
                Me(Me.tablecustdisc.spercentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property svalue() As Decimal
            Get
                Return CType(Me(Me.tablecustdisc.svalueColumn),Decimal)
            End Get
            Set
                Me(Me.tablecustdisc.svalueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property showdisc() As Boolean
            Get
                Return CType(Me(Me.tablecustdisc.showdiscColumn),Boolean)
            End Get
            Set
                Me(Me.tablecustdisc.showdiscColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property dupdate() As Date
            Get
                Return CType(Me(Me.tablecustdisc.dupdateColumn),Date)
            End Get
            Set
                Me(Me.tablecustdisc.dupdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property dwho() As String
            Get
                Return CType(Me(Me.tablecustdisc.dwhoColumn),String)
            End Get
            Set
                Me(Me.tablecustdisc.dwhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tablecustdisc.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tablecustdisc.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class dummy_Row
        Inherits Global.System.Data.DataRow
        
        Private tabledummy_ As dummy_DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledummy_ = CType(Me.Table,dummy_DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property dummy1() As String
            Get
                Return CType(Me(Me.tabledummy_.dummy1Column),String)
            End Get
            Set
                Me(Me.tabledummy_.dummy1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tabledummy_.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tabledummy_.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class enquiryRow
        Inherits Global.System.Data.DataRow
        
        Private tableenquiry As enquiryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableenquiry = CType(Me.Table,enquiryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property quote_no() As String
            Get
                Return CType(Me(Me.tableenquiry.quote_noColumn),String)
            End Get
            Set
                Me(Me.tableenquiry.quote_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property cname() As String
            Get
                Try 
                    Return CType(Me(Me.tableenquiry.cnameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cname' in table 'enquiry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenquiry.cnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ref_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableenquiry.ref_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ref_no' in table 'enquiry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenquiry.ref_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property status() As String
            Get
                Try 
                    Return CType(Me(Me.tableenquiry.statusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'status' in table 'enquiry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenquiry.statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ewho() As String
            Get
                Try 
                    Return CType(Me(Me.tableenquiry.ewhoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ewho' in table 'enquiry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenquiry.ewhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property accno() As String
            Get
                Try 
                    Return CType(Me(Me.tableenquiry.accnoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'accno' in table 'enquiry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenquiry.accnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ememo() As String
            Get
                Try 
                    Return CType(Me(Me.tableenquiry.ememoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ememo' in table 'enquiry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenquiry.ememoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ship_name() As String
            Get
                Try 
                    Return CType(Me(Me.tableenquiry.ship_nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ship_name' in table 'enquiry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenquiry.ship_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property email() As String
            Get
                Try 
                    Return CType(Me(Me.tableenquiry.emailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'email' in table 'enquiry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenquiry.emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property mobtel_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableenquiry.mobtel_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'mobtel_no' in table 'enquiry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenquiry.mobtel_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property fax_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableenquiry.fax_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'fax_no' in table 'enquiry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenquiry.fax_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property tel_no() As String
            Get
                Try 
                    Return CType(Me(Me.tableenquiry.tel_noColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tel_no' in table 'enquiry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenquiry.tel_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property contact() As String
            Get
                Try 
                    Return CType(Me(Me.tableenquiry.contactColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'contact' in table 'enquiry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenquiry.contactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property edate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableenquiry.edateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'edate' in table 'enquiry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenquiry.edateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property etype() As String
            Get
                Try 
                    Return CType(Me(Me.tableenquiry.etypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'etype' in table 'enquiry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenquiry.etypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property timestamp_column() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableenquiry.timestamp_columnColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timestamp_column' in table 'enquiry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenquiry.timestamp_columnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Try 
                    Return CType(Me(Me.tableenquiry.UniqueIDColumn),Long)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UniqueID' in table 'enquiry' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableenquiry.UniqueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IscnameNull() As Boolean
            Return Me.IsNull(Me.tableenquiry.cnameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetcnameNull()
            Me(Me.tableenquiry.cnameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Isref_noNull() As Boolean
            Return Me.IsNull(Me.tableenquiry.ref_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setref_noNull()
            Me(Me.tableenquiry.ref_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsstatusNull() As Boolean
            Return Me.IsNull(Me.tableenquiry.statusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetstatusNull()
            Me(Me.tableenquiry.statusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsewhoNull() As Boolean
            Return Me.IsNull(Me.tableenquiry.ewhoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetewhoNull()
            Me(Me.tableenquiry.ewhoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsaccnoNull() As Boolean
            Return Me.IsNull(Me.tableenquiry.accnoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetaccnoNull()
            Me(Me.tableenquiry.accnoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsememoNull() As Boolean
            Return Me.IsNull(Me.tableenquiry.ememoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetememoNull()
            Me(Me.tableenquiry.ememoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Isship_nameNull() As Boolean
            Return Me.IsNull(Me.tableenquiry.ship_nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setship_nameNull()
            Me(Me.tableenquiry.ship_nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tableenquiry.emailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetemailNull()
            Me(Me.tableenquiry.emailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Ismobtel_noNull() As Boolean
            Return Me.IsNull(Me.tableenquiry.mobtel_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setmobtel_noNull()
            Me(Me.tableenquiry.mobtel_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Isfax_noNull() As Boolean
            Return Me.IsNull(Me.tableenquiry.fax_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setfax_noNull()
            Me(Me.tableenquiry.fax_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Istel_noNull() As Boolean
            Return Me.IsNull(Me.tableenquiry.tel_noColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Settel_noNull()
            Me(Me.tableenquiry.tel_noColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IscontactNull() As Boolean
            Return Me.IsNull(Me.tableenquiry.contactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetcontactNull()
            Me(Me.tableenquiry.contactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsedateNull() As Boolean
            Return Me.IsNull(Me.tableenquiry.edateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetedateNull()
            Me(Me.tableenquiry.edateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsetypeNull() As Boolean
            Return Me.IsNull(Me.tableenquiry.etypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetetypeNull()
            Me(Me.tableenquiry.etypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Istimestamp_columnNull() As Boolean
            Return Me.IsNull(Me.tableenquiry.timestamp_columnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Settimestamp_columnNull()
            Me(Me.tableenquiry.timestamp_columnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsUniqueIDNull() As Boolean
            Return Me.IsNull(Me.tableenquiry.UniqueIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetUniqueIDNull()
            Me(Me.tableenquiry.UniqueIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class eventRow
        Inherits Global.System.Data.DataRow
        
        Private tableevent As eventDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableevent = CType(Me.Table,eventDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property edesc() As String
            Get
                Return CType(Me(Me.tableevent.edescColumn),String)
            End Get
            Set
                Me(Me.tableevent.edescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableevent.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableevent.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class foxuserRow
        Inherits Global.System.Data.DataRow
        
        Private tablefoxuser As foxuserDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablefoxuser = CType(Me.Table,foxuserDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property type() As String
            Get
                Return CType(Me(Me.tablefoxuser.typeColumn),String)
            End Get
            Set
                Me(Me.tablefoxuser.typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property id() As String
            Get
                Return CType(Me(Me.tablefoxuser.idColumn),String)
            End Get
            Set
                Me(Me.tablefoxuser.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property name() As String
            Get
                Return CType(Me(Me.tablefoxuser.nameColumn),String)
            End Get
            Set
                Me(Me.tablefoxuser.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _readonly() As Boolean
            Get
                Return CType(Me(Me.tablefoxuser.readonlyColumn),Boolean)
            End Get
            Set
                Me(Me.tablefoxuser.readonlyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ckval() As Decimal
            Get
                Return CType(Me(Me.tablefoxuser.ckvalColumn),Decimal)
            End Get
            Set
                Me(Me.tablefoxuser.ckvalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property data() As String
            Get
                Return CType(Me(Me.tablefoxuser.dataColumn),String)
            End Get
            Set
                Me(Me.tablefoxuser.dataColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property updated() As Date
            Get
                Return CType(Me(Me.tablefoxuser.updatedColumn),Date)
            End Get
            Set
                Me(Me.tablefoxuser.updatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property timestamp_column() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablefoxuser.timestamp_columnColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timestamp_column' in table 'foxuser' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoxuser.timestamp_columnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tablefoxuser.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tablefoxuser.UniqueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Istimestamp_columnNull() As Boolean
            Return Me.IsNull(Me.tablefoxuser.timestamp_columnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Settimestamp_columnNull()
            Me(Me.tablefoxuser.timestamp_columnColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class invlineRow
        Inherits Global.System.Data.DataRow
        
        Private tableinvline As invlineDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableinvline = CType(Me.Table,invlineDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property linvno() As String
            Get
                Return CType(Me(Me.tableinvline.linvnoColumn),String)
            End Get
            Set
                Me(Me.tableinvline.linvnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lineno_() As String
            Get
                Return CType(Me(Me.tableinvline.lineno_Column),String)
            End Get
            Set
                Me(Me.tableinvline.lineno_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qty() As Decimal
            Get
                Return CType(Me(Me.tableinvline.qtyColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvline.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ldesc() As String
            Get
                Return CType(Me(Me.tableinvline.ldescColumn),String)
            End Get
            Set
                Me(Me.tableinvline.ldescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lamount() As Decimal
            Get
                Return CType(Me(Me.tableinvline.lamountColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvline.lamountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ltotal() As Decimal
            Get
                Return CType(Me(Me.tableinvline.ltotalColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvline.ltotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lvat() As Decimal
            Get
                Return CType(Me(Me.tableinvline.lvatColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvline.lvatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lmemo() As String
            Get
                Return CType(Me(Me.tableinvline.lmemoColumn),String)
            End Get
            Set
                Me(Me.tableinvline.lmemoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property timestamp_column() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableinvline.timestamp_columnColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timestamp_column' in table 'invline' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinvline.timestamp_columnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableinvline.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableinvline.UniqueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Istimestamp_columnNull() As Boolean
            Return Me.IsNull(Me.tableinvline.timestamp_columnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Settimestamp_columnNull()
            Me(Me.tableinvline.timestamp_columnColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class invoiceheadRow
        Inherits Global.System.Data.DataRow
        
        Private tableinvoicehead As invoiceheadDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableinvoicehead = CType(Me.Table,invoiceheadDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iaccno() As String
            Get
                Return CType(Me(Me.tableinvoicehead.iaccnoColumn),String)
            End Get
            Set
                Me(Me.tableinvoicehead.iaccnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property invno() As String
            Get
                Return CType(Me(Me.tableinvoicehead.invnoColumn),String)
            End Get
            Set
                Me(Me.tableinvoicehead.invnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property idate() As Date
            Get
                Return CType(Me(Me.tableinvoicehead.idateColumn),Date)
            End Get
            Set
                Me(Me.tableinvoicehead.idateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property pdate() As Date
            Get
                Return CType(Me(Me.tableinvoicehead.pdateColumn),Date)
            End Get
            Set
                Me(Me.tableinvoicehead.pdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iamount() As Decimal
            Get
                Return CType(Me(Me.tableinvoicehead.iamountColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvoicehead.iamountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property vatamount() As Decimal
            Get
                Return CType(Me(Me.tableinvoicehead.vatamountColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvoicehead.vatamountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableinvoicehead.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableinvoicehead.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class invtransRow
        Inherits Global.System.Data.DataRow
        
        Private tableinvtrans As invtransDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableinvtrans = CType(Me.Table,invtransDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property doc_ref() As String
            Get
                Return CType(Me(Me.tableinvtrans.doc_refColumn),String)
            End Get
            Set
                Me(Me.tableinvtrans.doc_refColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ddate() As Date
            Get
                Return CType(Me(Me.tableinvtrans.ddateColumn),Date)
            End Get
            Set
                Me(Me.tableinvtrans.ddateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property rec_type() As String
            Get
                Return CType(Me(Me.tableinvtrans.rec_typeColumn),String)
            End Get
            Set
                Me(Me.tableinvtrans.rec_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property line_no() As Decimal
            Get
                Return CType(Me(Me.tableinvtrans.line_noColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtrans.line_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property partid() As String
            Get
                Return CType(Me(Me.tableinvtrans.partidColumn),String)
            End Get
            Set
                Me(Me.tableinvtrans.partidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iicode() As String
            Get
                Return CType(Me(Me.tableinvtrans.iicodeColumn),String)
            End Get
            Set
                Me(Me.tableinvtrans.iicodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qty_ord() As Decimal
            Get
                Return CType(Me(Me.tableinvtrans.qty_ordColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtrans.qty_ordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qty_sent() As Decimal
            Get
                Return CType(Me(Me.tableinvtrans.qty_sentColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtrans.qty_sentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property assured() As String
            Get
                Return CType(Me(Me.tableinvtrans.assuredColumn),String)
            End Get
            Set
                Me(Me.tableinvtrans.assuredColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property desc_area() As String
            Get
                Return CType(Me(Me.tableinvtrans.desc_areaColumn),String)
            End Get
            Set
                Me(Me.tableinvtrans.desc_areaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property uprice() As Decimal
            Get
                Return CType(Me(Me.tableinvtrans.upriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtrans.upriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property pc_disc() As Decimal
            Get
                Return CType(Me(Me.tableinvtrans.pc_discColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtrans.pc_discColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property up_disc() As Decimal
            Get
                Return CType(Me(Me.tableinvtrans.up_discColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtrans.up_discColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property curcyprice() As String
            Get
                Return CType(Me(Me.tableinvtrans.curcypriceColumn),String)
            End Get
            Set
                Me(Me.tableinvtrans.curcypriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property currency() As String
            Get
                Return CType(Me(Me.tableinvtrans.currencyColumn),String)
            End Get
            Set
                Me(Me.tableinvtrans.currencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property bin_ref() As String
            Get
                Return CType(Me(Me.tableinvtrans.bin_refColumn),String)
            End Get
            Set
                Me(Me.tableinvtrans.bin_refColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property bin_recd() As Decimal
            Get
                Return CType(Me(Me.tableinvtrans.bin_recdColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtrans.bin_recdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iwho() As String
            Get
                Return CType(Me(Me.tableinvtrans.iwhoColumn),String)
            End Get
            Set
                Me(Me.tableinvtrans.iwhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ldate() As Date
            Get
                Return CType(Me(Me.tableinvtrans.ldateColumn),Date)
            End Get
            Set
                Me(Me.tableinvtrans.ldateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property order_() As String
            Get
                Return CType(Me(Me.tableinvtrans.order_Column),String)
            End Get
            Set
                Me(Me.tableinvtrans.order_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property supplier() As String
            Get
                Return CType(Me(Me.tableinvtrans.supplierColumn),String)
            End Get
            Set
                Me(Me.tableinvtrans.supplierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableinvtrans.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableinvtrans.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class invtransoldRow
        Inherits Global.System.Data.DataRow
        
        Private tableinvtransold As invtransoldDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableinvtransold = CType(Me.Table,invtransoldDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property doc_ref() As String
            Get
                Return CType(Me(Me.tableinvtransold.doc_refColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold.doc_refColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ddate() As Date
            Get
                Return CType(Me(Me.tableinvtransold.ddateColumn),Date)
            End Get
            Set
                Me(Me.tableinvtransold.ddateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property rec_type() As String
            Get
                Return CType(Me(Me.tableinvtransold.rec_typeColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold.rec_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property line_no() As Decimal
            Get
                Return CType(Me(Me.tableinvtransold.line_noColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtransold.line_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property partid() As String
            Get
                Return CType(Me(Me.tableinvtransold.partidColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold.partidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iicode() As String
            Get
                Return CType(Me(Me.tableinvtransold.iicodeColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold.iicodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qty_ord() As Decimal
            Get
                Return CType(Me(Me.tableinvtransold.qty_ordColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtransold.qty_ordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qty_sent() As Decimal
            Get
                Return CType(Me(Me.tableinvtransold.qty_sentColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtransold.qty_sentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property assured() As String
            Get
                Return CType(Me(Me.tableinvtransold.assuredColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold.assuredColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property desc_area() As String
            Get
                Return CType(Me(Me.tableinvtransold.desc_areaColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold.desc_areaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property uprice() As Decimal
            Get
                Return CType(Me(Me.tableinvtransold.upriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtransold.upriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property pc_disc() As Decimal
            Get
                Return CType(Me(Me.tableinvtransold.pc_discColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtransold.pc_discColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property up_disc() As Decimal
            Get
                Return CType(Me(Me.tableinvtransold.up_discColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtransold.up_discColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property curcyprice() As String
            Get
                Return CType(Me(Me.tableinvtransold.curcypriceColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold.curcypriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property currency() As String
            Get
                Return CType(Me(Me.tableinvtransold.currencyColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold.currencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property bin_ref() As String
            Get
                Return CType(Me(Me.tableinvtransold.bin_refColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold.bin_refColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property bin_recd() As Decimal
            Get
                Return CType(Me(Me.tableinvtransold.bin_recdColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtransold.bin_recdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iwho() As String
            Get
                Return CType(Me(Me.tableinvtransold.iwhoColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold.iwhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ldate() As Date
            Get
                Return CType(Me(Me.tableinvtransold.ldateColumn),Date)
            End Get
            Set
                Me(Me.tableinvtransold.ldateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property order_() As String
            Get
                Return CType(Me(Me.tableinvtransold.order_Column),String)
            End Get
            Set
                Me(Me.tableinvtransold.order_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property supplier() As String
            Get
                Return CType(Me(Me.tableinvtransold.supplierColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold.supplierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableinvtransold.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableinvtransold.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class invtransold6Row
        Inherits Global.System.Data.DataRow
        
        Private tableinvtransold6 As invtransold6DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableinvtransold6 = CType(Me.Table,invtransold6DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property doc_ref() As String
            Get
                Return CType(Me(Me.tableinvtransold6.doc_refColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold6.doc_refColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ddate() As Date
            Get
                Return CType(Me(Me.tableinvtransold6.ddateColumn),Date)
            End Get
            Set
                Me(Me.tableinvtransold6.ddateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property rec_type() As String
            Get
                Return CType(Me(Me.tableinvtransold6.rec_typeColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold6.rec_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property line_no() As Decimal
            Get
                Return CType(Me(Me.tableinvtransold6.line_noColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtransold6.line_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property partid() As String
            Get
                Return CType(Me(Me.tableinvtransold6.partidColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold6.partidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iicode() As String
            Get
                Return CType(Me(Me.tableinvtransold6.iicodeColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold6.iicodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qty_ord() As Decimal
            Get
                Return CType(Me(Me.tableinvtransold6.qty_ordColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtransold6.qty_ordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qty_sent() As Decimal
            Get
                Return CType(Me(Me.tableinvtransold6.qty_sentColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtransold6.qty_sentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property assured() As String
            Get
                Return CType(Me(Me.tableinvtransold6.assuredColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold6.assuredColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property desc_area() As String
            Get
                Return CType(Me(Me.tableinvtransold6.desc_areaColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold6.desc_areaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property uprice() As Decimal
            Get
                Return CType(Me(Me.tableinvtransold6.upriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtransold6.upriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property pc_disc() As Decimal
            Get
                Return CType(Me(Me.tableinvtransold6.pc_discColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtransold6.pc_discColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property up_disc() As Decimal
            Get
                Return CType(Me(Me.tableinvtransold6.up_discColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtransold6.up_discColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property curcyprice() As String
            Get
                Return CType(Me(Me.tableinvtransold6.curcypriceColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold6.curcypriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property currency() As String
            Get
                Return CType(Me(Me.tableinvtransold6.currencyColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold6.currencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property bin_ref() As String
            Get
                Return CType(Me(Me.tableinvtransold6.bin_refColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold6.bin_refColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property bin_recd() As Decimal
            Get
                Return CType(Me(Me.tableinvtransold6.bin_recdColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvtransold6.bin_recdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iwho() As String
            Get
                Return CType(Me(Me.tableinvtransold6.iwhoColumn),String)
            End Get
            Set
                Me(Me.tableinvtransold6.iwhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ldate() As Date
            Get
                Return CType(Me(Me.tableinvtransold6.ldateColumn),Date)
            End Get
            Set
                Me(Me.tableinvtransold6.ldateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableinvtransold6.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableinvtransold6.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class invworkRow
        Inherits Global.System.Data.DataRow
        
        Private tableinvwork As invworkDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableinvwork = CType(Me.Table,invworkDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property doc_ref() As String
            Get
                Return CType(Me(Me.tableinvwork.doc_refColumn),String)
            End Get
            Set
                Me(Me.tableinvwork.doc_refColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ddate() As Date
            Get
                Return CType(Me(Me.tableinvwork.ddateColumn),Date)
            End Get
            Set
                Me(Me.tableinvwork.ddateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property rec_type() As String
            Get
                Return CType(Me(Me.tableinvwork.rec_typeColumn),String)
            End Get
            Set
                Me(Me.tableinvwork.rec_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property line_no() As Decimal
            Get
                Return CType(Me(Me.tableinvwork.line_noColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvwork.line_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property partid() As String
            Get
                Return CType(Me(Me.tableinvwork.partidColumn),String)
            End Get
            Set
                Me(Me.tableinvwork.partidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iicode() As String
            Get
                Return CType(Me(Me.tableinvwork.iicodeColumn),String)
            End Get
            Set
                Me(Me.tableinvwork.iicodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qty_ord() As Decimal
            Get
                Return CType(Me(Me.tableinvwork.qty_ordColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvwork.qty_ordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qty_sent() As Decimal
            Get
                Return CType(Me(Me.tableinvwork.qty_sentColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvwork.qty_sentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property assured() As String
            Get
                Return CType(Me(Me.tableinvwork.assuredColumn),String)
            End Get
            Set
                Me(Me.tableinvwork.assuredColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property desc_area() As String
            Get
                Return CType(Me(Me.tableinvwork.desc_areaColumn),String)
            End Get
            Set
                Me(Me.tableinvwork.desc_areaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property uprice() As Decimal
            Get
                Return CType(Me(Me.tableinvwork.upriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvwork.upriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property pc_disc() As Decimal
            Get
                Return CType(Me(Me.tableinvwork.pc_discColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvwork.pc_discColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property up_disc() As Decimal
            Get
                Return CType(Me(Me.tableinvwork.up_discColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvwork.up_discColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property curcyprice() As String
            Get
                Return CType(Me(Me.tableinvwork.curcypriceColumn),String)
            End Get
            Set
                Me(Me.tableinvwork.curcypriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property currency() As String
            Get
                Return CType(Me(Me.tableinvwork.currencyColumn),String)
            End Get
            Set
                Me(Me.tableinvwork.currencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property bin_ref() As String
            Get
                Return CType(Me(Me.tableinvwork.bin_refColumn),String)
            End Get
            Set
                Me(Me.tableinvwork.bin_refColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property bin_recd() As Decimal
            Get
                Return CType(Me(Me.tableinvwork.bin_recdColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvwork.bin_recdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iwho() As String
            Get
                Return CType(Me(Me.tableinvwork.iwhoColumn),String)
            End Get
            Set
                Me(Me.tableinvwork.iwhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ldate() As Date
            Get
                Return CType(Me(Me.tableinvwork.ldateColumn),Date)
            End Get
            Set
                Me(Me.tableinvwork.ldateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property order_() As String
            Get
                Return CType(Me(Me.tableinvwork.order_Column),String)
            End Get
            Set
                Me(Me.tableinvwork.order_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property supplier() As String
            Get
                Return CType(Me(Me.tableinvwork.supplierColumn),String)
            End Get
            Set
                Me(Me.tableinvwork.supplierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableinvwork.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableinvwork.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class invworkoldRow
        Inherits Global.System.Data.DataRow
        
        Private tableinvworkold As invworkoldDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableinvworkold = CType(Me.Table,invworkoldDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property doc_ref() As String
            Get
                Return CType(Me(Me.tableinvworkold.doc_refColumn),String)
            End Get
            Set
                Me(Me.tableinvworkold.doc_refColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ddate() As Date
            Get
                Return CType(Me(Me.tableinvworkold.ddateColumn),Date)
            End Get
            Set
                Me(Me.tableinvworkold.ddateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property rec_type() As String
            Get
                Return CType(Me(Me.tableinvworkold.rec_typeColumn),String)
            End Get
            Set
                Me(Me.tableinvworkold.rec_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property line_no() As Decimal
            Get
                Return CType(Me(Me.tableinvworkold.line_noColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvworkold.line_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property partid() As String
            Get
                Return CType(Me(Me.tableinvworkold.partidColumn),String)
            End Get
            Set
                Me(Me.tableinvworkold.partidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iicode() As String
            Get
                Return CType(Me(Me.tableinvworkold.iicodeColumn),String)
            End Get
            Set
                Me(Me.tableinvworkold.iicodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qty_ord() As Decimal
            Get
                Return CType(Me(Me.tableinvworkold.qty_ordColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvworkold.qty_ordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qty_sent() As Decimal
            Get
                Return CType(Me(Me.tableinvworkold.qty_sentColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvworkold.qty_sentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property assured() As String
            Get
                Return CType(Me(Me.tableinvworkold.assuredColumn),String)
            End Get
            Set
                Me(Me.tableinvworkold.assuredColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property desc_area() As String
            Get
                Return CType(Me(Me.tableinvworkold.desc_areaColumn),String)
            End Get
            Set
                Me(Me.tableinvworkold.desc_areaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property uprice() As Decimal
            Get
                Return CType(Me(Me.tableinvworkold.upriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvworkold.upriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property pc_disc() As Decimal
            Get
                Return CType(Me(Me.tableinvworkold.pc_discColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvworkold.pc_discColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property up_disc() As Decimal
            Get
                Return CType(Me(Me.tableinvworkold.up_discColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvworkold.up_discColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property curcyprice() As String
            Get
                Return CType(Me(Me.tableinvworkold.curcypriceColumn),String)
            End Get
            Set
                Me(Me.tableinvworkold.curcypriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property currency() As String
            Get
                Return CType(Me(Me.tableinvworkold.currencyColumn),String)
            End Get
            Set
                Me(Me.tableinvworkold.currencyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property bin_ref() As String
            Get
                Return CType(Me(Me.tableinvworkold.bin_refColumn),String)
            End Get
            Set
                Me(Me.tableinvworkold.bin_refColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property bin_recd() As Decimal
            Get
                Return CType(Me(Me.tableinvworkold.bin_recdColumn),Decimal)
            End Get
            Set
                Me(Me.tableinvworkold.bin_recdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iwho() As String
            Get
                Return CType(Me(Me.tableinvworkold.iwhoColumn),String)
            End Get
            Set
                Me(Me.tableinvworkold.iwhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ldate() As Date
            Get
                Return CType(Me(Me.tableinvworkold.ldateColumn),Date)
            End Get
            Set
                Me(Me.tableinvworkold.ldateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableinvworkold.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableinvworkold.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class issueRow
        Inherits Global.System.Data.DataRow
        
        Private tableissue As issueDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableissue = CType(Me.Table,issueDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property pno() As String
            Get
                Return CType(Me(Me.tableissue.pnoColumn),String)
            End Get
            Set
                Me(Me.tableissue.pnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property issue() As String
            Get
                Return CType(Me(Me.tableissue.issueColumn),String)
            End Get
            Set
                Me(Me.tableissue.issueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property idate() As Date
            Get
                Return CType(Me(Me.tableissue.idateColumn),Date)
            End Get
            Set
                Me(Me.tableissue.idateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property idesc() As String
            Get
                Return CType(Me(Me.tableissue.idescColumn),String)
            End Get
            Set
                Me(Me.tableissue.idescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableissue.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableissue.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class locationRow
        Inherits Global.System.Data.DataRow
        
        Private tablelocation As locationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablelocation = CType(Me.Table,locationDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ldesc() As String
            Get
                Return CType(Me(Me.tablelocation.ldescColumn),String)
            End Get
            Set
                Me(Me.tablelocation.ldescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tablelocation.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tablelocation.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class mainRow
        Inherits Global.System.Data.DataRow
        
        Private tablemain As mainDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablemain = CType(Me.Table,mainDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property accno() As Decimal
            Get
                Return CType(Me(Me.tablemain.accnoColumn),Decimal)
            End Get
            Set
                Me(Me.tablemain.accnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property name() As String
            Get
                Return CType(Me(Me.tablemain.nameColumn),String)
            End Get
            Set
                Me(Me.tablemain.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property add1() As String
            Get
                Return CType(Me(Me.tablemain.add1Column),String)
            End Get
            Set
                Me(Me.tablemain.add1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property add2() As String
            Get
                Return CType(Me(Me.tablemain.add2Column),String)
            End Get
            Set
                Me(Me.tablemain.add2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property add3() As String
            Get
                Return CType(Me(Me.tablemain.add3Column),String)
            End Get
            Set
                Me(Me.tablemain.add3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property add4() As String
            Get
                Return CType(Me(Me.tablemain.add4Column),String)
            End Get
            Set
                Me(Me.tablemain.add4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property add5() As String
            Get
                Return CType(Me(Me.tablemain.add5Column),String)
            End Get
            Set
                Me(Me.tablemain.add5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property pcode() As String
            Get
                Return CType(Me(Me.tablemain.pcodeColumn),String)
            End Get
            Set
                Me(Me.tablemain.pcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property bankname() As String
            Get
                Return CType(Me(Me.tablemain.banknameColumn),String)
            End Get
            Set
                Me(Me.tablemain.banknameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property bankaccno() As String
            Get
                Return CType(Me(Me.tablemain.bankaccnoColumn),String)
            End Get
            Set
                Me(Me.tablemain.bankaccnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property banksort() As String
            Get
                Return CType(Me(Me.tablemain.banksortColumn),String)
            End Get
            Set
                Me(Me.tablemain.banksortColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property vatno() As String
            Get
                Return CType(Me(Me.tablemain.vatnoColumn),String)
            End Get
            Set
                Me(Me.tablemain.vatnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property vatrate() As Decimal
            Get
                Return CType(Me(Me.tablemain.vatrateColumn),Decimal)
            End Get
            Set
                Me(Me.tablemain.vatrateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property invoiceno() As Decimal
            Get
                Return CType(Me(Me.tablemain.invoicenoColumn),Decimal)
            End Get
            Set
                Me(Me.tablemain.invoicenoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property telno() As String
            Get
                Return CType(Me(Me.tablemain.telnoColumn),String)
            End Get
            Set
                Me(Me.tablemain.telnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property faxno() As String
            Get
                Return CType(Me(Me.tablemain.faxnoColumn),String)
            End Get
            Set
                Me(Me.tablemain.faxnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property email() As String
            Get
                Return CType(Me(Me.tablemain.emailColumn),String)
            End Get
            Set
                Me(Me.tablemain.emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tablemain.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tablemain.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class markupRow
        Inherits Global.System.Data.DataRow
        
        Private tablemarkup As markupDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablemarkup = CType(Me.Table,markupDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property supplier() As String
            Get
                Return CType(Me(Me.tablemarkup.supplierColumn),String)
            End Get
            Set
                Me(Me.tablemarkup.supplierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property countrycde() As String
            Get
                Return CType(Me(Me.tablemarkup.countrycdeColumn),String)
            End Get
            Set
                Me(Me.tablemarkup.countrycdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property sup_discpc() As Decimal
            Get
                Return CType(Me(Me.tablemarkup.sup_discpcColumn),Decimal)
            End Get
            Set
                Me(Me.tablemarkup.sup_discpcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property mupercent() As Decimal
            Get
                Return CType(Me(Me.tablemarkup.mupercentColumn),Decimal)
            End Get
            Set
                Me(Me.tablemarkup.mupercentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property who() As String
            Get
                Return CType(Me(Me.tablemarkup.whoColumn),String)
            End Get
            Set
                Me(Me.tablemarkup.whoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lupdate() As Date
            Get
                Return CType(Me(Me.tablemarkup.lupdateColumn),Date)
            End Get
            Set
                Me(Me.tablemarkup.lupdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property account() As String
            Get
                Return CType(Me(Me.tablemarkup.accountColumn),String)
            End Get
            Set
                Me(Me.tablemarkup.accountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property multi() As Boolean
            Get
                Return CType(Me(Me.tablemarkup.multiColumn),Boolean)
            End Get
            Set
                Me(Me.tablemarkup.multiColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ddays() As Decimal
            Get
                Return CType(Me(Me.tablemarkup.ddaysColumn),Decimal)
            End Get
            Set
                Me(Me.tablemarkup.ddaysColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tablemarkup.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tablemarkup.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class namesRow
        Inherits Global.System.Data.DataRow
        
        Private tablenames As namesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablenames = CType(Me.Table,namesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property name() As String
            Get
                Return CType(Me(Me.tablenames.nameColumn),String)
            End Get
            Set
                Me(Me.tablenames.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tablenames.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tablenames.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class orddetailRow
        Inherits Global.System.Data.DataRow
        
        Private tableorddetail As orddetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableorddetail = CType(Me.Table,orddetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property orderno() As String
            Get
                Return CType(Me(Me.tableorddetail.ordernoColumn),String)
            End Get
            Set
                Me(Me.tableorddetail.ordernoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property dinvno() As String
            Get
                Return CType(Me(Me.tableorddetail.dinvnoColumn),String)
            End Get
            Set
                Me(Me.tableorddetail.dinvnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property supplier() As String
            Get
                Return CType(Me(Me.tableorddetail.supplierColumn),String)
            End Get
            Set
                Me(Me.tableorddetail.supplierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property partno() As String
            Get
                Return CType(Me(Me.tableorddetail.partnoColumn),String)
            End Get
            Set
                Me(Me.tableorddetail.partnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property desc_() As String
            Get
                Return CType(Me(Me.tableorddetail.desc_Column),String)
            End Get
            Set
                Me(Me.tableorddetail.desc_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qtyord() As Decimal
            Get
                Return CType(Me(Me.tableorddetail.qtyordColumn),Decimal)
            End Get
            Set
                Me(Me.tableorddetail.qtyordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qtyrec() As Decimal
            Get
                Return CType(Me(Me.tableorddetail.qtyrecColumn),Decimal)
            End Get
            Set
                Me(Me.tableorddetail.qtyrecColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iicode() As String
            Get
                Return CType(Me(Me.tableorddetail.iicodeColumn),String)
            End Get
            Set
                Me(Me.tableorddetail.iicodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property locatebin() As String
            Get
                Return CType(Me(Me.tableorddetail.locatebinColumn),String)
            End Get
            Set
                Me(Me.tableorddetail.locatebinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property price() As Decimal
            Get
                Return CType(Me(Me.tableorddetail.priceColumn),Decimal)
            End Get
            Set
                Me(Me.tableorddetail.priceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property owho() As String
            Get
                Return CType(Me(Me.tableorddetail.owhoColumn),String)
            End Get
            Set
                Me(Me.tableorddetail.owhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ddate() As Date
            Get
                Return CType(Me(Me.tableorddetail.ddateColumn),Date)
            End Get
            Set
                Me(Me.tableorddetail.ddateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property otype() As String
            Get
                Return CType(Me(Me.tableorddetail.otypeColumn),String)
            End Get
            Set
                Me(Me.tableorddetail.otypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property recno() As Decimal
            Get
                Return CType(Me(Me.tableorddetail.recnoColumn),Decimal)
            End Get
            Set
                Me(Me.tableorddetail.recnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property oline() As String
            Get
                Return CType(Me(Me.tableorddetail.olineColumn),String)
            End Get
            Set
                Me(Me.tableorddetail.olineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property acode() As String
            Get
                Return CType(Me(Me.tableorddetail.acodeColumn),String)
            End Get
            Set
                Me(Me.tableorddetail.acodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property back2back() As Boolean
            Get
                Return CType(Me(Me.tableorddetail.back2backColumn),Boolean)
            End Get
            Set
                Me(Me.tableorddetail.back2backColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableorddetail.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableorddetail.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class orderheadRow
        Inherits Global.System.Data.DataRow
        
        Private tableorderhead As orderheadDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableorderhead = CType(Me.Table,orderheadDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property orderno() As String
            Get
                Return CType(Me(Me.tableorderhead.ordernoColumn),String)
            End Get
            Set
                Me(Me.tableorderhead.ordernoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property osupplier() As String
            Get
                Return CType(Me(Me.tableorderhead.osupplierColumn),String)
            End Get
            Set
                Me(Me.tableorderhead.osupplierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property osname() As String
            Get
                Return CType(Me(Me.tableorderhead.osnameColumn),String)
            End Get
            Set
                Me(Me.tableorderhead.osnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ocurr() As String
            Get
                Return CType(Me(Me.tableorderhead.ocurrColumn),String)
            End Get
            Set
                Me(Me.tableorderhead.ocurrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property oadd1() As String
            Get
                Return CType(Me(Me.tableorderhead.oadd1Column),String)
            End Get
            Set
                Me(Me.tableorderhead.oadd1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property oadd2() As String
            Get
                Return CType(Me(Me.tableorderhead.oadd2Column),String)
            End Get
            Set
                Me(Me.tableorderhead.oadd2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property oadd3() As String
            Get
                Return CType(Me(Me.tableorderhead.oadd3Column),String)
            End Get
            Set
                Me(Me.tableorderhead.oadd3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property oadd4() As String
            Get
                Return CType(Me(Me.tableorderhead.oadd4Column),String)
            End Get
            Set
                Me(Me.tableorderhead.oadd4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property oadd5() As String
            Get
                Return CType(Me(Me.tableorderhead.oadd5Column),String)
            End Get
            Set
                Me(Me.tableorderhead.oadd5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property oscontact() As String
            Get
                Return CType(Me(Me.tableorderhead.oscontactColumn),String)
            End Get
            Set
                Me(Me.tableorderhead.oscontactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ostelno() As String
            Get
                Return CType(Me(Me.tableorderhead.ostelnoColumn),String)
            End Get
            Set
                Me(Me.tableorderhead.ostelnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property osfaxno() As String
            Get
                Return CType(Me(Me.tableorderhead.osfaxnoColumn),String)
            End Get
            Set
                Me(Me.tableorderhead.osfaxnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property osemail() As String
            Get
                Return CType(Me(Me.tableorderhead.osemailColumn),String)
            End Get
            Set
                Me(Me.tableorderhead.osemailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property odate() As Date
            Get
                Return CType(Me(Me.tableorderhead.odateColumn),Date)
            End Get
            Set
                Me(Me.tableorderhead.odateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property oheader() As String
            Get
                Return CType(Me(Me.tableorderhead.oheaderColumn),String)
            End Get
            Set
                Me(Me.tableorderhead.oheaderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property omemo1() As String
            Get
                Return CType(Me(Me.tableorderhead.omemo1Column),String)
            End Get
            Set
                Me(Me.tableorderhead.omemo1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property omemo2() As String
            Get
                Return CType(Me(Me.tableorderhead.omemo2Column),String)
            End Get
            Set
                Me(Me.tableorderhead.omemo2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property omemo3() As String
            Get
                Return CType(Me(Me.tableorderhead.omemo3Column),String)
            End Get
            Set
                Me(Me.tableorderhead.omemo3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property omemo4() As String
            Get
                Return CType(Me(Me.tableorderhead.omemo4Column),String)
            End Get
            Set
                Me(Me.tableorderhead.omemo4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property odisc() As Boolean
            Get
                Return CType(Me(Me.tableorderhead.odiscColumn),Boolean)
            End Get
            Set
                Me(Me.tableorderhead.odiscColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property owho() As String
            Get
                Return CType(Me(Me.tableorderhead.owhoColumn),String)
            End Get
            Set
                Me(Me.tableorderhead.owhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property oinits() As String
            Get
                Return CType(Me(Me.tableorderhead.oinitsColumn),String)
            End Get
            Set
                Me(Me.tableorderhead.oinitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property osaccount() As String
            Get
                Return CType(Me(Me.tableorderhead.osaccountColumn),String)
            End Get
            Set
                Me(Me.tableorderhead.osaccountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property oprinted() As Boolean
            Get
                Return CType(Me(Me.tableorderhead.oprintedColumn),Boolean)
            End Get
            Set
                Me(Me.tableorderhead.oprintedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ddate() As Date
            Get
                Return CType(Me(Me.tableorderhead.ddateColumn),Date)
            End Get
            Set
                Me(Me.tableorderhead.ddateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property back2back() As Boolean
            Get
                Return CType(Me(Me.tableorderhead.back2backColumn),Boolean)
            End Get
            Set
                Me(Me.tableorderhead.back2backColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property timestamp_column() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableorderhead.timestamp_columnColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timestamp_column' in table 'orderhead' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableorderhead.timestamp_columnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableorderhead.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableorderhead.UniqueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Istimestamp_columnNull() As Boolean
            Return Me.IsNull(Me.tableorderhead.timestamp_columnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Settimestamp_columnNull()
            Me(Me.tableorderhead.timestamp_columnColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class orderlineRow
        Inherits Global.System.Data.DataRow
        
        Private tableorderline As orderlineDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableorderline = CType(Me.Table,orderlineDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lorderno() As String
            Get
                Return CType(Me(Me.tableorderline.lordernoColumn),String)
            End Get
            Set
                Me(Me.tableorderline.lordernoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property llineno() As String
            Get
                Return CType(Me(Me.tableorderline.llinenoColumn),String)
            End Get
            Set
                Me(Me.tableorderline.llinenoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lpartno() As String
            Get
                Return CType(Me(Me.tableorderline.lpartnoColumn),String)
            End Get
            Set
                Me(Me.tableorderline.lpartnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ldesc() As String
            Get
                Return CType(Me(Me.tableorderline.ldescColumn),String)
            End Get
            Set
                Me(Me.tableorderline.ldescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lqtyord() As Decimal
            Get
                Return CType(Me(Me.tableorderline.lqtyordColumn),Decimal)
            End Get
            Set
                Me(Me.tableorderline.lqtyordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lqtypart() As Decimal
            Get
                Return CType(Me(Me.tableorderline.lqtypartColumn),Decimal)
            End Get
            Set
                Me(Me.tableorderline.lqtypartColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lqtyrec() As Decimal
            Get
                Return CType(Me(Me.tableorderline.lqtyrecColumn),Decimal)
            End Get
            Set
                Me(Me.tableorderline.lqtyrecColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lprice() As Decimal
            Get
                Return CType(Me(Me.tableorderline.lpriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableorderline.lpriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property leprice() As Decimal
            Get
                Return CType(Me(Me.tableorderline.lepriceColumn),Decimal)
            End Get
            Set
                Me(Me.tableorderline.lepriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property liicode() As String
            Get
                Return CType(Me(Me.tableorderline.liicodeColumn),String)
            End Get
            Set
                Me(Me.tableorderline.liicodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property llocatebin() As String
            Get
                Return CType(Me(Me.tableorderline.llocatebinColumn),String)
            End Get
            Set
                Me(Me.tableorderline.llocatebinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lolinememo() As String
            Get
                Return CType(Me(Me.tableorderline.lolinememoColumn),String)
            End Get
            Set
                Me(Me.tableorderline.lolinememoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lnonstock() As Boolean
            Get
                Return CType(Me(Me.tableorderline.lnonstockColumn),Boolean)
            End Get
            Set
                Me(Me.tableorderline.lnonstockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lodate() As Date
            Get
                Return CType(Me(Me.tableorderline.lodateColumn),Date)
            End Get
            Set
                Me(Me.tableorderline.lodateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lrdate() As Date
            Get
                Return CType(Me(Me.tableorderline.lrdateColumn),Date)
            End Get
            Set
                Me(Me.tableorderline.lrdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lback2back() As Boolean
            Get
                Return CType(Me(Me.tableorderline.lback2backColumn),Boolean)
            End Get
            Set
                Me(Me.tableorderline.lback2backColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property timestamp_column() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableorderline.timestamp_columnColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timestamp_column' in table 'orderline' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableorderline.timestamp_columnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableorderline.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableorderline.UniqueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Istimestamp_columnNull() As Boolean
            Return Me.IsNull(Me.tableorderline.timestamp_columnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Settimestamp_columnNull()
            Me(Me.tableorderline.timestamp_columnColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class qictrlRow
        Inherits Global.System.Data.DataRow
        
        Private tableqictrl As qictrlDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableqictrl = CType(Me.Table,qictrlDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property quoteno() As String
            Get
                Return CType(Me(Me.tableqictrl.quotenoColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.quotenoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qdate() As Date
            Get
                Return CType(Me(Me.tableqictrl.qdateColumn),Date)
            End Get
            Set
                Me(Me.tableqictrl.qdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property cust_ref() As String
            Get
                Return CType(Me(Me.tableqictrl.cust_refColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.cust_refColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property cust_date() As Date
            Get
                Return CType(Me(Me.tableqictrl.cust_dateColumn),Date)
            End Get
            Set
                Me(Me.tableqictrl.cust_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property cdeldate() As Date
            Get
                Return CType(Me(Me.tableqictrl.cdeldateColumn),Date)
            End Get
            Set
                Me(Me.tableqictrl.cdeldateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property accountno() As String
            Get
                Return CType(Me(Me.tableqictrl.accountnoColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.accountnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property s_name() As String
            Get
                Return CType(Me(Me.tableqictrl.s_nameColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.s_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property contact() As String
            Get
                Return CType(Me(Me.tableqictrl.contactColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.contactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property holdnote() As String
            Get
                Return CType(Me(Me.tableqictrl.holdnoteColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.holdnoteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property invoice() As String
            Get
                Return CType(Me(Me.tableqictrl.invoiceColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.invoiceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property idate() As Date
            Get
                Return CType(Me(Me.tableqictrl.idateColumn),Date)
            End Get
            Set
                Me(Me.tableqictrl.idateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ediscpc() As Decimal
            Get
                Return CType(Me(Me.tableqictrl.ediscpcColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrl.ediscpcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ediscount() As Decimal
            Get
                Return CType(Me(Me.tableqictrl.ediscountColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrl.ediscountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iaddr() As String
            Get
                Return CType(Me(Me.tableqictrl.iaddrColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.iaddrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property daddr() As String
            Get
                Return CType(Me(Me.tableqictrl.daddrColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.daddrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property srequmnt() As String
            Get
                Return CType(Me(Me.tableqictrl.srequmntColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.srequmntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property termdays() As Decimal
            Get
                Return CType(Me(Me.tableqictrl.termdaysColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrl.termdaysColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property terms() As String
            Get
                Return CType(Me(Me.tableqictrl.termsColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.termsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property shipment() As String
            Get
                Return CType(Me(Me.tableqictrl.shipmentColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.shipmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property carriage() As Decimal
            Get
                Return CType(Me(Me.tableqictrl.carriageColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrl.carriageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property packing() As Decimal
            Get
                Return CType(Me(Me.tableqictrl.packingColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrl.packingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property vatpc() As Decimal
            Get
                Return CType(Me(Me.tableqictrl.vatpcColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrl.vatpcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property eurovat() As String
            Get
                Return CType(Me(Me.tableqictrl.eurovatColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.eurovatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property vatamt() As Decimal
            Get
                Return CType(Me(Me.tableqictrl.vatamtColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrl.vatamtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property t_parts() As Decimal
            Get
                Return CType(Me(Me.tableqictrl.t_partsColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrl.t_partsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property t_cost() As Decimal
            Get
                Return CType(Me(Me.tableqictrl.t_costColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrl.t_costColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property s_pdate() As Date
            Get
                Return CType(Me(Me.tableqictrl.s_pdateColumn),Date)
            End Get
            Set
                Me(Me.tableqictrl.s_pdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property s_paid() As Decimal
            Get
                Return CType(Me(Me.tableqictrl.s_paidColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrl.s_paidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property cpercent() As Decimal
            Get
                Return CType(Me(Me.tableqictrl.cpercentColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrl.cpercentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ccard() As Decimal
            Get
                Return CType(Me(Me.tableqictrl.ccardColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrl.ccardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property s_adjust() As Decimal
            Get
                Return CType(Me(Me.tableqictrl.s_adjustColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrl.s_adjustColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property s_acode() As String
            Get
                Return CType(Me(Me.tableqictrl.s_acodeColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.s_acodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property entrykd() As String
            Get
                Return CType(Me(Me.tableqictrl.entrykdColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.entrykdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property invcurcy() As String
            Get
                Return CType(Me(Me.tableqictrl.invcurcyColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.invcurcyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property invrexch() As Decimal
            Get
                Return CType(Me(Me.tableqictrl.invrexchColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrl.invrexchColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property back2back() As Boolean
            Get
                Return CType(Me(Me.tableqictrl.back2backColumn),Boolean)
            End Get
            Set
                Me(Me.tableqictrl.back2backColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property phone() As String
            Get
                Return CType(Me(Me.tableqictrl.phoneColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.phoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property fax() As String
            Get
                Return CType(Me(Me.tableqictrl.faxColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.faxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property email() As String
            Get
                Return CType(Me(Me.tableqictrl.emailColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property bustype() As String
            Get
                Return CType(Me(Me.tableqictrl.bustypeColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.bustypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qiwho() As String
            Get
                Return CType(Me(Me.tableqictrl.qiwhoColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.qiwhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qiuse() As String
            Get
                Return CType(Me(Me.tableqictrl.qiuseColumn),String)
            End Get
            Set
                Me(Me.tableqictrl.qiuseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property serv() As Boolean
            Get
                Return CType(Me(Me.tableqictrl.servColumn),Boolean)
            End Get
            Set
                Me(Me.tableqictrl.servColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property conf() As Boolean
            Get
                Return CType(Me(Me.tableqictrl.confColumn),Boolean)
            End Get
            Set
                Me(Me.tableqictrl.confColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property timestamp_column() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableqictrl.timestamp_columnColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timestamp_column' in table 'qictrl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqictrl.timestamp_columnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableqictrl.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableqictrl.UniqueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Istimestamp_columnNull() As Boolean
            Return Me.IsNull(Me.tableqictrl.timestamp_columnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Settimestamp_columnNull()
            Me(Me.tableqictrl.timestamp_columnColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class qictrlnewRow
        Inherits Global.System.Data.DataRow
        
        Private tableqictrlnew As qictrlnewDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableqictrlnew = CType(Me.Table,qictrlnewDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property quoteno() As String
            Get
                Return CType(Me(Me.tableqictrlnew.quotenoColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.quotenoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qdate() As Date
            Get
                Return CType(Me(Me.tableqictrlnew.qdateColumn),Date)
            End Get
            Set
                Me(Me.tableqictrlnew.qdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property cust_ref() As String
            Get
                Return CType(Me(Me.tableqictrlnew.cust_refColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.cust_refColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property cust_date() As Date
            Get
                Return CType(Me(Me.tableqictrlnew.cust_dateColumn),Date)
            End Get
            Set
                Me(Me.tableqictrlnew.cust_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property accountno() As String
            Get
                Return CType(Me(Me.tableqictrlnew.accountnoColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.accountnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property s_name() As String
            Get
                Return CType(Me(Me.tableqictrlnew.s_nameColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.s_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property contact() As String
            Get
                Return CType(Me(Me.tableqictrlnew.contactColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.contactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property holdnote() As String
            Get
                Return CType(Me(Me.tableqictrlnew.holdnoteColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.holdnoteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property invoice() As String
            Get
                Return CType(Me(Me.tableqictrlnew.invoiceColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.invoiceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property idate() As Date
            Get
                Return CType(Me(Me.tableqictrlnew.idateColumn),Date)
            End Get
            Set
                Me(Me.tableqictrlnew.idateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ediscpc() As Decimal
            Get
                Return CType(Me(Me.tableqictrlnew.ediscpcColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlnew.ediscpcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ediscount() As Decimal
            Get
                Return CType(Me(Me.tableqictrlnew.ediscountColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlnew.ediscountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iaddr() As String
            Get
                Return CType(Me(Me.tableqictrlnew.iaddrColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.iaddrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property daddr() As String
            Get
                Return CType(Me(Me.tableqictrlnew.daddrColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.daddrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property srequmnt() As String
            Get
                Return CType(Me(Me.tableqictrlnew.srequmntColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.srequmntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property termdays() As Decimal
            Get
                Return CType(Me(Me.tableqictrlnew.termdaysColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlnew.termdaysColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property terms() As String
            Get
                Return CType(Me(Me.tableqictrlnew.termsColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.termsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property shipment() As String
            Get
                Return CType(Me(Me.tableqictrlnew.shipmentColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.shipmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property carriage() As Decimal
            Get
                Return CType(Me(Me.tableqictrlnew.carriageColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlnew.carriageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property packing() As Decimal
            Get
                Return CType(Me(Me.tableqictrlnew.packingColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlnew.packingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property vatpc() As Decimal
            Get
                Return CType(Me(Me.tableqictrlnew.vatpcColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlnew.vatpcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property eurovat() As String
            Get
                Return CType(Me(Me.tableqictrlnew.eurovatColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.eurovatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property vatamt() As Decimal
            Get
                Return CType(Me(Me.tableqictrlnew.vatamtColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlnew.vatamtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property t_parts() As Decimal
            Get
                Return CType(Me(Me.tableqictrlnew.t_partsColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlnew.t_partsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property t_cost() As Decimal
            Get
                Return CType(Me(Me.tableqictrlnew.t_costColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlnew.t_costColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property s_pdate() As Date
            Get
                Return CType(Me(Me.tableqictrlnew.s_pdateColumn),Date)
            End Get
            Set
                Me(Me.tableqictrlnew.s_pdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property s_paid() As Decimal
            Get
                Return CType(Me(Me.tableqictrlnew.s_paidColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlnew.s_paidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property cpercent() As Decimal
            Get
                Return CType(Me(Me.tableqictrlnew.cpercentColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlnew.cpercentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ccard() As Decimal
            Get
                Return CType(Me(Me.tableqictrlnew.ccardColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlnew.ccardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property s_adjust() As Decimal
            Get
                Return CType(Me(Me.tableqictrlnew.s_adjustColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlnew.s_adjustColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property s_acode() As String
            Get
                Return CType(Me(Me.tableqictrlnew.s_acodeColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.s_acodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property entrykd() As String
            Get
                Return CType(Me(Me.tableqictrlnew.entrykdColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.entrykdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property invcurcy() As String
            Get
                Return CType(Me(Me.tableqictrlnew.invcurcyColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.invcurcyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property invrexch() As Decimal
            Get
                Return CType(Me(Me.tableqictrlnew.invrexchColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlnew.invrexchColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property back2back() As Boolean
            Get
                Return CType(Me(Me.tableqictrlnew.back2backColumn),Boolean)
            End Get
            Set
                Me(Me.tableqictrlnew.back2backColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property phone() As String
            Get
                Return CType(Me(Me.tableqictrlnew.phoneColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.phoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property fax() As String
            Get
                Return CType(Me(Me.tableqictrlnew.faxColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.faxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property email() As String
            Get
                Return CType(Me(Me.tableqictrlnew.emailColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property bustype() As String
            Get
                Return CType(Me(Me.tableqictrlnew.bustypeColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.bustypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qiwho() As String
            Get
                Return CType(Me(Me.tableqictrlnew.qiwhoColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.qiwhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qiuse() As String
            Get
                Return CType(Me(Me.tableqictrlnew.qiuseColumn),String)
            End Get
            Set
                Me(Me.tableqictrlnew.qiuseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property timestamp_column() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableqictrlnew.timestamp_columnColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timestamp_column' in table 'qictrlnew' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqictrlnew.timestamp_columnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableqictrlnew.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableqictrlnew.UniqueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Istimestamp_columnNull() As Boolean
            Return Me.IsNull(Me.tableqictrlnew.timestamp_columnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Settimestamp_columnNull()
            Me(Me.tableqictrlnew.timestamp_columnColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class qictrloldRow
        Inherits Global.System.Data.DataRow
        
        Private tableqictrlold As qictrloldDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableqictrlold = CType(Me.Table,qictrloldDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property quoteno() As String
            Get
                Return CType(Me(Me.tableqictrlold.quotenoColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.quotenoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qdate() As Date
            Get
                Return CType(Me(Me.tableqictrlold.qdateColumn),Date)
            End Get
            Set
                Me(Me.tableqictrlold.qdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property cust_ref() As String
            Get
                Return CType(Me(Me.tableqictrlold.cust_refColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.cust_refColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property cust_date() As Date
            Get
                Return CType(Me(Me.tableqictrlold.cust_dateColumn),Date)
            End Get
            Set
                Me(Me.tableqictrlold.cust_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property accountno() As String
            Get
                Return CType(Me(Me.tableqictrlold.accountnoColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.accountnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property s_name() As String
            Get
                Return CType(Me(Me.tableqictrlold.s_nameColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.s_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property contact() As String
            Get
                Return CType(Me(Me.tableqictrlold.contactColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.contactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property holdnote() As String
            Get
                Return CType(Me(Me.tableqictrlold.holdnoteColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.holdnoteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property invoice() As String
            Get
                Return CType(Me(Me.tableqictrlold.invoiceColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.invoiceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property idate() As Date
            Get
                Return CType(Me(Me.tableqictrlold.idateColumn),Date)
            End Get
            Set
                Me(Me.tableqictrlold.idateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ediscpc() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold.ediscpcColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold.ediscpcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ediscount() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold.ediscountColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold.ediscountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iaddr() As String
            Get
                Return CType(Me(Me.tableqictrlold.iaddrColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.iaddrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property daddr() As String
            Get
                Return CType(Me(Me.tableqictrlold.daddrColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.daddrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property srequmnt() As String
            Get
                Return CType(Me(Me.tableqictrlold.srequmntColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.srequmntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property termdays() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold.termdaysColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold.termdaysColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property terms() As String
            Get
                Return CType(Me(Me.tableqictrlold.termsColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.termsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property shipment() As String
            Get
                Return CType(Me(Me.tableqictrlold.shipmentColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.shipmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property carriage() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold.carriageColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold.carriageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property packing() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold.packingColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold.packingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property vatpc() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold.vatpcColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold.vatpcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property eurovat() As String
            Get
                Return CType(Me(Me.tableqictrlold.eurovatColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.eurovatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property vatamt() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold.vatamtColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold.vatamtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property t_parts() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold.t_partsColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold.t_partsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property t_cost() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold.t_costColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold.t_costColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property s_pdate() As Date
            Get
                Return CType(Me(Me.tableqictrlold.s_pdateColumn),Date)
            End Get
            Set
                Me(Me.tableqictrlold.s_pdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property s_paid() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold.s_paidColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold.s_paidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property cpercent() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold.cpercentColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold.cpercentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ccard() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold.ccardColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold.ccardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property s_adjust() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold.s_adjustColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold.s_adjustColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property s_acode() As String
            Get
                Return CType(Me(Me.tableqictrlold.s_acodeColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.s_acodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property entrykd() As String
            Get
                Return CType(Me(Me.tableqictrlold.entrykdColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.entrykdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property invcurcy() As String
            Get
                Return CType(Me(Me.tableqictrlold.invcurcyColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.invcurcyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property invrexch() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold.invrexchColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold.invrexchColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property back2back() As Boolean
            Get
                Return CType(Me(Me.tableqictrlold.back2backColumn),Boolean)
            End Get
            Set
                Me(Me.tableqictrlold.back2backColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property phone() As String
            Get
                Return CType(Me(Me.tableqictrlold.phoneColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.phoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property fax() As String
            Get
                Return CType(Me(Me.tableqictrlold.faxColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.faxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property email() As String
            Get
                Return CType(Me(Me.tableqictrlold.emailColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property bustype() As String
            Get
                Return CType(Me(Me.tableqictrlold.bustypeColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.bustypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qiwho() As String
            Get
                Return CType(Me(Me.tableqictrlold.qiwhoColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.qiwhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qiuse() As String
            Get
                Return CType(Me(Me.tableqictrlold.qiuseColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold.qiuseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property timestamp_column() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableqictrlold.timestamp_columnColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timestamp_column' in table 'qictrlold' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqictrlold.timestamp_columnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableqictrlold.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableqictrlold.UniqueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Istimestamp_columnNull() As Boolean
            Return Me.IsNull(Me.tableqictrlold.timestamp_columnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Settimestamp_columnNull()
            Me(Me.tableqictrlold.timestamp_columnColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class qictrlold6Row
        Inherits Global.System.Data.DataRow
        
        Private tableqictrlold6 As qictrlold6DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableqictrlold6 = CType(Me.Table,qictrlold6DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property quoteno() As String
            Get
                Return CType(Me(Me.tableqictrlold6.quotenoColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.quotenoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qdate() As Date
            Get
                Return CType(Me(Me.tableqictrlold6.qdateColumn),Date)
            End Get
            Set
                Me(Me.tableqictrlold6.qdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property cust_ref() As String
            Get
                Return CType(Me(Me.tableqictrlold6.cust_refColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.cust_refColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property cust_date() As Date
            Get
                Return CType(Me(Me.tableqictrlold6.cust_dateColumn),Date)
            End Get
            Set
                Me(Me.tableqictrlold6.cust_dateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property accountno() As String
            Get
                Return CType(Me(Me.tableqictrlold6.accountnoColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.accountnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property s_name() As String
            Get
                Return CType(Me(Me.tableqictrlold6.s_nameColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.s_nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property contact() As String
            Get
                Return CType(Me(Me.tableqictrlold6.contactColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.contactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property holdnote() As String
            Get
                Return CType(Me(Me.tableqictrlold6.holdnoteColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.holdnoteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property invoice() As String
            Get
                Return CType(Me(Me.tableqictrlold6.invoiceColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.invoiceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property idate() As Date
            Get
                Return CType(Me(Me.tableqictrlold6.idateColumn),Date)
            End Get
            Set
                Me(Me.tableqictrlold6.idateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ediscpc() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold6.ediscpcColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold6.ediscpcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ediscount() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold6.ediscountColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold6.ediscountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iaddr() As String
            Get
                Return CType(Me(Me.tableqictrlold6.iaddrColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.iaddrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property daddr() As String
            Get
                Return CType(Me(Me.tableqictrlold6.daddrColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.daddrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property srequmnt() As String
            Get
                Return CType(Me(Me.tableqictrlold6.srequmntColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.srequmntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property termdays() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold6.termdaysColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold6.termdaysColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property terms() As String
            Get
                Return CType(Me(Me.tableqictrlold6.termsColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.termsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property shipment() As String
            Get
                Return CType(Me(Me.tableqictrlold6.shipmentColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.shipmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property carriage() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold6.carriageColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold6.carriageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property packing() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold6.packingColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold6.packingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property vatpc() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold6.vatpcColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold6.vatpcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property eurovat() As String
            Get
                Return CType(Me(Me.tableqictrlold6.eurovatColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.eurovatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property vatamt() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold6.vatamtColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold6.vatamtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property t_parts() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold6.t_partsColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold6.t_partsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property t_cost() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold6.t_costColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold6.t_costColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property s_pdate() As Date
            Get
                Return CType(Me(Me.tableqictrlold6.s_pdateColumn),Date)
            End Get
            Set
                Me(Me.tableqictrlold6.s_pdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property s_paid() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold6.s_paidColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold6.s_paidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property cpercent() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold6.cpercentColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold6.cpercentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ccard() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold6.ccardColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold6.ccardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property s_adjust() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold6.s_adjustColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold6.s_adjustColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property s_acode() As String
            Get
                Return CType(Me(Me.tableqictrlold6.s_acodeColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.s_acodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property entrykd() As String
            Get
                Return CType(Me(Me.tableqictrlold6.entrykdColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.entrykdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property invcurcy() As String
            Get
                Return CType(Me(Me.tableqictrlold6.invcurcyColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.invcurcyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property invrexch() As Decimal
            Get
                Return CType(Me(Me.tableqictrlold6.invrexchColumn),Decimal)
            End Get
            Set
                Me(Me.tableqictrlold6.invrexchColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property back2back() As Boolean
            Get
                Return CType(Me(Me.tableqictrlold6.back2backColumn),Boolean)
            End Get
            Set
                Me(Me.tableqictrlold6.back2backColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property phone() As String
            Get
                Return CType(Me(Me.tableqictrlold6.phoneColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.phoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property fax() As String
            Get
                Return CType(Me(Me.tableqictrlold6.faxColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.faxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property email() As String
            Get
                Return CType(Me(Me.tableqictrlold6.emailColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property bustype() As String
            Get
                Return CType(Me(Me.tableqictrlold6.bustypeColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.bustypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qiwho() As String
            Get
                Return CType(Me(Me.tableqictrlold6.qiwhoColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.qiwhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qiuse() As String
            Get
                Return CType(Me(Me.tableqictrlold6.qiuseColumn),String)
            End Get
            Set
                Me(Me.tableqictrlold6.qiuseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property timestamp_column() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableqictrlold6.timestamp_columnColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timestamp_column' in table 'qictrlold6' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableqictrlold6.timestamp_columnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tableqictrlold6.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tableqictrlold6.UniqueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Istimestamp_columnNull() As Boolean
            Return Me.IsNull(Me.tableqictrlold6.timestamp_columnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Settimestamp_columnNull()
            Me(Me.tableqictrlold6.timestamp_columnColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class quotedetailRow
        Inherits Global.System.Data.DataRow
        
        Private tablequotedetail As quotedetailDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablequotedetail = CType(Me.Table,quotedetailDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property quote_no() As String
            Get
                Return CType(Me(Me.tablequotedetail.quote_noColumn),String)
            End Get
            Set
                Me(Me.tablequotedetail.quote_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property quote_suf() As String
            Get
                Return CType(Me(Me.tablequotedetail.quote_sufColumn),String)
            End Get
            Set
                Me(Me.tablequotedetail.quote_sufColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qline_no() As String
            Get
                Return CType(Me(Me.tablequotedetail.qline_noColumn),String)
            End Get
            Set
                Me(Me.tablequotedetail.qline_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property quantity() As Decimal
            Get
                Return CType(Me(Me.tablequotedetail.quantityColumn),Decimal)
            End Get
            Set
                Me(Me.tablequotedetail.quantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qpart_no() As String
            Get
                Return CType(Me(Me.tablequotedetail.qpart_noColumn),String)
            End Get
            Set
                Me(Me.tablequotedetail.qpart_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qdesc() As String
            Get
                Return CType(Me(Me.tablequotedetail.qdescColumn),String)
            End Get
            Set
                Me(Me.tablequotedetail.qdescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qline_memo() As String
            Get
                Return CType(Me(Me.tablequotedetail.qline_memoColumn),String)
            End Get
            Set
                Me(Me.tablequotedetail.qline_memoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qvalue() As Decimal
            Get
                Return CType(Me(Me.tablequotedetail.qvalueColumn),Decimal)
            End Get
            Set
                Me(Me.tablequotedetail.qvalueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property nonstock() As Boolean
            Get
                Return CType(Me(Me.tablequotedetail.nonstockColumn),Boolean)
            End Get
            Set
                Me(Me.tablequotedetail.nonstockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property timestamp_column() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablequotedetail.timestamp_columnColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timestamp_column' in table 'quotedetail' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablequotedetail.timestamp_columnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tablequotedetail.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tablequotedetail.UniqueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Istimestamp_columnNull() As Boolean
            Return Me.IsNull(Me.tablequotedetail.timestamp_columnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Settimestamp_columnNull()
            Me(Me.tablequotedetail.timestamp_columnColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class quoteheadRow
        Inherits Global.System.Data.DataRow
        
        Private tablequotehead As quoteheadDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablequotehead = CType(Me.Table,quoteheadDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property quote_no() As String
            Get
                Return CType(Me(Me.tablequotehead.quote_noColumn),String)
            End Get
            Set
                Me(Me.tablequotehead.quote_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property quote_suf() As String
            Get
                Return CType(Me(Me.tablequotehead.quote_sufColumn),String)
            End Get
            Set
                Me(Me.tablequotehead.quote_sufColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qdate() As Date
            Get
                Return CType(Me(Me.tablequotehead.qdateColumn),Date)
            End Get
            Set
                Me(Me.tablequotehead.qdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qheader() As String
            Get
                Return CType(Me(Me.tablequotehead.qheaderColumn),String)
            End Get
            Set
                Me(Me.tablequotehead.qheaderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qmemo1() As String
            Get
                Return CType(Me(Me.tablequotehead.qmemo1Column),String)
            End Get
            Set
                Me(Me.tablequotehead.qmemo1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qmemo2() As String
            Get
                Return CType(Me(Me.tablequotehead.qmemo2Column),String)
            End Get
            Set
                Me(Me.tablequotehead.qmemo2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qmemo3() As String
            Get
                Return CType(Me(Me.tablequotehead.qmemo3Column),String)
            End Get
            Set
                Me(Me.tablequotehead.qmemo3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qmemo4() As String
            Get
                Return CType(Me(Me.tablequotehead.qmemo4Column),String)
            End Get
            Set
                Me(Me.tablequotehead.qmemo4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qdisc() As Boolean
            Get
                Return CType(Me(Me.tablequotehead.qdiscColumn),Boolean)
            End Get
            Set
                Me(Me.tablequotehead.qdiscColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qwho() As String
            Get
                Return CType(Me(Me.tablequotehead.qwhoColumn),String)
            End Get
            Set
                Me(Me.tablequotehead.qwhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property qinits() As String
            Get
                Return CType(Me(Me.tablequotehead.qinitsColumn),String)
            End Get
            Set
                Me(Me.tablequotehead.qinitsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property timestamp_column() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablequotehead.timestamp_columnColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timestamp_column' in table 'quotehead' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablequotehead.timestamp_columnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tablequotehead.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tablequotehead.UniqueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Istimestamp_columnNull() As Boolean
            Return Me.IsNull(Me.tablequotehead.timestamp_columnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Settimestamp_columnNull()
            Me(Me.tablequotehead.timestamp_columnColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class statusRow
        Inherits Global.System.Data.DataRow
        
        Private tablestatus As statusDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablestatus = CType(Me.Table,statusDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property status() As String
            Get
                Return CType(Me(Me.tablestatus.statusColumn),String)
            End Get
            Set
                Me(Me.tablestatus.statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tablestatus.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tablestatus.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class teventsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletevents As teventsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletevents = CType(Me.Table,teventsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property eassetno() As String
            Get
                Return CType(Me(Me.tabletevents.eassetnoColumn),String)
            End Get
            Set
                Me(Me.tabletevents.eassetnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property edate() As Date
            Get
                Return CType(Me(Me.tabletevents.edateColumn),Date)
            End Get
            Set
                Me(Me.tabletevents.edateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property _event() As String
            Get
                Return CType(Me(Me.tabletevents.eventColumn),String)
            End Get
            Set
                Me(Me.tabletevents.eventColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property edesc() As String
            Get
                Return CType(Me(Me.tabletevents.edescColumn),String)
            End Get
            Set
                Me(Me.tabletevents.edescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ewho() As String
            Get
                Return CType(Me(Me.tabletevents.ewhoColumn),String)
            End Get
            Set
                Me(Me.tabletevents.ewhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property eperiod() As String
            Get
                Return CType(Me(Me.tabletevents.eperiodColumn),String)
            End Get
            Set
                Me(Me.tabletevents.eperiodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ecomplete() As String
            Get
                Return CType(Me(Me.tabletevents.ecompleteColumn),String)
            End Get
            Set
                Me(Me.tabletevents.ecompleteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tabletevents.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tabletevents.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tran2Row
        Inherits Global.System.Data.DataRow
        
        Private tabletran2 As tran2DataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletran2 = CType(Me.Table,tran2DataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property name() As String
            Get
                Try 
                    Return CType(Me(Me.tabletran2.nameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'name' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property account() As String
            Get
                Return CType(Me(Me.tabletran2.accountColumn),String)
            End Get
            Set
                Me(Me.tabletran2.accountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ad1() As String
            Get
                Try 
                    Return CType(Me(Me.tabletran2.ad1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ad1' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.ad1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ad2() As String
            Get
                Try 
                    Return CType(Me(Me.tabletran2.ad2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ad2' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.ad2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ad3() As String
            Get
                Try 
                    Return CType(Me(Me.tabletran2.ad3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ad3' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.ad3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ad4() As String
            Get
                Try 
                    Return CType(Me(Me.tabletran2.ad4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ad4' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.ad4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ad5() As String
            Get
                Try 
                    Return CType(Me(Me.tabletran2.ad5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ad5' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.ad5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property phone() As String
            Get
                Try 
                    Return CType(Me(Me.tabletran2.phoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'phone' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.phoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property telex() As String
            Get
                Try 
                    Return CType(Me(Me.tabletran2.telexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'telex' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.telexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property fax() As String
            Get
                Try 
                    Return CType(Me(Me.tabletran2.faxColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'fax' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.faxColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property email() As String
            Get
                Try 
                    Return CType(Me(Me.tabletran2.emailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'email' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.emailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property eurovat() As String
            Get
                Try 
                    Return CType(Me(Me.tabletran2.eurovatColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'eurovat' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.eurovatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property vatpayable() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletran2.vatpayableColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'vatpayable' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.vatpayableColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ifmemo() As String
            Get
                Try 
                    Return CType(Me(Me.tabletran2.ifmemoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ifmemo' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.ifmemoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property proforma() As String
            Get
                Try 
                    Return CType(Me(Me.tabletran2.proformaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'proforma' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.proformaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property udate() As String
            Get
                Try 
                    Return CType(Me(Me.tabletran2.udateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'udate' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.udateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property termdays() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletran2.termdaysColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'termdays' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.termdaysColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property entrytype() As String
            Get
                Try 
                    Return CType(Me(Me.tabletran2.entrytypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'entrytype' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.entrytypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property nwho() As String
            Get
                Try 
                    Return CType(Me(Me.tabletran2.nwhoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'nwho' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.nwhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property inuse() As String
            Get
                Try 
                    Return CType(Me(Me.tabletran2.inuseColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'inuse' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.inuseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property new_upd() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletran2.new_updColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'new_upd' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.new_updColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property peg_pact() As String
            Get
                Try 
                    Return CType(Me(Me.tabletran2.peg_pactColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'peg_pact' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.peg_pactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property peg_lsale() As String
            Get
                Try 
                    Return CType(Me(Me.tabletran2.peg_lsaleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'peg_lsale' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.peg_lsaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property xcard() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletran2.xcardColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'xcard' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.xcardColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property promo() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletran2.promoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'promo' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.promoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ADDMEMO() As String
            Get
                Try 
                    Return CType(Me(Me.tabletran2.ADDMEMOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ADDMEMO' in table 'tran2' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletran2.ADDMEMOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Decimal
            Get
                Return CType(Me(Me.tabletran2.UniqueIDColumn),Decimal)
            End Get
            Set
                Me(Me.tabletran2.UniqueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsnameNull() As Boolean
            Return Me.IsNull(Me.tabletran2.nameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetnameNull()
            Me(Me.tabletran2.nameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Isad1Null() As Boolean
            Return Me.IsNull(Me.tabletran2.ad1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setad1Null()
            Me(Me.tabletran2.ad1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Isad2Null() As Boolean
            Return Me.IsNull(Me.tabletran2.ad2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setad2Null()
            Me(Me.tabletran2.ad2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Isad3Null() As Boolean
            Return Me.IsNull(Me.tabletran2.ad3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setad3Null()
            Me(Me.tabletran2.ad3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Isad4Null() As Boolean
            Return Me.IsNull(Me.tabletran2.ad4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setad4Null()
            Me(Me.tabletran2.ad4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Isad5Null() As Boolean
            Return Me.IsNull(Me.tabletran2.ad5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setad5Null()
            Me(Me.tabletran2.ad5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsphoneNull() As Boolean
            Return Me.IsNull(Me.tabletran2.phoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetphoneNull()
            Me(Me.tabletran2.phoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IstelexNull() As Boolean
            Return Me.IsNull(Me.tabletran2.telexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SettelexNull()
            Me(Me.tabletran2.telexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsfaxNull() As Boolean
            Return Me.IsNull(Me.tabletran2.faxColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetfaxNull()
            Me(Me.tabletran2.faxColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsemailNull() As Boolean
            Return Me.IsNull(Me.tabletran2.emailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetemailNull()
            Me(Me.tabletran2.emailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IseurovatNull() As Boolean
            Return Me.IsNull(Me.tabletran2.eurovatColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SeteurovatNull()
            Me(Me.tabletran2.eurovatColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsvatpayableNull() As Boolean
            Return Me.IsNull(Me.tabletran2.vatpayableColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetvatpayableNull()
            Me(Me.tabletran2.vatpayableColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsifmemoNull() As Boolean
            Return Me.IsNull(Me.tabletran2.ifmemoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetifmemoNull()
            Me(Me.tabletran2.ifmemoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsproformaNull() As Boolean
            Return Me.IsNull(Me.tabletran2.proformaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetproformaNull()
            Me(Me.tabletran2.proformaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsudateNull() As Boolean
            Return Me.IsNull(Me.tabletran2.udateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetudateNull()
            Me(Me.tabletran2.udateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IstermdaysNull() As Boolean
            Return Me.IsNull(Me.tabletran2.termdaysColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SettermdaysNull()
            Me(Me.tabletran2.termdaysColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsentrytypeNull() As Boolean
            Return Me.IsNull(Me.tabletran2.entrytypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetentrytypeNull()
            Me(Me.tabletran2.entrytypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsnwhoNull() As Boolean
            Return Me.IsNull(Me.tabletran2.nwhoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetnwhoNull()
            Me(Me.tabletran2.nwhoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsinuseNull() As Boolean
            Return Me.IsNull(Me.tabletran2.inuseColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetinuseNull()
            Me(Me.tabletran2.inuseColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Isnew_updNull() As Boolean
            Return Me.IsNull(Me.tabletran2.new_updColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setnew_updNull()
            Me(Me.tabletran2.new_updColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Ispeg_pactNull() As Boolean
            Return Me.IsNull(Me.tabletran2.peg_pactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setpeg_pactNull()
            Me(Me.tabletran2.peg_pactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Ispeg_lsaleNull() As Boolean
            Return Me.IsNull(Me.tabletran2.peg_lsaleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Setpeg_lsaleNull()
            Me(Me.tabletran2.peg_lsaleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsxcardNull() As Boolean
            Return Me.IsNull(Me.tabletran2.xcardColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetxcardNull()
            Me(Me.tabletran2.xcardColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IspromoNull() As Boolean
            Return Me.IsNull(Me.tabletran2.promoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetpromoNull()
            Me(Me.tabletran2.promoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function IsADDMEMONull() As Boolean
            Return Me.IsNull(Me.tabletran2.ADDMEMOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub SetADDMEMONull()
            Me(Me.tabletran2.ADDMEMOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tranbinsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletranbins As tranbinsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletranbins = CType(Me.Table,tranbinsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iicode() As String
            Get
                Return CType(Me(Me.tabletranbins.iicodeColumn),String)
            End Get
            Set
                Me(Me.tabletranbins.iicodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property sourcecde() As String
            Get
                Return CType(Me(Me.tabletranbins.sourcecdeColumn),String)
            End Get
            Set
                Me(Me.tabletranbins.sourcecdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property assured() As String
            Get
                Return CType(Me(Me.tabletranbins.assuredColumn),String)
            End Get
            Set
                Me(Me.tabletranbins.assuredColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property locatebin() As String
            Get
                Return CType(Me(Me.tabletranbins.locatebinColumn),String)
            End Get
            Set
                Me(Me.tabletranbins.locatebinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property quantybin() As Decimal
            Get
                Return CType(Me(Me.tabletranbins.quantybinColumn),Decimal)
            End Get
            Set
                Me(Me.tabletranbins.quantybinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property alloc() As Decimal
            Get
                Return CType(Me(Me.tabletranbins.allocColumn),Decimal)
            End Get
            Set
                Me(Me.tabletranbins.allocColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property currcy_cde() As String
            Get
                Return CType(Me(Me.tabletranbins.currcy_cdeColumn),String)
            End Get
            Set
                Me(Me.tabletranbins.currcy_cdeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property unit_value() As String
            Get
                Return CType(Me(Me.tabletranbins.unit_valueColumn),String)
            End Get
            Set
                Me(Me.tabletranbins.unit_valueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property catalog_dt() As Date
            Get
                Return CType(Me(Me.tabletranbins.catalog_dtColumn),Date)
            End Get
            Set
                Me(Me.tabletranbins.catalog_dtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property iiupdate() As Date
            Get
                Return CType(Me(Me.tabletranbins.iiupdateColumn),Date)
            End Get
            Set
                Me(Me.tabletranbins.iiupdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property rec_type() As String
            Get
                Return CType(Me(Me.tabletranbins.rec_typeColumn),String)
            End Get
            Set
                Me(Me.tabletranbins.rec_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property snwho() As String
            Get
                Return CType(Me(Me.tabletranbins.snwhoColumn),String)
            End Get
            Set
                Me(Me.tabletranbins.snwhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property sinuse() As String
            Get
                Return CType(Me(Me.tabletranbins.sinuseColumn),String)
            End Get
            Set
                Me(Me.tabletranbins.sinuseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property weight() As Decimal
            Get
                Return CType(Me(Me.tabletranbins.weightColumn),Decimal)
            End Get
            Set
                Me(Me.tabletranbins.weightColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property wqty() As Decimal
            Get
                Return CType(Me(Me.tabletranbins.wqtyColumn),Decimal)
            End Get
            Set
                Me(Me.tabletranbins.wqtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tabletranbins.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tabletranbins.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tranctlRow
        Inherits Global.System.Data.DataRow
        
        Private tabletranctl As tranctlDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletranctl = CType(Me.Table,tranctlDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property invkey() As String
            Get
                Return CType(Me(Me.tabletranctl.invkeyColumn),String)
            End Get
            Set
                Me(Me.tabletranctl.invkeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property evaccat() As Date
            Get
                Return CType(Me(Me.tabletranctl.evaccatColumn),Date)
            End Get
            Set
                Me(Me.tabletranctl.evaccatColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property tempinv() As Decimal
            Get
                Return CType(Me(Me.tabletranctl.tempinvColumn),Decimal)
            End Get
            Set
                Me(Me.tabletranctl.tempinvColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property linvno() As Decimal
            Get
                Return CType(Me(Me.tabletranctl.linvnoColumn),Decimal)
            End Get
            Set
                Me(Me.tabletranctl.linvnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property vatpc() As Decimal
            Get
                Return CType(Me(Me.tabletranctl.vatpcColumn),Decimal)
            End Get
            Set
                Me(Me.tabletranctl.vatpcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property holdnote() As Decimal
            Get
                Return CType(Me(Me.tabletranctl.holdnoteColumn),Decimal)
            End Get
            Set
                Me(Me.tabletranctl.holdnoteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property lquote() As Decimal
            Get
                Return CType(Me(Me.tabletranctl.lquoteColumn),Decimal)
            End Get
            Set
                Me(Me.tabletranctl.lquoteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property draftsord() As Decimal
            Get
                Return CType(Me(Me.tabletranctl.draftsordColumn),Decimal)
            End Get
            Set
                Me(Me.tabletranctl.draftsordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ldate() As Date
            Get
                Return CType(Me(Me.tabletranctl.ldateColumn),Date)
            End Get
            Set
                Me(Me.tabletranctl.ldateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property twho() As String
            Get
                Return CType(Me(Me.tabletranctl.twhoColumn),String)
            End Get
            Set
                Me(Me.tabletranctl.twhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property quoteno() As Decimal
            Get
                Return CType(Me(Me.tabletranctl.quotenoColumn),Decimal)
            End Get
            Set
                Me(Me.tabletranctl.quotenoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property orderno() As Decimal
            Get
                Return CType(Me(Me.tabletranctl.ordernoColumn),Decimal)
            End Get
            Set
                Me(Me.tabletranctl.ordernoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property idcode() As Decimal
            Get
                Return CType(Me(Me.tabletranctl.idcodeColumn),Decimal)
            End Get
            Set
                Me(Me.tabletranctl.idcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property invno() As Decimal
            Get
                Return CType(Me(Me.tabletranctl.invnoColumn),Decimal)
            End Get
            Set
                Me(Me.tabletranctl.invnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property projectno() As Decimal
            Get
                Return CType(Me(Me.tabletranctl.projectnoColumn),Decimal)
            End Get
            Set
                Me(Me.tabletranctl.projectnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property accno() As Decimal
            Get
                Return CType(Me(Me.tabletranctl.accnoColumn),Decimal)
            End Get
            Set
                Me(Me.tabletranctl.accnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property assetno() As Decimal
            Get
                Return CType(Me(Me.tabletranctl.assetnoColumn),Decimal)
            End Get
            Set
                Me(Me.tabletranctl.assetnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property woorderno() As Decimal
            Get
                Return CType(Me(Me.tabletranctl.woordernoColumn),Decimal)
            End Get
            Set
                Me(Me.tabletranctl.woordernoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tabletranctl.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tabletranctl.UniqueIDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class trandescRow
        Inherits Global.System.Data.DataRow
        
        Private tabletrandesc As trandescDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletrandesc = CType(Me.Table,trandescDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property pcode() As String
            Get
                Return CType(Me(Me.tabletrandesc.pcodeColumn),String)
            End Get
            Set
                Me(Me.tabletrandesc.pcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property psupplier() As String
            Get
                Return CType(Me(Me.tabletrandesc.psupplierColumn),String)
            End Get
            Set
                Me(Me.tabletrandesc.psupplierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property descriptn() As String
            Get
                Return CType(Me(Me.tabletrandesc.descriptnColumn),String)
            End Get
            Set
                Me(Me.tabletrandesc.descriptnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property minstock() As Decimal
            Get
                Return CType(Me(Me.tabletrandesc.minstockColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrandesc.minstockColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property minorder() As Decimal
            Get
                Return CType(Me(Me.tabletrandesc.minorderColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrandesc.minorderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ifmemo() As String
            Get
                Return CType(Me(Me.tabletrandesc.ifmemoColumn),String)
            End Get
            Set
                Me(Me.tabletrandesc.ifmemoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property idupdate() As Date
            Get
                Return CType(Me(Me.tabletrandesc.idupdateColumn),Date)
            End Get
            Set
                Me(Me.tabletrandesc.idupdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property idcode() As String
            Get
                Return CType(Me(Me.tabletrandesc.idcodeColumn),String)
            End Get
            Set
                Me(Me.tabletrandesc.idcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property nwho() As String
            Get
                Return CType(Me(Me.tabletrandesc.nwhoColumn),String)
            End Get
            Set
                Me(Me.tabletrandesc.nwhoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property inuse() As String
            Get
                Return CType(Me(Me.tabletrandesc.inuseColumn),String)
            End Get
            Set
                Me(Me.tabletrandesc.inuseColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property descmemo() As String
            Get
                Return CType(Me(Me.tabletrandesc.descmemoColumn),String)
            End Get
            Set
                Me(Me.tabletrandesc.descmemoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property memodate() As Date
            Get
                Return CType(Me(Me.tabletrandesc.memodateColumn),Date)
            End Get
            Set
                Me(Me.tabletrandesc.memodateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property obsolete() As Boolean
            Get
                Return CType(Me(Me.tabletrandesc.obsoleteColumn),Boolean)
            End Get
            Set
                Me(Me.tabletrandesc.obsoleteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property obmessage() As String
            Get
                Return CType(Me(Me.tabletrandesc.obmessageColumn),String)
            End Get
            Set
                Me(Me.tabletrandesc.obmessageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ccode() As String
            Get
                Return CType(Me(Me.tabletrandesc.ccodeColumn),String)
            End Get
            Set
                Me(Me.tabletrandesc.ccodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property timestamp_column() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletrandesc.timestamp_columnColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timestamp_column' in table 'trandesc' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrandesc.timestamp_columnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tabletrandesc.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tabletrandesc.UniqueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Istimestamp_columnNull() As Boolean
            Return Me.IsNull(Me.tabletrandesc.timestamp_columnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Settimestamp_columnNull()
            Me(Me.tabletrandesc.timestamp_columnColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tranmemoRow
        Inherits Global.System.Data.DataRow
        
        Private tabletranmemo As tranmemoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletranmemo = CType(Me.Table,tranmemoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property memo_no() As String
            Get
                Return CType(Me(Me.tabletranmemo.memo_noColumn),String)
            End Get
            Set
                Me(Me.tabletranmemo.memo_noColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property memo_type() As String
            Get
                Return CType(Me(Me.tabletranmemo.memo_typeColumn),String)
            End Get
            Set
                Me(Me.tabletranmemo.memo_typeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property memo1() As String
            Get
                Return CType(Me(Me.tabletranmemo.memo1Column),String)
            End Get
            Set
                Me(Me.tabletranmemo.memo1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property memo2() As String
            Get
                Return CType(Me(Me.tabletranmemo.memo2Column),String)
            End Get
            Set
                Me(Me.tabletranmemo.memo2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property memo3() As String
            Get
                Return CType(Me(Me.tabletranmemo.memo3Column),String)
            End Get
            Set
                Me(Me.tabletranmemo.memo3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property memo4() As String
            Get
                Return CType(Me(Me.tabletranmemo.memo4Column),String)
            End Get
            Set
                Me(Me.tabletranmemo.memo4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property memo5() As String
            Get
                Return CType(Me(Me.tabletranmemo.memo5Column),String)
            End Get
            Set
                Me(Me.tabletranmemo.memo5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property memo6() As String
            Get
                Return CType(Me(Me.tabletranmemo.memo6Column),String)
            End Get
            Set
                Me(Me.tabletranmemo.memo6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property omemo1() As String
            Get
                Return CType(Me(Me.tabletranmemo.omemo1Column),String)
            End Get
            Set
                Me(Me.tabletranmemo.omemo1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property omemo2() As String
            Get
                Return CType(Me(Me.tabletranmemo.omemo2Column),String)
            End Get
            Set
                Me(Me.tabletranmemo.omemo2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property omemo3() As String
            Get
                Return CType(Me(Me.tabletranmemo.omemo3Column),String)
            End Get
            Set
                Me(Me.tabletranmemo.omemo3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property omemo4() As String
            Get
                Return CType(Me(Me.tabletranmemo.omemo4Column),String)
            End Get
            Set
                Me(Me.tabletranmemo.omemo4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property omemo5() As String
            Get
                Return CType(Me(Me.tabletranmemo.omemo5Column),String)
            End Get
            Set
                Me(Me.tabletranmemo.omemo5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property omemo6() As String
            Get
                Return CType(Me(Me.tabletranmemo.omemo6Column),String)
            End Get
            Set
                Me(Me.tabletranmemo.omemo6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property timestamp_column() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tabletranmemo.timestamp_columnColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timestamp_column' in table 'tranmemo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletranmemo.timestamp_columnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UniqueID() As Long
            Get
                Return CType(Me(Me.tabletranmemo.UniqueIDColumn),Long)
            End Get
            Set
                Me(Me.tabletranmemo.UniqueIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Function Istimestamp_columnNull() As Boolean
            Return Me.IsNull(Me.tabletranmemo.timestamp_columnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub Settimestamp_columnNull()
            Me(Me.tabletranmemo.timestamp_columnColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AddressRecordTypeRow
        Inherits Global.System.Data.DataRow
        
        Private tableAddressRecordType As AddressRecordTypeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAddressRecordType = CType(Me.Table,AddressRecordTypeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property RecordTypeNew() As String
            Get
                Return CType(Me(Me.tableAddressRecordType.RecordTypeNewColumn),String)
            End Get
            Set
                Me(Me.tableAddressRecordType.RecordTypeNewColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property RecordTypeOld() As String
            Get
                Return CType(Me(Me.tableAddressRecordType.RecordTypeOldColumn),String)
            End Get
            Set
                Me(Me.tableAddressRecordType.RecordTypeOldColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class accctlRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As accctlRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As accctlRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As accctlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class accountRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As accountRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As accountRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As accountRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class addnotesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As addnotesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As addnotesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As addnotesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class assetsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As assetsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As assetsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As assetsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class ASSETSNEWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ASSETSNEWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As ASSETSNEWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As ASSETSNEWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class atransRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As atransRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As atransRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As atransRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class binallocRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As binallocRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As binallocRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As binallocRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class catRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As catRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As catRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As catRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class countryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As countryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As countryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As countryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class custdiscRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As custdiscRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As custdiscRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As custdiscRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class dummy_RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dummy_Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As dummy_Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As dummy_Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class enquiryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As enquiryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As enquiryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As enquiryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class eventRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As eventRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As eventRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As eventRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class foxuserRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As foxuserRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As foxuserRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As foxuserRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class invlineRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As invlineRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As invlineRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As invlineRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class invoiceheadRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As invoiceheadRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As invoiceheadRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As invoiceheadRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class invtransRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As invtransRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As invtransRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As invtransRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class invtransoldRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As invtransoldRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As invtransoldRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As invtransoldRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class invtransold6RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As invtransold6Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As invtransold6Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As invtransold6Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class invworkRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As invworkRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As invworkRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As invworkRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class invworkoldRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As invworkoldRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As invworkoldRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As invworkoldRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class issueRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As issueRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As issueRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As issueRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class locationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As locationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As locationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As locationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class mainRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As mainRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As mainRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As mainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class markupRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As markupRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As markupRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As markupRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class namesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As namesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As namesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As namesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class orddetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As orddetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As orddetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As orddetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class orderheadRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As orderheadRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As orderheadRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As orderheadRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class orderlineRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As orderlineRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As orderlineRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As orderlineRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class qictrlRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As qictrlRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As qictrlRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As qictrlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class qictrlnewRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As qictrlnewRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As qictrlnewRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As qictrlnewRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class qictrloldRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As qictrloldRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As qictrloldRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As qictrloldRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class qictrlold6RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As qictrlold6Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As qictrlold6Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As qictrlold6Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class quotedetailRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As quotedetailRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As quotedetailRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As quotedetailRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class quoteheadRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As quoteheadRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As quoteheadRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As quoteheadRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class statusRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As statusRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As statusRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As statusRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class teventsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As teventsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As teventsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As teventsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class tran2RowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tran2Row
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As tran2Row, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As tran2Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class tranbinsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tranbinsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As tranbinsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As tranbinsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class tranctlRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tranctlRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As tranctlRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As tranctlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class trandescRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As trandescRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As trandescRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As trandescRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class tranmemoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tranmemoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As tranmemoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As tranmemoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
    Public Class AddressRecordTypeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AddressRecordTypeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New(ByVal row As AddressRecordTypeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Row() As AddressRecordTypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace TransvacDataV2DataSet1TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class accctlTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "accctl"
            tableMapping.ColumnMappings.Add("name", "name")
            tableMapping.ColumnMappings.Add("level_", "level_")
            tableMapping.ColumnMappings.Add("comments", "comments")
            tableMapping.ColumnMappings.Add("qinits", "qinits")
            tableMapping.ColumnMappings.Add("title", "title")
            tableMapping.ColumnMappings.Add("sig", "sig")
            tableMapping.ColumnMappings.Add("email", "email")
            tableMapping.ColumnMappings.Add("timestamp_column", "timestamp_column")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[accctl] WHERE (([timestamp_column] = @Original_timestamp_colum"& _ 
                "n) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[accctl] ([name], [level_], [comments], [qinits], [title], [sig"& _ 
                "], [email]) VALUES (@name, @level_, @comments, @qinits, @title, @sig, @email);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT name, level_, comments, qinits, title, sig, email, timestamp_column, Uniq"& _ 
                "ueID FROM accctl WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 1, 0, "level_", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@comments", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "comments", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qinits", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qinits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@title", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "title", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sig", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sig", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@email", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[accctl] SET [name] = @name, [level_] = @level_, [comments] = @comme"& _ 
                "nts, [qinits] = @qinits, [title] = @title, [sig] = @sig, [email] = @email WHERE "& _ 
                "(([timestamp_column] = @Original_timestamp_column) AND ([UniqueID] = @Original_U"& _ 
                "niqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT name, level_, comments, qinits, title, sig, email, timestamp_"& _ 
                "column, UniqueID FROM accctl WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@level_", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 1, 0, "level_", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@comments", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "comments", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qinits", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qinits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@title", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "title", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sig", Global.System.Data.SqlDbType.Image, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sig", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@email", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT name, level_, comments, qinits, title, sig, email, timestamp_column, Uniqu"& _ 
                "eID FROM dbo.accctl"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.accctlDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.accctlDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.accctlDataTable = New TransvacDataV2DataSet1.accctlDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.accctlDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "accctl")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal name As String, ByVal level_ As Decimal, ByVal comments As String, ByVal qinits As String, ByVal title As String, ByVal sig() As Byte, ByVal email As String) As Integer
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(name,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(level_,Decimal)
            If (comments Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comments")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(comments,String)
            End If
            If (qinits Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qinits")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(qinits,String)
            End If
            If (title Is Nothing) Then
                Throw New Global.System.ArgumentNullException("title")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(title,String)
            End If
            If (sig Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(sig,Byte())
            End If
            If (email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("email")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(email,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal name As String, ByVal level_ As Decimal, ByVal comments As String, ByVal qinits As String, ByVal title As String, ByVal sig() As Byte, ByVal email As String, ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long, ByVal UniqueID As Long) As Integer
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(level_,Decimal)
            If (comments Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comments")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(comments,String)
            End If
            If (qinits Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qinits")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(qinits,String)
            End If
            If (title Is Nothing) Then
                Throw New Global.System.ArgumentNullException("title")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(title,String)
            End If
            If (sig Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(sig,Byte())
            End If
            If (email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("email")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(email,String)
            End If
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal name As String, ByVal level_ As Decimal, ByVal comments As String, ByVal qinits As String, ByVal title As String, ByVal sig() As Byte, ByVal email As String, ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(name, level_, comments, qinits, title, sig, email, Original_timestamp_column, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class accountTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "account"
            tableMapping.ColumnMappings.Add("accno", "accno")
            tableMapping.ColumnMappings.Add("iname", "iname")
            tableMapping.ColumnMappings.Add("iadd1", "iadd1")
            tableMapping.ColumnMappings.Add("iadd2", "iadd2")
            tableMapping.ColumnMappings.Add("iadd3", "iadd3")
            tableMapping.ColumnMappings.Add("iadd4", "iadd4")
            tableMapping.ColumnMappings.Add("iadd5", "iadd5")
            tableMapping.ColumnMappings.Add("ipcode", "ipcode")
            tableMapping.ColumnMappings.Add("dname", "dname")
            tableMapping.ColumnMappings.Add("dadd1", "dadd1")
            tableMapping.ColumnMappings.Add("dadd2", "dadd2")
            tableMapping.ColumnMappings.Add("dadd3", "dadd3")
            tableMapping.ColumnMappings.Add("dadd4", "dadd4")
            tableMapping.ColumnMappings.Add("dadd5", "dadd5")
            tableMapping.ColumnMappings.Add("dpcode", "dpcode")
            tableMapping.ColumnMappings.Add("idesc", "idesc")
            tableMapping.ColumnMappings.Add("iamount", "iamount")
            tableMapping.ColumnMappings.Add("iperiod", "iperiod")
            tableMapping.ColumnMappings.Add("sdate", "sdate")
            tableMapping.ColumnMappings.Add("edate", "edate")
            tableMapping.ColumnMappings.Add("itelno", "itelno")
            tableMapping.ColumnMappings.Add("ifaxno", "ifaxno")
            tableMapping.ColumnMappings.Add("imobno", "imobno")
            tableMapping.ColumnMappings.Add("iemail", "iemail")
            tableMapping.ColumnMappings.Add("notes", "notes")
            tableMapping.ColumnMappings.Add("timestamp_column", "timestamp_column")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[account] WHERE (([timestamp_column] = @Original_timestamp_colu"& _ 
                "mn) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[account] ([accno], [iname], [iadd1], [iadd2], [iadd3], [iadd4]"& _ 
                ", [iadd5], [ipcode], [dname], [dadd1], [dadd2], [dadd3], [dadd4], [dadd5], [dpco"& _ 
                "de], [idesc], [iamount], [iperiod], [sdate], [edate], [itelno], [ifaxno], [imobn"& _ 
                "o], [iemail], [notes]) VALUES (@accno, @iname, @iadd1, @iadd2, @iadd3, @iadd4, @"& _ 
                "iadd5, @ipcode, @dname, @dadd1, @dadd2, @dadd3, @dadd4, @dadd5, @dpcode, @idesc,"& _ 
                " @iamount, @iperiod, @sdate, @edate, @itelno, @ifaxno, @imobno, @iemail, @notes)"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT accno, iname, iadd1, iadd2, iadd3, iadd4, iadd5, ipcode, dname, dadd1,"& _ 
                " dadd2, dadd3, dadd4, dadd5, dpcode, idesc, iamount, iperiod, sdate, edate, itel"& _ 
                "no, ifaxno, imobno, iemail, notes, timestamp_column, UniqueID FROM account WHERE"& _ 
                " (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@accno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "accno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iname", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iname", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iadd1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iadd1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iadd2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iadd2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iadd3", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iadd3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iadd4", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iadd4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iadd5", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iadd5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ipcode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ipcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dname", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dname", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dadd1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dadd1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dadd2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dadd2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dadd3", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dadd3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dadd4", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dadd4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dadd5", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dadd5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dpcode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dpcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iamount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "iamount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iperiod", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 0, "iperiod", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@edate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "edate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@itelno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "itelno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ifaxno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ifaxno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@imobno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "imobno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iemail", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iemail", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@notes", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[account] SET [accno] = @accno, [iname] = @iname, [iadd1] = @iadd1, "& _ 
                "[iadd2] = @iadd2, [iadd3] = @iadd3, [iadd4] = @iadd4, [iadd5] = @iadd5, [ipcode]"& _ 
                " = @ipcode, [dname] = @dname, [dadd1] = @dadd1, [dadd2] = @dadd2, [dadd3] = @dad"& _ 
                "d3, [dadd4] = @dadd4, [dadd5] = @dadd5, [dpcode] = @dpcode, [idesc] = @idesc, [i"& _ 
                "amount] = @iamount, [iperiod] = @iperiod, [sdate] = @sdate, [edate] = @edate, [i"& _ 
                "telno] = @itelno, [ifaxno] = @ifaxno, [imobno] = @imobno, [iemail] = @iemail, [n"& _ 
                "otes] = @notes WHERE (([timestamp_column] = @Original_timestamp_column) AND ([Un"& _ 
                "iqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT accno, iname, iadd1, iadd2, iadd3, iadd4"& _ 
                ", iadd5, ipcode, dname, dadd1, dadd2, dadd3, dadd4, dadd5, dpcode, idesc, iamoun"& _ 
                "t, iperiod, sdate, edate, itelno, ifaxno, imobno, iemail, notes, timestamp_colum"& _ 
                "n, UniqueID FROM account WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@accno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "accno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iname", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iname", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iadd1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iadd1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iadd2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iadd2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iadd3", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iadd3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iadd4", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iadd4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iadd5", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iadd5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ipcode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ipcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dname", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dname", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dadd1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dadd1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dadd2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dadd2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dadd3", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dadd3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dadd4", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dadd4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dadd5", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dadd5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dpcode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dpcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iamount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "iamount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iperiod", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 0, "iperiod", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@edate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "edate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@itelno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "itelno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ifaxno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ifaxno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@imobno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "imobno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iemail", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iemail", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@notes", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "notes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT accno, iname, iadd1, iadd2, iadd3, iadd4, iadd5, ipcode, dname, dadd1, dad"& _ 
                "d2, dadd3, dadd4, dadd5, dpcode, idesc, iamount, iperiod, sdate, edate, itelno, "& _ 
                "ifaxno, imobno, iemail, notes, timestamp_column, UniqueID FROM dbo.account"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.accountDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.accountDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.accountDataTable = New TransvacDataV2DataSet1.accountDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.accountDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "account")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal accno As String,  _
                    ByVal iname As String,  _
                    ByVal iadd1 As String,  _
                    ByVal iadd2 As String,  _
                    ByVal iadd3 As String,  _
                    ByVal iadd4 As String,  _
                    ByVal iadd5 As String,  _
                    ByVal ipcode As String,  _
                    ByVal dname As String,  _
                    ByVal dadd1 As String,  _
                    ByVal dadd2 As String,  _
                    ByVal dadd3 As String,  _
                    ByVal dadd4 As String,  _
                    ByVal dadd5 As String,  _
                    ByVal dpcode As String,  _
                    ByVal idesc As String,  _
                    ByVal iamount As Decimal,  _
                    ByVal iperiod As Decimal,  _
                    ByVal sdate As Date,  _
                    ByVal edate As Date,  _
                    ByVal itelno As String,  _
                    ByVal ifaxno As String,  _
                    ByVal imobno As String,  _
                    ByVal iemail As String,  _
                    ByVal notes As String) As Integer
            If (accno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("accno")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(accno,String)
            End If
            If (iname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iname")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(iname,String)
            End If
            If (iadd1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iadd1")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(iadd1,String)
            End If
            If (iadd2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iadd2")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(iadd2,String)
            End If
            If (iadd3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iadd3")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(iadd3,String)
            End If
            If (iadd4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iadd4")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(iadd4,String)
            End If
            If (iadd5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iadd5")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(iadd5,String)
            End If
            If (ipcode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ipcode")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ipcode,String)
            End If
            If (dname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dname")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(dname,String)
            End If
            If (dadd1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dadd1")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(dadd1,String)
            End If
            If (dadd2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dadd2")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(dadd2,String)
            End If
            If (dadd3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dadd3")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(dadd3,String)
            End If
            If (dadd4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dadd4")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(dadd4,String)
            End If
            If (dadd5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dadd5")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(dadd5,String)
            End If
            If (dpcode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dpcode")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(dpcode,String)
            End If
            If (idesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("idesc")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(idesc,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(iamount,Decimal)
            Me.Adapter.InsertCommand.Parameters(17).Value = CType(iperiod,Decimal)
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(sdate,Date)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(edate,Date)
            If (itelno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("itelno")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(itelno,String)
            End If
            If (ifaxno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ifaxno")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(ifaxno,String)
            End If
            If (imobno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("imobno")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(imobno,String)
            End If
            If (iemail Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iemail")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(iemail,String)
            End If
            If (notes Is Nothing) Then
                Throw New Global.System.ArgumentNullException("notes")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(notes,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal accno As String,  _
                    ByVal iname As String,  _
                    ByVal iadd1 As String,  _
                    ByVal iadd2 As String,  _
                    ByVal iadd3 As String,  _
                    ByVal iadd4 As String,  _
                    ByVal iadd5 As String,  _
                    ByVal ipcode As String,  _
                    ByVal dname As String,  _
                    ByVal dadd1 As String,  _
                    ByVal dadd2 As String,  _
                    ByVal dadd3 As String,  _
                    ByVal dadd4 As String,  _
                    ByVal dadd5 As String,  _
                    ByVal dpcode As String,  _
                    ByVal idesc As String,  _
                    ByVal iamount As Decimal,  _
                    ByVal iperiod As Decimal,  _
                    ByVal sdate As Date,  _
                    ByVal edate As Date,  _
                    ByVal itelno As String,  _
                    ByVal ifaxno As String,  _
                    ByVal imobno As String,  _
                    ByVal iemail As String,  _
                    ByVal notes As String,  _
                    ByVal Original_timestamp_column() As Byte,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (accno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("accno")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(accno,String)
            End If
            If (iname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iname")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(iname,String)
            End If
            If (iadd1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iadd1")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(iadd1,String)
            End If
            If (iadd2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iadd2")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(iadd2,String)
            End If
            If (iadd3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iadd3")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(iadd3,String)
            End If
            If (iadd4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iadd4")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(iadd4,String)
            End If
            If (iadd5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iadd5")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(iadd5,String)
            End If
            If (ipcode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ipcode")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ipcode,String)
            End If
            If (dname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dname")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(dname,String)
            End If
            If (dadd1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dadd1")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(dadd1,String)
            End If
            If (dadd2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dadd2")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(dadd2,String)
            End If
            If (dadd3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dadd3")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(dadd3,String)
            End If
            If (dadd4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dadd4")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(dadd4,String)
            End If
            If (dadd5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dadd5")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(dadd5,String)
            End If
            If (dpcode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dpcode")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(dpcode,String)
            End If
            If (idesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("idesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(idesc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(iamount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(iperiod,Decimal)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(sdate,Date)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(edate,Date)
            If (itelno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("itelno")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(itelno,String)
            End If
            If (ifaxno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ifaxno")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(ifaxno,String)
            End If
            If (imobno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("imobno")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(imobno,String)
            End If
            If (iemail Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iemail")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(iemail,String)
            End If
            If (notes Is Nothing) Then
                Throw New Global.System.ArgumentNullException("notes")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(notes,String)
            End If
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal accno As String,  _
                    ByVal iname As String,  _
                    ByVal iadd1 As String,  _
                    ByVal iadd2 As String,  _
                    ByVal iadd3 As String,  _
                    ByVal iadd4 As String,  _
                    ByVal iadd5 As String,  _
                    ByVal ipcode As String,  _
                    ByVal dname As String,  _
                    ByVal dadd1 As String,  _
                    ByVal dadd2 As String,  _
                    ByVal dadd3 As String,  _
                    ByVal dadd4 As String,  _
                    ByVal dadd5 As String,  _
                    ByVal dpcode As String,  _
                    ByVal idesc As String,  _
                    ByVal iamount As Decimal,  _
                    ByVal iperiod As Decimal,  _
                    ByVal sdate As Date,  _
                    ByVal edate As Date,  _
                    ByVal itelno As String,  _
                    ByVal ifaxno As String,  _
                    ByVal imobno As String,  _
                    ByVal iemail As String,  _
                    ByVal notes As String,  _
                    ByVal Original_timestamp_column() As Byte,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(accno, iname, iadd1, iadd2, iadd3, iadd4, iadd5, ipcode, dname, dadd1, dadd2, dadd3, dadd4, dadd5, dpcode, idesc, iamount, iperiod, sdate, edate, itelno, ifaxno, imobno, iemail, notes, Original_timestamp_column, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class addnotesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "addnotes"
            tableMapping.ColumnMappings.Add("account", "account")
            tableMapping.ColumnMappings.Add("actmemo", "actmemo")
            tableMapping.ColumnMappings.Add("timestamp_column", "timestamp_column")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[addnotes] WHERE (([timestamp_column] = @Original_timestamp_col"& _ 
                "umn) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[addnotes] ([account], [actmemo]) VALUES (@account, @actmemo);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT account, actmemo, timestamp_column, UniqueID FROM addnotes WHERE (Unique"& _ 
                "ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@account", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@actmemo", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "actmemo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[addnotes] SET [account] = @account, [actmemo] = @actmemo WHERE (([t"& _ 
                "imestamp_column] = @Original_timestamp_column) AND ([UniqueID] = @Original_Uniqu"& _ 
                "eID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT account, actmemo, timestamp_column, UniqueID FROM addnotes WHERE "& _ 
                "(UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@account", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@actmemo", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "actmemo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT account, actmemo, timestamp_column, UniqueID FROM dbo.addnotes"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        account, actmemo, timestamp_column, UniqueID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            addno"& _ 
                "tes"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (account LIKE @Param1 + '%')"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, "account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.addnotesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.addnotesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.addnotesDataTable = New TransvacDataV2DataSet1.addnotesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByMemo(ByVal dataTable As TransvacDataV2DataSet1.addnotesDataTable, ByVal Param1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByMemo(ByVal Param1 As String) As TransvacDataV2DataSet1.addnotesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            Dim dataTable As TransvacDataV2DataSet1.addnotesDataTable = New TransvacDataV2DataSet1.addnotesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.addnotesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "addnotes")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal account As String, ByVal actmemo As String) As Integer
            If (account Is Nothing) Then
                Throw New Global.System.ArgumentNullException("account")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(account,String)
            End If
            If (actmemo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("actmemo")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(actmemo,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal account As String, ByVal actmemo As String, ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long, ByVal UniqueID As Long) As Integer
            If (account Is Nothing) Then
                Throw New Global.System.ArgumentNullException("account")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(account,String)
            End If
            If (actmemo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("actmemo")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(actmemo,String)
            End If
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class assetsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "assets"
            tableMapping.ColumnMappings.Add("desc_", "desc_")
            tableMapping.ColumnMappings.Add("assetno", "assetno")
            tableMapping.ColumnMappings.Add("location", "location")
            tableMapping.ColumnMappings.Add("cat", "cat")
            tableMapping.ColumnMappings.Add("status", "status")
            tableMapping.ColumnMappings.Add("modelno", "modelno")
            tableMapping.ColumnMappings.Add("serialno", "serialno")
            tableMapping.ColumnMappings.Add("dateacquir", "dateacquir")
            tableMapping.ColumnMappings.Add("comments", "comments")
            tableMapping.ColumnMappings.Add("nextsched", "nextsched")
            tableMapping.ColumnMappings.Add("event", "event")
            tableMapping.ColumnMappings.Add("department", "department")
            tableMapping.ColumnMappings.Add("manufactur", "manufactur")
            tableMapping.ColumnMappings.Add("timestamp_column", "timestamp_column")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[assets] WHERE (([timestamp_column] = @Original_timestamp_colum"& _ 
                "n) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[assets] ([desc_], [assetno], [location], [cat], [status], [mod"& _ 
                "elno], [serialno], [dateacquir], [comments], [nextsched], [event], [department],"& _ 
                " [manufactur]) VALUES (@desc_, @assetno, @location, @cat, @status, @modelno, @se"& _ 
                "rialno, @dateacquir, @comments, @nextsched, @event, @department, @manufactur);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT desc_, assetno, location, cat, status, modelno, serialno, dateacquir, com"& _ 
                "ments, nextsched, event, department, manufactur, timestamp_column, UniqueID FROM"& _ 
                " assets WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@desc_", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@assetno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assetno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@location", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "location", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cat", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modelno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "modelno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@serialno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "serialno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dateacquir", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateacquir", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@comments", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "comments", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nextsched", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nextsched", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@event", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "event", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@department", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "department", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@manufactur", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "manufactur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[assets] SET [desc_] = @desc_, [assetno] = @assetno, [location] = @l"& _ 
                "ocation, [cat] = @cat, [status] = @status, [modelno] = @modelno, [serialno] = @s"& _ 
                "erialno, [dateacquir] = @dateacquir, [comments] = @comments, [nextsched] = @next"& _ 
                "sched, [event] = @event, [department] = @department, [manufactur] = @manufactur "& _ 
                "WHERE (([timestamp_column] = @Original_timestamp_column) AND ([UniqueID] = @Orig"& _ 
                "inal_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT desc_, assetno, location, cat, status, modelno, serialn"& _ 
                "o, dateacquir, comments, nextsched, event, department, manufactur, timestamp_col"& _ 
                "umn, UniqueID FROM assets WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@desc_", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@assetno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assetno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@location", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "location", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cat", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modelno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "modelno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@serialno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "serialno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dateacquir", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dateacquir", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@comments", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "comments", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nextsched", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nextsched", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@event", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "event", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@department", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "department", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@manufactur", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "manufactur", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT desc_, assetno, location, cat, status, modelno, serialno, dateacquir, comm"& _ 
                "ents, nextsched, event, department, manufactur, timestamp_column, UniqueID FROM "& _ 
                "dbo.assets"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.assetsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.assetsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.assetsDataTable = New TransvacDataV2DataSet1.assetsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.assetsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "assets")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal desc_ As String, ByVal assetno As String, ByVal location As String, ByVal cat As String, ByVal status As String, ByVal modelno As String, ByVal serialno As String, ByVal dateacquir As Date, ByVal comments As String, ByVal nextsched As Date, ByVal _event As String, ByVal department As String, ByVal manufactur As String) As Integer
            If (desc_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("desc_")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(desc_,String)
            End If
            If (assetno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("assetno")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(assetno,String)
            End If
            If (location Is Nothing) Then
                Throw New Global.System.ArgumentNullException("location")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(location,String)
            End If
            If (cat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cat")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(cat,String)
            End If
            If (status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("status")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(status,String)
            End If
            If (modelno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelno")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(modelno,String)
            End If
            If (serialno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("serialno")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(serialno,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(dateacquir,Date)
            If (comments Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comments")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(comments,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(nextsched,Date)
            If (_event Is Nothing) Then
                Throw New Global.System.ArgumentNullException("_event")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(_event,String)
            End If
            If (department Is Nothing) Then
                Throw New Global.System.ArgumentNullException("department")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(department,String)
            End If
            If (manufactur Is Nothing) Then
                Throw New Global.System.ArgumentNullException("manufactur")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(manufactur,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal desc_ As String,  _
                    ByVal assetno As String,  _
                    ByVal location As String,  _
                    ByVal cat As String,  _
                    ByVal status As String,  _
                    ByVal modelno As String,  _
                    ByVal serialno As String,  _
                    ByVal dateacquir As Date,  _
                    ByVal comments As String,  _
                    ByVal nextsched As Date,  _
                    ByVal _event As String,  _
                    ByVal department As String,  _
                    ByVal manufactur As String,  _
                    ByVal Original_timestamp_column() As Byte,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (desc_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("desc_")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(desc_,String)
            End If
            If (assetno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("assetno")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(assetno,String)
            End If
            If (location Is Nothing) Then
                Throw New Global.System.ArgumentNullException("location")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(location,String)
            End If
            If (cat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cat")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(cat,String)
            End If
            If (status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("status")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(status,String)
            End If
            If (modelno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("modelno")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(modelno,String)
            End If
            If (serialno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("serialno")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(serialno,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(dateacquir,Date)
            If (comments Is Nothing) Then
                Throw New Global.System.ArgumentNullException("comments")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(comments,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(nextsched,Date)
            If (_event Is Nothing) Then
                Throw New Global.System.ArgumentNullException("_event")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(_event,String)
            End If
            If (department Is Nothing) Then
                Throw New Global.System.ArgumentNullException("department")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(department,String)
            End If
            If (manufactur Is Nothing) Then
                Throw New Global.System.ArgumentNullException("manufactur")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(manufactur,String)
            End If
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal desc_ As String, ByVal assetno As String, ByVal location As String, ByVal cat As String, ByVal status As String, ByVal modelno As String, ByVal serialno As String, ByVal dateacquir As Date, ByVal comments As String, ByVal nextsched As Date, ByVal _event As String, ByVal department As String, ByVal manufactur As String, ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(desc_, assetno, location, cat, status, modelno, serialno, dateacquir, comments, nextsched, _event, department, manufactur, Original_timestamp_column, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ASSETSNEWTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ASSETSNEW"
            tableMapping.ColumnMappings.Add("DESC", "DESC")
            tableMapping.ColumnMappings.Add("ASSETNO", "ASSETNO")
            tableMapping.ColumnMappings.Add("LOCATION", "LOCATION")
            tableMapping.ColumnMappings.Add("CAT", "CAT")
            tableMapping.ColumnMappings.Add("STATUS", "STATUS")
            tableMapping.ColumnMappings.Add("MODELNO", "MODELNO")
            tableMapping.ColumnMappings.Add("SERIALNO", "SERIALNO")
            tableMapping.ColumnMappings.Add("DATACQUIR", "DATACQUIR")
            tableMapping.ColumnMappings.Add("COMMENTS", "COMMENTS")
            tableMapping.ColumnMappings.Add("NEXTSCHED", "NEXTSCHED")
            tableMapping.ColumnMappings.Add("EVENT", "EVENT")
            tableMapping.ColumnMappings.Add("DEPT", "DEPT")
            tableMapping.ColumnMappings.Add("MANUFACTUR", "MANUFACTUR")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ASSETSNEW] ([DESC], [ASSETNO], [LOCATION], [CAT], [STATUS], [M"& _ 
                "ODELNO], [SERIALNO], [DATACQUIR], [COMMENTS], [NEXTSCHED], [EVENT], [DEPT], [MAN"& _ 
                "UFACTUR]) VALUES (@DESC, @ASSETNO, @LOCATION, @CAT, @STATUS, @MODELNO, @SERIALNO"& _ 
                ", @DATACQUIR, @COMMENTS, @NEXTSCHED, @EVENT, @DEPT, @MANUFACTUR)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DESC", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DESC", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSETNO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSETNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LOCATION", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LOCATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CAT", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CAT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@STATUS", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "STATUS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MODELNO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MODELNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SERIALNO", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SERIALNO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DATACQUIR", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DATACQUIR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@COMMENTS", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "COMMENTS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NEXTSCHED", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NEXTSCHED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EVENT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EVENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEPT", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DEPT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MANUFACTUR", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MANUFACTUR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT [DESC], ASSETNO, LOCATION, CAT, STATUS, MODELNO, SERIALNO, DATACQUIR, COMM"& _ 
                "ENTS, NEXTSCHED, EVENT, DEPT, MANUFACTUR FROM dbo.ASSETSNEW"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.ASSETSNEWDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.ASSETSNEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.ASSETSNEWDataTable = New TransvacDataV2DataSet1.ASSETSNEWDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.ASSETSNEWDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "ASSETSNEW")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DESC As String, ByVal ASSETNO As String, ByVal LOCATION As String, ByVal CAT As String, ByVal STATUS As String, ByVal MODELNO As String, ByVal SERIALNO As String, ByVal DATACQUIR As Global.System.Nullable(Of Date), ByVal COMMENTS As String, ByVal NEXTSCHED As Global.System.Nullable(Of Date), ByVal _EVENT As String, ByVal DEPT As String, ByVal MANUFACTUR As String) As Integer
            If (DESC Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(DESC,String)
            End If
            If (ASSETNO Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ASSETNO")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ASSETNO,String)
            End If
            If (LOCATION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(LOCATION,String)
            End If
            If (CAT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CAT,String)
            End If
            If (STATUS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(STATUS,String)
            End If
            If (MODELNO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MODELNO,String)
            End If
            If (SERIALNO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(SERIALNO,String)
            End If
            If (DATACQUIR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(DATACQUIR.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (COMMENTS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(COMMENTS,String)
            End If
            If (NEXTSCHED.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(NEXTSCHED.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (_EVENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(_EVENT,String)
            End If
            If (DEPT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(DEPT,String)
            End If
            If (MANUFACTUR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(MANUFACTUR,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class atransTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "atrans"
            tableMapping.ColumnMappings.Add("tassetno", "tassetno")
            tableMapping.ColumnMappings.Add("tdate", "tdate")
            tableMapping.ColumnMappings.Add("tdirect", "tdirect")
            tableMapping.ColumnMappings.Add("tdesc", "tdesc")
            tableMapping.ColumnMappings.Add("twho", "twho")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[atrans] WHERE (([tassetno] = @Original_tassetno) AND ([tdate] "& _ 
                "= @Original_tdate) AND ([tdirect] = @Original_tdirect) AND ([tdesc] = @Original_"& _ 
                "tdesc) AND ([twho] = @Original_twho) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tassetno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tassetno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tdirect", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tdirect", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tdesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tdesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_twho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "twho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[atrans] ([tassetno], [tdate], [tdirect], [tdesc], [twho]) VALU"& _ 
                "ES (@tassetno, @tdate, @tdirect, @tdesc, @twho);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT tassetno, tdate, tdirec"& _ 
                "t, tdesc, twho, UniqueID FROM atrans WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tassetno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tassetno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tdirect", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tdirect", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tdesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tdesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@twho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "twho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[atrans] SET [tassetno] = @tassetno, [tdate] = @tdate, [tdirect] = @"& _ 
                "tdirect, [tdesc] = @tdesc, [twho] = @twho WHERE (([tassetno] = @Original_tassetn"& _ 
                "o) AND ([tdate] = @Original_tdate) AND ([tdirect] = @Original_tdirect) AND ([tde"& _ 
                "sc] = @Original_tdesc) AND ([twho] = @Original_twho) AND ([UniqueID] = @Original"& _ 
                "_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT tassetno, tdate, tdirect, tdesc, twho, UniqueID FROM atrans"& _ 
                " WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tassetno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tassetno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tdirect", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tdirect", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tdesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tdesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@twho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "twho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tassetno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tassetno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tdirect", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tdirect", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tdesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tdesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_twho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "twho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT tassetno, tdate, tdirect, tdesc, twho, UniqueID FROM dbo.atrans"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.atransDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.atransDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.atransDataTable = New TransvacDataV2DataSet1.atransDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.atransDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "atrans")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_tassetno As String, ByVal Original_tdate As Date, ByVal Original_tdirect As String, ByVal Original_tdesc As String, ByVal Original_twho As String, ByVal Original_UniqueID As Long) As Integer
            If (Original_tassetno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tassetno")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_tassetno,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_tdate,Date)
            If (Original_tdirect Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tdirect")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_tdirect,String)
            End If
            If (Original_tdesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tdesc")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_tdesc,String)
            End If
            If (Original_twho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_twho")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_twho,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal tassetno As String, ByVal tdate As Date, ByVal tdirect As String, ByVal tdesc As String, ByVal twho As String) As Integer
            If (tassetno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tassetno")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(tassetno,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(tdate,Date)
            If (tdirect Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tdirect")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(tdirect,String)
            End If
            If (tdesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tdesc")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(tdesc,String)
            End If
            If (twho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("twho")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(twho,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal tassetno As String, ByVal tdate As Date, ByVal tdirect As String, ByVal tdesc As String, ByVal twho As String, ByVal Original_tassetno As String, ByVal Original_tdate As Date, ByVal Original_tdirect As String, ByVal Original_tdesc As String, ByVal Original_twho As String, ByVal Original_UniqueID As Long, ByVal UniqueID As Long) As Integer
            If (tassetno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tassetno")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(tassetno,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(tdate,Date)
            If (tdirect Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tdirect")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(tdirect,String)
            End If
            If (tdesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("tdesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(tdesc,String)
            End If
            If (twho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("twho")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(twho,String)
            End If
            If (Original_tassetno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tassetno")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_tassetno,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_tdate,Date)
            If (Original_tdirect Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tdirect")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_tdirect,String)
            End If
            If (Original_tdesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_tdesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_tdesc,String)
            End If
            If (Original_twho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_twho")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_twho,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal tassetno As String, ByVal tdate As Date, ByVal tdirect As String, ByVal tdesc As String, ByVal twho As String, ByVal Original_tassetno As String, ByVal Original_tdate As Date, ByVal Original_tdirect As String, ByVal Original_tdesc As String, ByVal Original_twho As String, ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(tassetno, tdate, tdirect, tdesc, twho, Original_tassetno, Original_tdate, Original_tdirect, Original_tdesc, Original_twho, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class binallocTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "binalloc"
            tableMapping.ColumnMappings.Add("binpart", "binpart")
            tableMapping.ColumnMappings.Add("binsup", "binsup")
            tableMapping.ColumnMappings.Add("binref", "binref")
            tableMapping.ColumnMappings.Add("bincode", "bincode")
            tableMapping.ColumnMappings.Add("binrecno", "binrecno")
            tableMapping.ColumnMappings.Add("binalloc", "binalloc")
            tableMapping.ColumnMappings.Add("bininvno", "bininvno")
            tableMapping.ColumnMappings.Add("binwho", "binwho")
            tableMapping.ColumnMappings.Add("bindate", "bindate")
            tableMapping.ColumnMappings.Add("binordno", "binordno")
            tableMapping.ColumnMappings.Add("bline", "bline")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[binalloc] WHERE (([binpart] = @Original_binpart) AND ([binsup]"& _ 
                " = @Original_binsup) AND ([binref] = @Original_binref) AND ([bincode] = @Origina"& _ 
                "l_bincode) AND ([binrecno] = @Original_binrecno) AND ([binalloc] = @Original_bin"& _ 
                "alloc) AND ([bininvno] = @Original_bininvno) AND ([binwho] = @Original_binwho) A"& _ 
                "ND ([bindate] = @Original_bindate) AND ([binordno] = @Original_binordno) AND ([b"& _ 
                "line] = @Original_bline) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_binpart", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "binpart", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_binsup", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "binsup", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_binref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "binref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bincode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bincode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_binrecno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "binrecno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_binalloc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "binalloc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bininvno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bininvno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_binwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "binwho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bindate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bindate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_binordno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "binordno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bline", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bline", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[binalloc] ([binpart], [binsup], [binref], [bincode], [binrecno"& _ 
                "], [binalloc], [bininvno], [binwho], [bindate], [binordno], [bline]) VALUES (@bi"& _ 
                "npart, @binsup, @binref, @bincode, @binrecno, @binalloc, @bininvno, @binwho, @bi"& _ 
                "ndate, @binordno, @bline);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT binpart, binsup, binref, bincode, binrecno, b"& _ 
                "inalloc, bininvno, binwho, bindate, binordno, bline, UniqueID FROM binalloc WHER"& _ 
                "E (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@binpart", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "binpart", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@binsup", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "binsup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@binref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "binref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bincode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bincode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@binrecno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "binrecno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@binalloc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "binalloc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bininvno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bininvno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@binwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "binwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bindate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bindate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@binordno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "binordno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bline", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bline", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[binalloc] SET [binpart] = @binpart, [binsup] = @binsup, [binref] = "& _ 
                "@binref, [bincode] = @bincode, [binrecno] = @binrecno, [binalloc] = @binalloc, ["& _ 
                "bininvno] = @bininvno, [binwho] = @binwho, [bindate] = @bindate, [binordno] = @b"& _ 
                "inordno, [bline] = @bline WHERE (([binpart] = @Original_binpart) AND ([binsup] ="& _ 
                " @Original_binsup) AND ([binref] = @Original_binref) AND ([bincode] = @Original_"& _ 
                "bincode) AND ([binrecno] = @Original_binrecno) AND ([binalloc] = @Original_binal"& _ 
                "loc) AND ([bininvno] = @Original_bininvno) AND ([binwho] = @Original_binwho) AND"& _ 
                " ([bindate] = @Original_bindate) AND ([binordno] = @Original_binordno) AND ([bli"& _ 
                "ne] = @Original_bline) AND ([UniqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT binpart, "& _ 
                "binsup, binref, bincode, binrecno, binalloc, bininvno, binwho, bindate, binordno"& _ 
                ", bline, UniqueID FROM binalloc WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@binpart", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "binpart", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@binsup", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "binsup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@binref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "binref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bincode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bincode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@binrecno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "binrecno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@binalloc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "binalloc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bininvno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bininvno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@binwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "binwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bindate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bindate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@binordno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "binordno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bline", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bline", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_binpart", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "binpart", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_binsup", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "binsup", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_binref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "binref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bincode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bincode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_binrecno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "binrecno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_binalloc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "binalloc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bininvno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bininvno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_binwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "binwho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bindate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bindate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_binordno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "binordno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bline", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bline", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT binpart, binsup, binref, bincode, binrecno, binalloc, bininvno, binwho, bi"& _ 
                "ndate, binordno, bline, UniqueID FROM dbo.binalloc"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.binallocDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.binallocDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.binallocDataTable = New TransvacDataV2DataSet1.binallocDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.binallocDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "binalloc")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_binpart As String, ByVal Original_binsup As String, ByVal Original_binref As String, ByVal Original_bincode As String, ByVal Original_binrecno As Decimal, ByVal Original_binalloc As Decimal, ByVal Original_bininvno As String, ByVal Original_binwho As String, ByVal Original_bindate As Date, ByVal Original_binordno As String, ByVal Original_bline As String, ByVal Original_UniqueID As Long) As Integer
            If (Original_binpart Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_binpart")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_binpart,String)
            End If
            If (Original_binsup Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_binsup")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_binsup,String)
            End If
            If (Original_binref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_binref")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_binref,String)
            End If
            If (Original_bincode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bincode")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_bincode,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_binrecno,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_binalloc,Decimal)
            If (Original_bininvno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bininvno")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_bininvno,String)
            End If
            If (Original_binwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_binwho")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_binwho,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_bindate,Date)
            If (Original_binordno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_binordno")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_binordno,String)
            End If
            If (Original_bline Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bline")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_bline,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal binpart As String, ByVal binsup As String, ByVal binref As String, ByVal bincode As String, ByVal binrecno As Decimal, ByVal binalloc As Decimal, ByVal bininvno As String, ByVal binwho As String, ByVal bindate As Date, ByVal binordno As String, ByVal bline As String) As Integer
            If (binpart Is Nothing) Then
                Throw New Global.System.ArgumentNullException("binpart")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(binpart,String)
            End If
            If (binsup Is Nothing) Then
                Throw New Global.System.ArgumentNullException("binsup")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(binsup,String)
            End If
            If (binref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("binref")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(binref,String)
            End If
            If (bincode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bincode")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(bincode,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(binrecno,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(binalloc,Decimal)
            If (bininvno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bininvno")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(bininvno,String)
            End If
            If (binwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("binwho")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(binwho,String)
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(bindate,Date)
            If (binordno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("binordno")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(binordno,String)
            End If
            If (bline Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bline")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(bline,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal binpart As String,  _
                    ByVal binsup As String,  _
                    ByVal binref As String,  _
                    ByVal bincode As String,  _
                    ByVal binrecno As Decimal,  _
                    ByVal binalloc As Decimal,  _
                    ByVal bininvno As String,  _
                    ByVal binwho As String,  _
                    ByVal bindate As Date,  _
                    ByVal binordno As String,  _
                    ByVal bline As String,  _
                    ByVal Original_binpart As String,  _
                    ByVal Original_binsup As String,  _
                    ByVal Original_binref As String,  _
                    ByVal Original_bincode As String,  _
                    ByVal Original_binrecno As Decimal,  _
                    ByVal Original_binalloc As Decimal,  _
                    ByVal Original_bininvno As String,  _
                    ByVal Original_binwho As String,  _
                    ByVal Original_bindate As Date,  _
                    ByVal Original_binordno As String,  _
                    ByVal Original_bline As String,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (binpart Is Nothing) Then
                Throw New Global.System.ArgumentNullException("binpart")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(binpart,String)
            End If
            If (binsup Is Nothing) Then
                Throw New Global.System.ArgumentNullException("binsup")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(binsup,String)
            End If
            If (binref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("binref")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(binref,String)
            End If
            If (bincode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bincode")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(bincode,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(binrecno,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(binalloc,Decimal)
            If (bininvno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bininvno")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(bininvno,String)
            End If
            If (binwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("binwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(binwho,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(bindate,Date)
            If (binordno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("binordno")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(binordno,String)
            End If
            If (bline Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bline")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(bline,String)
            End If
            If (Original_binpart Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_binpart")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_binpart,String)
            End If
            If (Original_binsup Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_binsup")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_binsup,String)
            End If
            If (Original_binref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_binref")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_binref,String)
            End If
            If (Original_bincode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bincode")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_bincode,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_binrecno,Decimal)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_binalloc,Decimal)
            If (Original_bininvno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bininvno")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_bininvno,String)
            End If
            If (Original_binwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_binwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_binwho,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_bindate,Date)
            If (Original_binordno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_binordno")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_binordno,String)
            End If
            If (Original_bline Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bline")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_bline,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal binpart As String,  _
                    ByVal binsup As String,  _
                    ByVal binref As String,  _
                    ByVal bincode As String,  _
                    ByVal binrecno As Decimal,  _
                    ByVal binalloc As Decimal,  _
                    ByVal bininvno As String,  _
                    ByVal binwho As String,  _
                    ByVal bindate As Date,  _
                    ByVal binordno As String,  _
                    ByVal bline As String,  _
                    ByVal Original_binpart As String,  _
                    ByVal Original_binsup As String,  _
                    ByVal Original_binref As String,  _
                    ByVal Original_bincode As String,  _
                    ByVal Original_binrecno As Decimal,  _
                    ByVal Original_binalloc As Decimal,  _
                    ByVal Original_bininvno As String,  _
                    ByVal Original_binwho As String,  _
                    ByVal Original_bindate As Date,  _
                    ByVal Original_binordno As String,  _
                    ByVal Original_bline As String,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(binpart, binsup, binref, bincode, binrecno, binalloc, bininvno, binwho, bindate, binordno, bline, Original_binpart, Original_binsup, Original_binref, Original_bincode, Original_binrecno, Original_binalloc, Original_bininvno, Original_binwho, Original_bindate, Original_binordno, Original_bline, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class catTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "cat"
            tableMapping.ColumnMappings.Add("cdesc", "cdesc")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[cat] WHERE (([cdesc] = @Original_cdesc) AND ([UniqueID] = @Ori"& _ 
                "ginal_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cdesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cdesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[cat] ([cdesc]) VALUES (@cdesc);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT cdesc, UniqueID FROM c"& _ 
                "at WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cdesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cdesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[cat] SET [cdesc] = @cdesc WHERE (([cdesc] = @Original_cdesc) AND (["& _ 
                "UniqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT cdesc, UniqueID FROM cat WHERE (Unique"& _ 
                "ID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cdesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cdesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cdesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cdesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT cdesc, UniqueID FROM dbo.cat"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.catDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.catDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.catDataTable = New TransvacDataV2DataSet1.catDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.catDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "cat")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_cdesc As String, ByVal Original_UniqueID As Long) As Integer
            If (Original_cdesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cdesc")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_cdesc,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal cdesc As String) As Integer
            If (cdesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cdesc")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(cdesc,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal cdesc As String, ByVal Original_cdesc As String, ByVal Original_UniqueID As Long, ByVal UniqueID As Long) As Integer
            If (cdesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cdesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(cdesc,String)
            End If
            If (Original_cdesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cdesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_cdesc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal cdesc As String, ByVal Original_cdesc As String, ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(cdesc, Original_cdesc, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class countryTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "country"
            tableMapping.ColumnMappings.Add("cty_code", "cty_code")
            tableMapping.ColumnMappings.Add("cty_name", "cty_name")
            tableMapping.ColumnMappings.Add("peg_code", "peg_code")
            tableMapping.ColumnMappings.Add("peg_curcy", "peg_curcy")
            tableMapping.ColumnMappings.Add("inv_rate", "inv_rate")
            tableMapping.ColumnMappings.Add("erate", "erate")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[country] WHERE (([cty_code] = @Original_cty_code) AND ([cty_na"& _ 
                "me] = @Original_cty_name) AND ([peg_code] = @Original_peg_code) AND ([peg_curcy]"& _ 
                " = @Original_peg_curcy) AND ([inv_rate] = @Original_inv_rate) AND ([erate] = @Or"& _ 
                "iginal_erate) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cty_code", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cty_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cty_name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cty_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_peg_code", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "peg_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_peg_curcy", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "peg_curcy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_inv_rate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "inv_rate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_erate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "erate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[country] ([cty_code], [cty_name], [peg_code], [peg_curcy], [in"& _ 
                "v_rate], [erate]) VALUES (@cty_code, @cty_name, @peg_code, @peg_curcy, @inv_rate"& _ 
                ", @erate);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT cty_code, cty_name, peg_code, peg_curcy, inv_rate, erate, Uni"& _ 
                "queID FROM country WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cty_code", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cty_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cty_name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cty_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@peg_code", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "peg_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@peg_curcy", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "peg_curcy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@inv_rate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "inv_rate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@erate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "erate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[country] SET [cty_code] = @cty_code, [cty_name] = @cty_name, [peg_c"& _ 
                "ode] = @peg_code, [peg_curcy] = @peg_curcy, [inv_rate] = @inv_rate, [erate] = @e"& _ 
                "rate WHERE (([cty_code] = @Original_cty_code) AND ([cty_name] = @Original_cty_na"& _ 
                "me) AND ([peg_code] = @Original_peg_code) AND ([peg_curcy] = @Original_peg_curcy"& _ 
                ") AND ([inv_rate] = @Original_inv_rate) AND ([erate] = @Original_erate) AND ([Un"& _ 
                "iqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT cty_code, cty_name, peg_code, peg_curcy,"& _ 
                " inv_rate, erate, UniqueID FROM country WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cty_code", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cty_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cty_name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cty_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@peg_code", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "peg_code", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@peg_curcy", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "peg_curcy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@inv_rate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "inv_rate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@erate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "erate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cty_code", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cty_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_cty_name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cty_name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_peg_code", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "peg_code", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_peg_curcy", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "peg_curcy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_inv_rate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "inv_rate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_erate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "erate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT cty_code, cty_name, peg_code, peg_curcy, inv_rate, erate, UniqueID FROM db"& _ 
                "o.country"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.countryDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.countryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.countryDataTable = New TransvacDataV2DataSet1.countryDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.countryDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "country")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_cty_code As String, ByVal Original_cty_name As String, ByVal Original_peg_code As String, ByVal Original_peg_curcy As String, ByVal Original_inv_rate As Decimal, ByVal Original_erate As Decimal, ByVal Original_UniqueID As Long) As Integer
            If (Original_cty_code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cty_code")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_cty_code,String)
            End If
            If (Original_cty_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cty_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_cty_name,String)
            End If
            If (Original_peg_code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_peg_code")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_peg_code,String)
            End If
            If (Original_peg_curcy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_peg_curcy")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_peg_curcy,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_inv_rate,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_erate,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal cty_code As String, ByVal cty_name As String, ByVal peg_code As String, ByVal peg_curcy As String, ByVal inv_rate As Decimal, ByVal erate As Decimal) As Integer
            If (cty_code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cty_code")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(cty_code,String)
            End If
            If (cty_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cty_name")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(cty_name,String)
            End If
            If (peg_code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("peg_code")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(peg_code,String)
            End If
            If (peg_curcy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("peg_curcy")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(peg_curcy,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(inv_rate,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(erate,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal cty_code As String, ByVal cty_name As String, ByVal peg_code As String, ByVal peg_curcy As String, ByVal inv_rate As Decimal, ByVal erate As Decimal, ByVal Original_cty_code As String, ByVal Original_cty_name As String, ByVal Original_peg_code As String, ByVal Original_peg_curcy As String, ByVal Original_inv_rate As Decimal, ByVal Original_erate As Decimal, ByVal Original_UniqueID As Long, ByVal UniqueID As Long) As Integer
            If (cty_code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cty_code")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(cty_code,String)
            End If
            If (cty_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cty_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(cty_name,String)
            End If
            If (peg_code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("peg_code")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(peg_code,String)
            End If
            If (peg_curcy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("peg_curcy")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(peg_curcy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(inv_rate,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(erate,Decimal)
            If (Original_cty_code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cty_code")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_cty_code,String)
            End If
            If (Original_cty_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_cty_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_cty_name,String)
            End If
            If (Original_peg_code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_peg_code")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_peg_code,String)
            End If
            If (Original_peg_curcy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_peg_curcy")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_peg_curcy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_inv_rate,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_erate,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal cty_code As String, ByVal cty_name As String, ByVal peg_code As String, ByVal peg_curcy As String, ByVal inv_rate As Decimal, ByVal erate As Decimal, ByVal Original_cty_code As String, ByVal Original_cty_name As String, ByVal Original_peg_code As String, ByVal Original_peg_curcy As String, ByVal Original_inv_rate As Decimal, ByVal Original_erate As Decimal, ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(cty_code, cty_name, peg_code, peg_curcy, inv_rate, erate, Original_cty_code, Original_cty_name, Original_peg_code, Original_peg_curcy, Original_inv_rate, Original_erate, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class custdiscTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "custdisc"
            tableMapping.ColumnMappings.Add("accno", "accno")
            tableMapping.ColumnMappings.Add("supplier", "supplier")
            tableMapping.ColumnMappings.Add("dpercent", "dpercent")
            tableMapping.ColumnMappings.Add("spercent", "spercent")
            tableMapping.ColumnMappings.Add("svalue", "svalue")
            tableMapping.ColumnMappings.Add("showdisc", "showdisc")
            tableMapping.ColumnMappings.Add("dupdate", "dupdate")
            tableMapping.ColumnMappings.Add("dwho", "dwho")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[custdisc] WHERE (([accno] = @Original_accno) AND ([supplier] ="& _ 
                " @Original_supplier) AND ([dpercent] = @Original_dpercent) AND ([spercent] = @Or"& _ 
                "iginal_spercent) AND ([svalue] = @Original_svalue) AND ([showdisc] = @Original_s"& _ 
                "howdisc) AND ([dupdate] = @Original_dupdate) AND ([dwho] = @Original_dwho) AND ("& _ 
                "[UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_accno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "accno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dpercent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "dpercent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_spercent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "spercent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_svalue", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "svalue", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_showdisc", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "showdisc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dupdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dupdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dwho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[custdisc] ([accno], [supplier], [dpercent], [spercent], [svalu"& _ 
                "e], [showdisc], [dupdate], [dwho]) VALUES (@accno, @supplier, @dpercent, @sperce"& _ 
                "nt, @svalue, @showdisc, @dupdate, @dwho);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT accno, supplier, dpercent, spe"& _ 
                "rcent, svalue, showdisc, dupdate, dwho, UniqueID FROM custdisc WHERE (UniqueID ="& _ 
                " SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@accno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "accno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dpercent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "dpercent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@spercent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "spercent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@svalue", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "svalue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@showdisc", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "showdisc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dupdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dupdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[custdisc] SET [accno] = @accno, [supplier] = @supplier, [dpercent] "& _ 
                "= @dpercent, [spercent] = @spercent, [svalue] = @svalue, [showdisc] = @showdisc,"& _ 
                " [dupdate] = @dupdate, [dwho] = @dwho WHERE (([accno] = @Original_accno) AND ([s"& _ 
                "upplier] = @Original_supplier) AND ([dpercent] = @Original_dpercent) AND ([sperc"& _ 
                "ent] = @Original_spercent) AND ([svalue] = @Original_svalue) AND ([showdisc] = @"& _ 
                "Original_showdisc) AND ([dupdate] = @Original_dupdate) AND ([dwho] = @Original_d"& _ 
                "who) AND ([UniqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT accno, supplier, dpercent, "& _ 
                "spercent, svalue, showdisc, dupdate, dwho, UniqueID FROM custdisc WHERE (UniqueI"& _ 
                "D = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@accno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "accno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dpercent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "dpercent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@spercent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "spercent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@svalue", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "svalue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@showdisc", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "showdisc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dupdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dupdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_accno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "accno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dpercent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "dpercent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_spercent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "spercent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_svalue", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "svalue", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_showdisc", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "showdisc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dupdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dupdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dwho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT accno, supplier, dpercent, spercent, svalue, showdisc, dupdate, dwho, Uniq"& _ 
                "ueID FROM dbo.custdisc"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.custdiscDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.custdiscDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.custdiscDataTable = New TransvacDataV2DataSet1.custdiscDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.custdiscDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "custdisc")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_accno As String, ByVal Original_supplier As String, ByVal Original_dpercent As Decimal, ByVal Original_spercent As Decimal, ByVal Original_svalue As Decimal, ByVal Original_showdisc As Boolean, ByVal Original_dupdate As Date, ByVal Original_dwho As String, ByVal Original_UniqueID As Long) As Integer
            If (Original_accno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_accno")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_accno,String)
            End If
            If (Original_supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_supplier")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_supplier,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_dpercent,Decimal)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_spercent,Decimal)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_svalue,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_showdisc,Boolean)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_dupdate,Date)
            If (Original_dwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_dwho")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_dwho,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal accno As String, ByVal supplier As String, ByVal dpercent As Decimal, ByVal spercent As Decimal, ByVal svalue As Decimal, ByVal showdisc As Boolean, ByVal dupdate As Date, ByVal dwho As String) As Integer
            If (accno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("accno")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(accno,String)
            End If
            If (supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("supplier")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(supplier,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(dpercent,Decimal)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(spercent,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(svalue,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(showdisc,Boolean)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(dupdate,Date)
            If (dwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dwho")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(dwho,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal accno As String,  _
                    ByVal supplier As String,  _
                    ByVal dpercent As Decimal,  _
                    ByVal spercent As Decimal,  _
                    ByVal svalue As Decimal,  _
                    ByVal showdisc As Boolean,  _
                    ByVal dupdate As Date,  _
                    ByVal dwho As String,  _
                    ByVal Original_accno As String,  _
                    ByVal Original_supplier As String,  _
                    ByVal Original_dpercent As Decimal,  _
                    ByVal Original_spercent As Decimal,  _
                    ByVal Original_svalue As Decimal,  _
                    ByVal Original_showdisc As Boolean,  _
                    ByVal Original_dupdate As Date,  _
                    ByVal Original_dwho As String,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (accno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("accno")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(accno,String)
            End If
            If (supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("supplier")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(supplier,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(dpercent,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(spercent,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(svalue,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(showdisc,Boolean)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(dupdate,Date)
            If (dwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(dwho,String)
            End If
            If (Original_accno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_accno")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_accno,String)
            End If
            If (Original_supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_supplier")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_supplier,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_dpercent,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_spercent,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_svalue,Decimal)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_showdisc,Boolean)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_dupdate,Date)
            If (Original_dwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_dwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_dwho,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal accno As String,  _
                    ByVal supplier As String,  _
                    ByVal dpercent As Decimal,  _
                    ByVal spercent As Decimal,  _
                    ByVal svalue As Decimal,  _
                    ByVal showdisc As Boolean,  _
                    ByVal dupdate As Date,  _
                    ByVal dwho As String,  _
                    ByVal Original_accno As String,  _
                    ByVal Original_supplier As String,  _
                    ByVal Original_dpercent As Decimal,  _
                    ByVal Original_spercent As Decimal,  _
                    ByVal Original_svalue As Decimal,  _
                    ByVal Original_showdisc As Boolean,  _
                    ByVal Original_dupdate As Date,  _
                    ByVal Original_dwho As String,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(accno, supplier, dpercent, spercent, svalue, showdisc, dupdate, dwho, Original_accno, Original_supplier, Original_dpercent, Original_spercent, Original_svalue, Original_showdisc, Original_dupdate, Original_dwho, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class dummy_TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "dummy_"
            tableMapping.ColumnMappings.Add("dummy1", "dummy1")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[dummy_] WHERE (([dummy1] = @Original_dummy1) AND ([UniqueID] ="& _ 
                " @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dummy1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dummy1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[dummy_] ([dummy1]) VALUES (@dummy1);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT dummy1, UniqueID "& _ 
                "FROM dummy_ WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dummy1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dummy1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[dummy_] SET [dummy1] = @dummy1 WHERE (([dummy1] = @Original_dummy1)"& _ 
                " AND ([UniqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT dummy1, UniqueID FROM dummy_ WH"& _ 
                "ERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dummy1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dummy1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dummy1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dummy1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT dummy1, UniqueID FROM dbo.dummy_"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.dummy_DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.dummy_DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.dummy_DataTable = New TransvacDataV2DataSet1.dummy_DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.dummy_DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "dummy_")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_dummy1 As String, ByVal Original_UniqueID As Long) As Integer
            If (Original_dummy1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_dummy1")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_dummy1,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal dummy1 As String) As Integer
            If (dummy1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dummy1")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(dummy1,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal dummy1 As String, ByVal Original_dummy1 As String, ByVal Original_UniqueID As Long, ByVal UniqueID As Long) As Integer
            If (dummy1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dummy1")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(dummy1,String)
            End If
            If (Original_dummy1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_dummy1")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_dummy1,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal dummy1 As String, ByVal Original_dummy1 As String, ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(dummy1, Original_dummy1, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class enquiryTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "enquiry"
            tableMapping.ColumnMappings.Add("quote_no", "quote_no")
            tableMapping.ColumnMappings.Add("cname", "cname")
            tableMapping.ColumnMappings.Add("ref_no", "ref_no")
            tableMapping.ColumnMappings.Add("status", "status")
            tableMapping.ColumnMappings.Add("ewho", "ewho")
            tableMapping.ColumnMappings.Add("accno", "accno")
            tableMapping.ColumnMappings.Add("ememo", "ememo")
            tableMapping.ColumnMappings.Add("ship_name", "ship_name")
            tableMapping.ColumnMappings.Add("email", "email")
            tableMapping.ColumnMappings.Add("mobtel_no", "mobtel_no")
            tableMapping.ColumnMappings.Add("fax_no", "fax_no")
            tableMapping.ColumnMappings.Add("tel_no", "tel_no")
            tableMapping.ColumnMappings.Add("contact", "contact")
            tableMapping.ColumnMappings.Add("edate", "edate")
            tableMapping.ColumnMappings.Add("etype", "etype")
            tableMapping.ColumnMappings.Add("timestamp_column", "timestamp_column")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [enquiry] ([cname], [ref_no], [quote_no], [ewho], [status], [accno], "& _ 
                "[ememo], [ship_name], [email], [mobtel_no], [fax_no], [tel_no], [contact], [edat"& _ 
                "e], [etype], [UniqueID]) VALUES (@cname, @ref_no, @quote_no, @ewho, @status, @ac"& _ 
                "cno, @ememo, @ship_name, @email, @mobtel_no, @fax_no, @tel_no, @contact, @edate,"& _ 
                " @etype, @UniqueID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cname", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cname", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ref_no", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ref_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quote_no", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quote_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ewho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ewho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@accno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "accno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ememo", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ememo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ship_name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ship_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@email", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@mobtel_no", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "mobtel_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fax_no", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fax_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tel_no", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "tel_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@contact", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "contact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@edate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "edate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@etype", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "etype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE       enquiry"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                cname = @param1, contact = @param2, ref_"& _ 
                "no = @param3, tel_no = @param4, fax_no = @param5, mobtel_no = @param6, email = @"& _ 
                "param7, ship_name = @param8, ememo = @param9, accno = @param10, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"              "& _ 
                "           status = @param11, etype = @param12, ewho = @param13"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (q"& _ 
                "uote_no = @quote_no)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@param1", Global.System.Data.SqlDbType.[Char], 100, Global.System.Data.ParameterDirection.Input, 0, 0, "cname", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@param2", Global.System.Data.SqlDbType.[Char], 100, Global.System.Data.ParameterDirection.Input, 0, 0, "contact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@param3", Global.System.Data.SqlDbType.[Char], 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ref_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@param4", Global.System.Data.SqlDbType.[Char], 20, Global.System.Data.ParameterDirection.Input, 0, 0, "tel_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@param5", Global.System.Data.SqlDbType.[Char], 20, Global.System.Data.ParameterDirection.Input, 0, 0, "fax_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@param6", Global.System.Data.SqlDbType.[Char], 20, Global.System.Data.ParameterDirection.Input, 0, 0, "mobtel_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@param7", Global.System.Data.SqlDbType.[Char], 50, Global.System.Data.ParameterDirection.Input, 0, 0, "email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@param8", Global.System.Data.SqlDbType.[Char], 20, Global.System.Data.ParameterDirection.Input, 0, 0, "ship_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@param9", Global.System.Data.SqlDbType.Text, 2147483647, Global.System.Data.ParameterDirection.Input, 0, 0, "ememo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@param10", Global.System.Data.SqlDbType.[Char], 6, Global.System.Data.ParameterDirection.Input, 0, 0, "accno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@param11", Global.System.Data.SqlDbType.[Char], 20, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@param12", Global.System.Data.SqlDbType.[Char], 15, Global.System.Data.ParameterDirection.Input, 0, 0, "etype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@param13", Global.System.Data.SqlDbType.[Char], 5, Global.System.Data.ParameterDirection.Input, 0, 0, "ewho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quote_no", Global.System.Data.SqlDbType.[Char], 6, Global.System.Data.ParameterDirection.Input, 0, 0, "quote_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(5) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        cname, ref_no, quote_no, ewho, status, accno, ememo, ship_name, ema"& _ 
                "il, mobtel_no, fax_no, tel_no, contact, edate, etype, timestamp_column, UniqueID"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            enquiry"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT UniqueID, accno, cname, contact, edate, email, ememo, etype, ewho, fax_no,"& _ 
                " mobtel_no, quote_no, ref_no, ship_name, status, tel_no, timestamp_column FROM e"& _ 
                "nquiry WHERE (cname LIKE @PARAM1 + '%')"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARAM1", Global.System.Data.SqlDbType.[Char], 40, Global.System.Data.ParameterDirection.Input, 0, 0, "cname", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        accno, cname, contact, edate, email, ememo, etype, ewho, fax_no, mo"& _ 
                "btel_no, quote_no, ref_no, ship_name, status, tel_no, timestamp_column"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM    "& _ 
                "        enquiry"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (quote_no LIKE @Param1 + '%')"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.[Char], 6, Global.System.Data.ParameterDirection.Input, 0, 0, "quote_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT UniqueID, accno, cname, contact, edate, email, ememo, etype, ewho, fax_no,"& _ 
                " mobtel_no, quote_no, ref_no, ship_name, status, tel_no, timestamp_column FROM e"& _ 
                "nquiry WHERE (ewho LIKE @Param1 + '%')"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.[Char], 5, Global.System.Data.ParameterDirection.Input, 0, 0, "ewho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT UniqueID, accno, cname, contact, edate, email, ememo, etype, ewho, fax_no,"& _ 
                " mobtel_no, quote_no, ref_no, ship_name, status, tel_no, timestamp_column FROM e"& _ 
                "nquiry WHERE (status LIKE @Param1 + '%')"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.[Char], 20, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT UniqueID, accno, cname, contact, edate, email, ememo, etype, ewho, fax_no,"& _ 
                " mobtel_no, quote_no, ref_no, ship_name, status, tel_no, timestamp_column FROM e"& _ 
                "nquiry WHERE (cname LIKE @PARAM1 + '%')"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PARAM1", Global.System.Data.SqlDbType.[Char], 40, Global.System.Data.ParameterDirection.Input, 0, 0, "cname", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.enquiryDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.enquiryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.enquiryDataTable = New TransvacDataV2DataSet1.enquiryDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByName(ByVal dataTable As TransvacDataV2DataSet1.enquiryDataTable, ByVal PARAM1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PARAM1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PARAM1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy(ByVal PARAM1 As String) As TransvacDataV2DataSet1.enquiryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (PARAM1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PARAM1,String)
            End If
            Dim dataTable As TransvacDataV2DataSet1.enquiryDataTable = New TransvacDataV2DataSet1.enquiryDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByQuoteNO(ByVal dataTable As TransvacDataV2DataSet1.enquiryDataTable, ByVal Param1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Param1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByQuoteNO(ByVal Param1 As String) As TransvacDataV2DataSet1.enquiryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Param1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            Dim dataTable As TransvacDataV2DataSet1.enquiryDataTable = New TransvacDataV2DataSet1.enquiryDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySalePer(ByVal dataTable As TransvacDataV2DataSet1.enquiryDataTable, ByVal Param1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Param1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBySalesPer(ByVal Param1 As String) As TransvacDataV2DataSet1.enquiryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Param1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            Dim dataTable As TransvacDataV2DataSet1.enquiryDataTable = New TransvacDataV2DataSet1.enquiryDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByStatus(ByVal dataTable As TransvacDataV2DataSet1.enquiryDataTable, ByVal Param1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (Param1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByStatus(ByVal Param1 As String) As TransvacDataV2DataSet1.enquiryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (Param1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            Dim dataTable As TransvacDataV2DataSet1.enquiryDataTable = New TransvacDataV2DataSet1.enquiryDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByTest(ByVal dataTable As TransvacDataV2DataSet1.enquiryDataTable, ByVal PARAM1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (PARAM1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PARAM1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByTest(ByVal PARAM1 As String) As TransvacDataV2DataSet1.enquiryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (PARAM1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(PARAM1,String)
            End If
            Dim dataTable As TransvacDataV2DataSet1.enquiryDataTable = New TransvacDataV2DataSet1.enquiryDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.enquiryDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "enquiry")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal cname As String,  _
                    ByVal ref_no As String,  _
                    ByVal quote_no As String,  _
                    ByVal ewho As String,  _
                    ByVal status As String,  _
                    ByVal accno As String,  _
                    ByVal ememo As String,  _
                    ByVal ship_name As String,  _
                    ByVal email As String,  _
                    ByVal mobtel_no As String,  _
                    ByVal fax_no As String,  _
                    ByVal tel_no As String,  _
                    ByVal contact As String,  _
                    ByVal edate As Global.System.Nullable(Of Date),  _
                    ByVal etype As String,  _
                    ByVal UniqueID As Global.System.Nullable(Of Long)) As Integer
            If (cname Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(cname,String)
            End If
            If (ref_no Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ref_no,String)
            End If
            If (quote_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("quote_no")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(quote_no,String)
            End If
            If (ewho Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ewho,String)
            End If
            If (status Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(status,String)
            End If
            If (accno Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(accno,String)
            End If
            If (ememo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ememo,String)
            End If
            If (ship_name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(ship_name,String)
            End If
            If (email Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(email,String)
            End If
            If (mobtel_no Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(mobtel_no,String)
            End If
            If (fax_no Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(fax_no,String)
            End If
            If (tel_no Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(tel_no,String)
            End If
            If (contact Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(contact,String)
            End If
            If (edate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(edate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (etype Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(etype,String)
            End If
            If (UniqueID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(UniqueID.Value,Long)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal param1 As String, ByVal param2 As String, ByVal param3 As String, ByVal param4 As String, ByVal param5 As String, ByVal param6 As String, ByVal param7 As String, ByVal param8 As String, ByVal param9 As String, ByVal param10 As String, ByVal param11 As String, ByVal param12 As String, ByVal param13 As String, ByVal quote_no As String) As Integer
            If (param1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(param1,String)
            End If
            If (param2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(param2,String)
            End If
            If (param3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(param3,String)
            End If
            If (param4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(param4,String)
            End If
            If (param5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(param5,String)
            End If
            If (param6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(param6,String)
            End If
            If (param7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(param7,String)
            End If
            If (param8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(param8,String)
            End If
            If (param9 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(param9,String)
            End If
            If (param10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(param10,String)
            End If
            If (param11 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(param11,String)
            End If
            If (param12 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(param12,String)
            End If
            If (param13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(param13,String)
            End If
            If (quote_no Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(quote_no,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class eventTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "event"
            tableMapping.ColumnMappings.Add("edesc", "edesc")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[event] WHERE (([edesc] = @Original_edesc) AND ([UniqueID] = @O"& _ 
                "riginal_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_edesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "edesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[event] ([edesc]) VALUES (@edesc);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT edesc, UniqueID FROM"& _ 
                " event WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@edesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "edesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[event] SET [edesc] = @edesc WHERE (([edesc] = @Original_edesc) AND "& _ 
                "([UniqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT edesc, UniqueID FROM event WHERE (Un"& _ 
                "iqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@edesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "edesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_edesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "edesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT edesc, UniqueID FROM dbo.event"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.eventDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.eventDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.eventDataTable = New TransvacDataV2DataSet1.eventDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.eventDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "event")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_edesc As String, ByVal Original_UniqueID As Long) As Integer
            If (Original_edesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_edesc")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_edesc,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal edesc As String) As Integer
            If (edesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("edesc")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(edesc,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal edesc As String, ByVal Original_edesc As String, ByVal Original_UniqueID As Long, ByVal UniqueID As Long) As Integer
            If (edesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("edesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(edesc,String)
            End If
            If (Original_edesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_edesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_edesc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal edesc As String, ByVal Original_edesc As String, ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(edesc, Original_edesc, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class foxuserTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "foxuser"
            tableMapping.ColumnMappings.Add("type", "type")
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("name", "name")
            tableMapping.ColumnMappings.Add("readonly", "readonly")
            tableMapping.ColumnMappings.Add("ckval", "ckval")
            tableMapping.ColumnMappings.Add("data", "data")
            tableMapping.ColumnMappings.Add("updated", "updated")
            tableMapping.ColumnMappings.Add("timestamp_column", "timestamp_column")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[foxuser] WHERE (([timestamp_column] = @Original_timestamp_colu"& _ 
                "mn) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[foxuser] ([type], [id], [name], [readonly], [ckval], [data], ["& _ 
                "updated]) VALUES (@type, @id, @name, @readonly, @ckval, @data, @updated);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELEC"& _ 
                "T type, id, name, readonly, ckval, data, updated, timestamp_column, UniqueID FRO"& _ 
                "M foxuser WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@name", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@readonly", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "readonly", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ckval", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "ckval", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@updated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "updated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[foxuser] SET [type] = @type, [id] = @id, [name] = @name, [readonly]"& _ 
                " = @readonly, [ckval] = @ckval, [data] = @data, [updated] = @updated WHERE (([ti"& _ 
                "mestamp_column] = @Original_timestamp_column) AND ([UniqueID] = @Original_Unique"& _ 
                "ID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT type, id, name, readonly, ckval, data, updated, timestamp_column, "& _ 
                "UniqueID FROM foxuser WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@id", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "id", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@name", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@readonly", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "readonly", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ckval", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "ckval", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@data", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "data", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@updated", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "updated", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT type, id, name, readonly, ckval, data, updated, timestamp_column, UniqueID"& _ 
                " FROM dbo.foxuser"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.foxuserDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.foxuserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.foxuserDataTable = New TransvacDataV2DataSet1.foxuserDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.foxuserDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "foxuser")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal type As String, ByVal id As String, ByVal name As String, ByVal _readonly As Boolean, ByVal ckval As Decimal, ByVal data As String, ByVal updated As Date) As Integer
            If (type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("type")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(type,String)
            End If
            If (id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("id")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(id,String)
            End If
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(name,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(_readonly,Boolean)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ckval,Decimal)
            If (data Is Nothing) Then
                Throw New Global.System.ArgumentNullException("data")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(data,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(updated,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal type As String, ByVal id As String, ByVal name As String, ByVal _readonly As Boolean, ByVal ckval As Decimal, ByVal data As String, ByVal updated As Date, ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long, ByVal UniqueID As Long) As Integer
            If (type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("type")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(type,String)
            End If
            If (id Is Nothing) Then
                Throw New Global.System.ArgumentNullException("id")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(id,String)
            End If
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(_readonly,Boolean)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ckval,Decimal)
            If (data Is Nothing) Then
                Throw New Global.System.ArgumentNullException("data")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(data,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(updated,Date)
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal type As String, ByVal id As String, ByVal name As String, ByVal _readonly As Boolean, ByVal ckval As Decimal, ByVal data As String, ByVal updated As Date, ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(type, id, name, _readonly, ckval, data, updated, Original_timestamp_column, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class invlineTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "invline"
            tableMapping.ColumnMappings.Add("linvno", "linvno")
            tableMapping.ColumnMappings.Add("lineno_", "lineno_")
            tableMapping.ColumnMappings.Add("qty", "qty")
            tableMapping.ColumnMappings.Add("ldesc", "ldesc")
            tableMapping.ColumnMappings.Add("lamount", "lamount")
            tableMapping.ColumnMappings.Add("ltotal", "ltotal")
            tableMapping.ColumnMappings.Add("lvat", "lvat")
            tableMapping.ColumnMappings.Add("lmemo", "lmemo")
            tableMapping.ColumnMappings.Add("timestamp_column", "timestamp_column")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[invline] WHERE (([timestamp_column] = @Original_timestamp_colu"& _ 
                "mn) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[invline] ([linvno], [lineno_], [qty], [ldesc], [lamount], [lto"& _ 
                "tal], [lvat], [lmemo]) VALUES (@linvno, @lineno_, @qty, @ldesc, @lamount, @ltota"& _ 
                "l, @lvat, @lmemo);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT linvno, lineno_, qty, ldesc, lamount, ltotal, lvat, l"& _ 
                "memo, timestamp_column, UniqueID FROM invline WHERE (UniqueID = SCOPE_IDENTITY()"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@linvno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linvno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lineno_", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lineno_", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ldesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lamount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "lamount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ltotal", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 2, "ltotal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lvat", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "lvat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lmemo", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lmemo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[invline] SET [linvno] = @linvno, [lineno_] = @lineno_, [qty] = @qty"& _ 
                ", [ldesc] = @ldesc, [lamount] = @lamount, [ltotal] = @ltotal, [lvat] = @lvat, [l"& _ 
                "memo] = @lmemo WHERE (([timestamp_column] = @Original_timestamp_column) AND ([Un"& _ 
                "iqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT linvno, lineno_, qty, ldesc, lamount, lt"& _ 
                "otal, lvat, lmemo, timestamp_column, UniqueID FROM invline WHERE (UniqueID = @Un"& _ 
                "iqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@linvno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "linvno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lineno_", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lineno_", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ldesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lamount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "lamount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ltotal", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 2, "ltotal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lvat", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "lvat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lmemo", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lmemo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT linvno, lineno_, qty, ldesc, lamount, ltotal, lvat, lmemo, timestamp_colum"& _ 
                "n, UniqueID FROM dbo.invline"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.invlineDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.invlineDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.invlineDataTable = New TransvacDataV2DataSet1.invlineDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.invlineDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "invline")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal linvno As String, ByVal lineno_ As String, ByVal qty As Decimal, ByVal ldesc As String, ByVal lamount As Decimal, ByVal ltotal As Decimal, ByVal lvat As Decimal, ByVal lmemo As String) As Integer
            If (linvno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("linvno")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(linvno,String)
            End If
            If (lineno_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lineno_")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(lineno_,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(qty,Decimal)
            If (ldesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ldesc")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ldesc,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(lamount,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(ltotal,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(lvat,Decimal)
            If (lmemo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lmemo")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(lmemo,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal linvno As String, ByVal lineno_ As String, ByVal qty As Decimal, ByVal ldesc As String, ByVal lamount As Decimal, ByVal ltotal As Decimal, ByVal lvat As Decimal, ByVal lmemo As String, ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long, ByVal UniqueID As Long) As Integer
            If (linvno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("linvno")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(linvno,String)
            End If
            If (lineno_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lineno_")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(lineno_,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(qty,Decimal)
            If (ldesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ldesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ldesc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(lamount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ltotal,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(lvat,Decimal)
            If (lmemo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lmemo")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(lmemo,String)
            End If
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal linvno As String, ByVal lineno_ As String, ByVal qty As Decimal, ByVal ldesc As String, ByVal lamount As Decimal, ByVal ltotal As Decimal, ByVal lvat As Decimal, ByVal lmemo As String, ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(linvno, lineno_, qty, ldesc, lamount, ltotal, lvat, lmemo, Original_timestamp_column, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class invoiceheadTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "invoicehead"
            tableMapping.ColumnMappings.Add("iaccno", "iaccno")
            tableMapping.ColumnMappings.Add("invno", "invno")
            tableMapping.ColumnMappings.Add("idate", "idate")
            tableMapping.ColumnMappings.Add("pdate", "pdate")
            tableMapping.ColumnMappings.Add("iamount", "iamount")
            tableMapping.ColumnMappings.Add("vatamount", "vatamount")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[invoicehead] WHERE (([iaccno] = @Original_iaccno) AND ([invno]"& _ 
                " = @Original_invno) AND ([idate] = @Original_idate) AND ([pdate] = @Original_pda"& _ 
                "te) AND ([iamount] = @Original_iamount) AND ([vatamount] = @Original_vatamount) "& _ 
                "AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iaccno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iaccno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_invno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_idate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iamount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 2, "iamount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_vatamount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "vatamount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[invoicehead] ([iaccno], [invno], [idate], [pdate], [iamount], "& _ 
                "[vatamount]) VALUES (@iaccno, @invno, @idate, @pdate, @iamount, @vatamount);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT iaccno, invno, idate, pdate, iamount, vatamount, UniqueID FROM invoicehead "& _ 
                "WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iaccno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iaccno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iamount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 2, "iamount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatamount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "vatamount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[invoicehead] SET [iaccno] = @iaccno, [invno] = @invno, [idate] = @i"& _ 
                "date, [pdate] = @pdate, [iamount] = @iamount, [vatamount] = @vatamount WHERE ((["& _ 
                "iaccno] = @Original_iaccno) AND ([invno] = @Original_invno) AND ([idate] = @Orig"& _ 
                "inal_idate) AND ([pdate] = @Original_pdate) AND ([iamount] = @Original_iamount) "& _ 
                "AND ([vatamount] = @Original_vatamount) AND ([UniqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT iaccno, invno, idate, pdate, iamount, vatamount, UniqueID FROM invoicehe"& _ 
                "ad WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iaccno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iaccno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iamount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 2, "iamount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatamount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "vatamount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iaccno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iaccno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_invno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_idate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iamount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 2, "iamount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_vatamount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "vatamount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT iaccno, invno, idate, pdate, iamount, vatamount, UniqueID FROM dbo.invoice"& _ 
                "head"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.invoiceheadDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.invoiceheadDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.invoiceheadDataTable = New TransvacDataV2DataSet1.invoiceheadDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.invoiceheadDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "invoicehead")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_iaccno As String, ByVal Original_invno As String, ByVal Original_idate As Date, ByVal Original_pdate As Date, ByVal Original_iamount As Decimal, ByVal Original_vatamount As Decimal, ByVal Original_UniqueID As Long) As Integer
            If (Original_iaccno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iaccno")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_iaccno,String)
            End If
            If (Original_invno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_invno")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_invno,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_idate,Date)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_pdate,Date)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_iamount,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_vatamount,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal iaccno As String, ByVal invno As String, ByVal idate As Date, ByVal pdate As Date, ByVal iamount As Decimal, ByVal vatamount As Decimal) As Integer
            If (iaccno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iaccno")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(iaccno,String)
            End If
            If (invno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("invno")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(invno,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(idate,Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(pdate,Date)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(iamount,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(vatamount,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal iaccno As String, ByVal invno As String, ByVal idate As Date, ByVal pdate As Date, ByVal iamount As Decimal, ByVal vatamount As Decimal, ByVal Original_iaccno As String, ByVal Original_invno As String, ByVal Original_idate As Date, ByVal Original_pdate As Date, ByVal Original_iamount As Decimal, ByVal Original_vatamount As Decimal, ByVal Original_UniqueID As Long, ByVal UniqueID As Long) As Integer
            If (iaccno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iaccno")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(iaccno,String)
            End If
            If (invno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("invno")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(invno,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(idate,Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(pdate,Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(iamount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(vatamount,Decimal)
            If (Original_iaccno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iaccno")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_iaccno,String)
            End If
            If (Original_invno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_invno")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_invno,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_idate,Date)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_pdate,Date)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_iamount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_vatamount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal iaccno As String, ByVal invno As String, ByVal idate As Date, ByVal pdate As Date, ByVal iamount As Decimal, ByVal vatamount As Decimal, ByVal Original_iaccno As String, ByVal Original_invno As String, ByVal Original_idate As Date, ByVal Original_pdate As Date, ByVal Original_iamount As Decimal, ByVal Original_vatamount As Decimal, ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(iaccno, invno, idate, pdate, iamount, vatamount, Original_iaccno, Original_invno, Original_idate, Original_pdate, Original_iamount, Original_vatamount, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class invtransTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "invtrans"
            tableMapping.ColumnMappings.Add("doc_ref", "doc_ref")
            tableMapping.ColumnMappings.Add("ddate", "ddate")
            tableMapping.ColumnMappings.Add("rec_type", "rec_type")
            tableMapping.ColumnMappings.Add("line_no", "line_no")
            tableMapping.ColumnMappings.Add("partid", "partid")
            tableMapping.ColumnMappings.Add("iicode", "iicode")
            tableMapping.ColumnMappings.Add("qty_ord", "qty_ord")
            tableMapping.ColumnMappings.Add("qty_sent", "qty_sent")
            tableMapping.ColumnMappings.Add("assured", "assured")
            tableMapping.ColumnMappings.Add("desc_area", "desc_area")
            tableMapping.ColumnMappings.Add("uprice", "uprice")
            tableMapping.ColumnMappings.Add("pc_disc", "pc_disc")
            tableMapping.ColumnMappings.Add("up_disc", "up_disc")
            tableMapping.ColumnMappings.Add("curcyprice", "curcyprice")
            tableMapping.ColumnMappings.Add("currency", "currency")
            tableMapping.ColumnMappings.Add("bin_ref", "bin_ref")
            tableMapping.ColumnMappings.Add("bin_recd", "bin_recd")
            tableMapping.ColumnMappings.Add("iwho", "iwho")
            tableMapping.ColumnMappings.Add("ldate", "ldate")
            tableMapping.ColumnMappings.Add("order_", "order_")
            tableMapping.ColumnMappings.Add("supplier", "supplier")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[invtrans] WHERE (([doc_ref] = @Original_doc_ref) AND ([ddate] "& _ 
                "= @Original_ddate) AND ([rec_type] = @Original_rec_type) AND ([line_no] = @Origi"& _ 
                "nal_line_no) AND ([partid] = @Original_partid) AND ([iicode] = @Original_iicode)"& _ 
                " AND ([qty_ord] = @Original_qty_ord) AND ([qty_sent] = @Original_qty_sent) AND ("& _ 
                "[assured] = @Original_assured) AND ([desc_area] = @Original_desc_area) AND ([upr"& _ 
                "ice] = @Original_uprice) AND ([pc_disc] = @Original_pc_disc) AND ([up_disc] = @O"& _ 
                "riginal_up_disc) AND ([curcyprice] = @Original_curcyprice) AND ([currency] = @Or"& _ 
                "iginal_currency) AND ([bin_ref] = @Original_bin_ref) AND ([bin_recd] = @Original"& _ 
                "_bin_recd) AND ([iwho] = @Original_iwho) AND ([ldate] = @Original_ldate) AND ([o"& _ 
                "rder_] = @Original_order_) AND ([supplier] = @Original_supplier) AND ([UniqueID]"& _ 
                " = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_doc_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "doc_ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_line_no", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "line_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_partid", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qty_ord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_ord", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qty_sent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_sent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_desc_area", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_area", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_uprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "uprice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pc_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "pc_disc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_up_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "up_disc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_curcyprice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "curcyprice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_currency", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currency", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bin_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bin_ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bin_recd", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "bin_recd", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iwho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_order_", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "order_", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[invtrans] ([doc_ref], [ddate], [rec_type], [line_no], [partid]"& _ 
                ", [iicode], [qty_ord], [qty_sent], [assured], [desc_area], [uprice], [pc_disc], "& _ 
                "[up_disc], [curcyprice], [currency], [bin_ref], [bin_recd], [iwho], [ldate], [or"& _ 
                "der_], [supplier]) VALUES (@doc_ref, @ddate, @rec_type, @line_no, @partid, @iico"& _ 
                "de, @qty_ord, @qty_sent, @assured, @desc_area, @uprice, @pc_disc, @up_disc, @cur"& _ 
                "cyprice, @currency, @bin_ref, @bin_recd, @iwho, @ldate, @order_, @supplier);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_sent, assur"& _ 
                "ed, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref, bin_recd"& _ 
                ", iwho, ldate, order_, supplier, UniqueID FROM invtrans WHERE (UniqueID = SCOPE_"& _ 
                "IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@doc_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "doc_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@line_no", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "line_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@partid", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty_ord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_ord", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty_sent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_sent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@desc_area", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_area", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@uprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "uprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pc_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "pc_disc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@up_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "up_disc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@curcyprice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "curcyprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@currency", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bin_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bin_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bin_recd", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "bin_recd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@order_", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "order_", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[invtrans] SET [doc_ref] = @doc_ref, [ddate] = @ddate, [rec_type] = "& _ 
                "@rec_type, [line_no] = @line_no, [partid] = @partid, [iicode] = @iicode, [qty_or"& _ 
                "d] = @qty_ord, [qty_sent] = @qty_sent, [assured] = @assured, [desc_area] = @desc"& _ 
                "_area, [uprice] = @uprice, [pc_disc] = @pc_disc, [up_disc] = @up_disc, [curcypri"& _ 
                "ce] = @curcyprice, [currency] = @currency, [bin_ref] = @bin_ref, [bin_recd] = @b"& _ 
                "in_recd, [iwho] = @iwho, [ldate] = @ldate, [order_] = @order_, [supplier] = @sup"& _ 
                "plier WHERE (([doc_ref] = @Original_doc_ref) AND ([ddate] = @Original_ddate) AND"& _ 
                " ([rec_type] = @Original_rec_type) AND ([line_no] = @Original_line_no) AND ([par"& _ 
                "tid] = @Original_partid) AND ([iicode] = @Original_iicode) AND ([qty_ord] = @Ori"& _ 
                "ginal_qty_ord) AND ([qty_sent] = @Original_qty_sent) AND ([assured] = @Original_"& _ 
                "assured) AND ([desc_area] = @Original_desc_area) AND ([uprice] = @Original_upric"& _ 
                "e) AND ([pc_disc] = @Original_pc_disc) AND ([up_disc] = @Original_up_disc) AND ("& _ 
                "[curcyprice] = @Original_curcyprice) AND ([currency] = @Original_currency) AND ("& _ 
                "[bin_ref] = @Original_bin_ref) AND ([bin_recd] = @Original_bin_recd) AND ([iwho]"& _ 
                " = @Original_iwho) AND ([ldate] = @Original_ldate) AND ([order_] = @Original_ord"& _ 
                "er_) AND ([supplier] = @Original_supplier) AND ([UniqueID] = @Original_UniqueID)"& _ 
                ");"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_sent,"& _ 
                " assured, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref, bi"& _ 
                "n_recd, iwho, ldate, order_, supplier, UniqueID FROM invtrans WHERE (UniqueID = "& _ 
                "@UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@doc_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "doc_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@line_no", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "line_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@partid", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty_ord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_ord", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty_sent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_sent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@desc_area", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_area", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@uprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "uprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pc_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "pc_disc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@up_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "up_disc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@curcyprice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "curcyprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@currency", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bin_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bin_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bin_recd", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "bin_recd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@order_", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "order_", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_doc_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "doc_ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_line_no", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "line_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_partid", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qty_ord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_ord", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qty_sent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_sent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_desc_area", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_area", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_uprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "uprice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pc_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "pc_disc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_up_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "up_disc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_curcyprice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "curcyprice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_currency", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currency", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bin_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bin_ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bin_recd", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "bin_recd", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iwho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_order_", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "order_", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_sent, assu"& _ 
                "red, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref, bin_rec"& _ 
                "d, iwho, ldate, order_, supplier, UniqueID FROM dbo.invtrans"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.invtransDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.invtransDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.invtransDataTable = New TransvacDataV2DataSet1.invtransDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.invtransDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "invtrans")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_doc_ref As String,  _
                    ByVal Original_ddate As Date,  _
                    ByVal Original_rec_type As String,  _
                    ByVal Original_line_no As Decimal,  _
                    ByVal Original_partid As String,  _
                    ByVal Original_iicode As String,  _
                    ByVal Original_qty_ord As Decimal,  _
                    ByVal Original_qty_sent As Decimal,  _
                    ByVal Original_assured As String,  _
                    ByVal Original_desc_area As String,  _
                    ByVal Original_uprice As Decimal,  _
                    ByVal Original_pc_disc As Decimal,  _
                    ByVal Original_up_disc As Decimal,  _
                    ByVal Original_curcyprice As String,  _
                    ByVal Original_currency As String,  _
                    ByVal Original_bin_ref As String,  _
                    ByVal Original_bin_recd As Decimal,  _
                    ByVal Original_iwho As String,  _
                    ByVal Original_ldate As Date,  _
                    ByVal Original_order_ As String,  _
                    ByVal Original_supplier As String,  _
                    ByVal Original_UniqueID As Long) As Integer
            If (Original_doc_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_doc_ref")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_doc_ref,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ddate,Date)
            If (Original_rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_rec_type")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_rec_type,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_line_no,Decimal)
            If (Original_partid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_partid")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_partid,String)
            End If
            If (Original_iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iicode")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_iicode,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_qty_ord,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_qty_sent,Decimal)
            If (Original_assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_assured")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_assured,String)
            End If
            If (Original_desc_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_desc_area")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_desc_area,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_uprice,Decimal)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_pc_disc,Decimal)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_up_disc,Decimal)
            If (Original_curcyprice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_curcyprice")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_curcyprice,String)
            End If
            If (Original_currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_currency")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_currency,String)
            End If
            If (Original_bin_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bin_ref")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_bin_ref,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_bin_recd,Decimal)
            If (Original_iwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iwho")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_iwho,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_ldate,Date)
            If (Original_order_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_order_")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_order_,String)
            End If
            If (Original_supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_supplier")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_supplier,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal doc_ref As String,  _
                    ByVal ddate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal line_no As Decimal,  _
                    ByVal partid As String,  _
                    ByVal iicode As String,  _
                    ByVal qty_ord As Decimal,  _
                    ByVal qty_sent As Decimal,  _
                    ByVal assured As String,  _
                    ByVal desc_area As String,  _
                    ByVal uprice As Decimal,  _
                    ByVal pc_disc As Decimal,  _
                    ByVal up_disc As Decimal,  _
                    ByVal curcyprice As String,  _
                    ByVal currency As String,  _
                    ByVal bin_ref As String,  _
                    ByVal bin_recd As Decimal,  _
                    ByVal iwho As String,  _
                    ByVal ldate As Date,  _
                    ByVal order_ As String,  _
                    ByVal supplier As String) As Integer
            If (doc_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("doc_ref")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(doc_ref,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ddate,Date)
            If (rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("rec_type")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(rec_type,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(line_no,Decimal)
            If (partid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("partid")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(partid,String)
            End If
            If (iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iicode")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(iicode,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(qty_ord,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(qty_sent,Decimal)
            If (assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("assured")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(assured,String)
            End If
            If (desc_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("desc_area")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(desc_area,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(uprice,Decimal)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(pc_disc,Decimal)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(up_disc,Decimal)
            If (curcyprice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("curcyprice")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(curcyprice,String)
            End If
            If (currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("currency")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(currency,String)
            End If
            If (bin_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bin_ref")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(bin_ref,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(bin_recd,Decimal)
            If (iwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iwho")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(iwho,String)
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(ldate,Date)
            If (order_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("order_")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(order_,String)
            End If
            If (supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("supplier")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(supplier,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal doc_ref As String,  _
                    ByVal ddate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal line_no As Decimal,  _
                    ByVal partid As String,  _
                    ByVal iicode As String,  _
                    ByVal qty_ord As Decimal,  _
                    ByVal qty_sent As Decimal,  _
                    ByVal assured As String,  _
                    ByVal desc_area As String,  _
                    ByVal uprice As Decimal,  _
                    ByVal pc_disc As Decimal,  _
                    ByVal up_disc As Decimal,  _
                    ByVal curcyprice As String,  _
                    ByVal currency As String,  _
                    ByVal bin_ref As String,  _
                    ByVal bin_recd As Decimal,  _
                    ByVal iwho As String,  _
                    ByVal ldate As Date,  _
                    ByVal order_ As String,  _
                    ByVal supplier As String,  _
                    ByVal Original_doc_ref As String,  _
                    ByVal Original_ddate As Date,  _
                    ByVal Original_rec_type As String,  _
                    ByVal Original_line_no As Decimal,  _
                    ByVal Original_partid As String,  _
                    ByVal Original_iicode As String,  _
                    ByVal Original_qty_ord As Decimal,  _
                    ByVal Original_qty_sent As Decimal,  _
                    ByVal Original_assured As String,  _
                    ByVal Original_desc_area As String,  _
                    ByVal Original_uprice As Decimal,  _
                    ByVal Original_pc_disc As Decimal,  _
                    ByVal Original_up_disc As Decimal,  _
                    ByVal Original_curcyprice As String,  _
                    ByVal Original_currency As String,  _
                    ByVal Original_bin_ref As String,  _
                    ByVal Original_bin_recd As Decimal,  _
                    ByVal Original_iwho As String,  _
                    ByVal Original_ldate As Date,  _
                    ByVal Original_order_ As String,  _
                    ByVal Original_supplier As String,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (doc_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("doc_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(doc_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ddate,Date)
            If (rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("rec_type")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(rec_type,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(line_no,Decimal)
            If (partid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("partid")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(partid,String)
            End If
            If (iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iicode")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(iicode,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(qty_ord,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(qty_sent,Decimal)
            If (assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("assured")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(assured,String)
            End If
            If (desc_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("desc_area")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(desc_area,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(uprice,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(pc_disc,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(up_disc,Decimal)
            If (curcyprice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("curcyprice")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(curcyprice,String)
            End If
            If (currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("currency")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(currency,String)
            End If
            If (bin_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bin_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(bin_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(bin_recd,Decimal)
            If (iwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(iwho,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(ldate,Date)
            If (order_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("order_")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(order_,String)
            End If
            If (supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("supplier")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(supplier,String)
            End If
            If (Original_doc_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_doc_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_doc_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_ddate,Date)
            If (Original_rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_rec_type")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_rec_type,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_line_no,Decimal)
            If (Original_partid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_partid")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_partid,String)
            End If
            If (Original_iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iicode")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_iicode,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_qty_ord,Decimal)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_qty_sent,Decimal)
            If (Original_assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_assured")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_assured,String)
            End If
            If (Original_desc_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_desc_area")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_desc_area,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_uprice,Decimal)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_pc_disc,Decimal)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_up_disc,Decimal)
            If (Original_curcyprice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_curcyprice")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_curcyprice,String)
            End If
            If (Original_currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_currency")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_currency,String)
            End If
            If (Original_bin_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bin_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_bin_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_bin_recd,Decimal)
            If (Original_iwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_iwho,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_ldate,Date)
            If (Original_order_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_order_")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_order_,String)
            End If
            If (Original_supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_supplier")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_supplier,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal doc_ref As String,  _
                    ByVal ddate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal line_no As Decimal,  _
                    ByVal partid As String,  _
                    ByVal iicode As String,  _
                    ByVal qty_ord As Decimal,  _
                    ByVal qty_sent As Decimal,  _
                    ByVal assured As String,  _
                    ByVal desc_area As String,  _
                    ByVal uprice As Decimal,  _
                    ByVal pc_disc As Decimal,  _
                    ByVal up_disc As Decimal,  _
                    ByVal curcyprice As String,  _
                    ByVal currency As String,  _
                    ByVal bin_ref As String,  _
                    ByVal bin_recd As Decimal,  _
                    ByVal iwho As String,  _
                    ByVal ldate As Date,  _
                    ByVal order_ As String,  _
                    ByVal supplier As String,  _
                    ByVal Original_doc_ref As String,  _
                    ByVal Original_ddate As Date,  _
                    ByVal Original_rec_type As String,  _
                    ByVal Original_line_no As Decimal,  _
                    ByVal Original_partid As String,  _
                    ByVal Original_iicode As String,  _
                    ByVal Original_qty_ord As Decimal,  _
                    ByVal Original_qty_sent As Decimal,  _
                    ByVal Original_assured As String,  _
                    ByVal Original_desc_area As String,  _
                    ByVal Original_uprice As Decimal,  _
                    ByVal Original_pc_disc As Decimal,  _
                    ByVal Original_up_disc As Decimal,  _
                    ByVal Original_curcyprice As String,  _
                    ByVal Original_currency As String,  _
                    ByVal Original_bin_ref As String,  _
                    ByVal Original_bin_recd As Decimal,  _
                    ByVal Original_iwho As String,  _
                    ByVal Original_ldate As Date,  _
                    ByVal Original_order_ As String,  _
                    ByVal Original_supplier As String,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_sent, assured, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref, bin_recd, iwho, ldate, order_, supplier, Original_doc_ref, Original_ddate, Original_rec_type, Original_line_no, Original_partid, Original_iicode, Original_qty_ord, Original_qty_sent, Original_assured, Original_desc_area, Original_uprice, Original_pc_disc, Original_up_disc, Original_curcyprice, Original_currency, Original_bin_ref, Original_bin_recd, Original_iwho, Original_ldate, Original_order_, Original_supplier, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class invtransoldTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "invtransold"
            tableMapping.ColumnMappings.Add("doc_ref", "doc_ref")
            tableMapping.ColumnMappings.Add("ddate", "ddate")
            tableMapping.ColumnMappings.Add("rec_type", "rec_type")
            tableMapping.ColumnMappings.Add("line_no", "line_no")
            tableMapping.ColumnMappings.Add("partid", "partid")
            tableMapping.ColumnMappings.Add("iicode", "iicode")
            tableMapping.ColumnMappings.Add("qty_ord", "qty_ord")
            tableMapping.ColumnMappings.Add("qty_sent", "qty_sent")
            tableMapping.ColumnMappings.Add("assured", "assured")
            tableMapping.ColumnMappings.Add("desc_area", "desc_area")
            tableMapping.ColumnMappings.Add("uprice", "uprice")
            tableMapping.ColumnMappings.Add("pc_disc", "pc_disc")
            tableMapping.ColumnMappings.Add("up_disc", "up_disc")
            tableMapping.ColumnMappings.Add("curcyprice", "curcyprice")
            tableMapping.ColumnMappings.Add("currency", "currency")
            tableMapping.ColumnMappings.Add("bin_ref", "bin_ref")
            tableMapping.ColumnMappings.Add("bin_recd", "bin_recd")
            tableMapping.ColumnMappings.Add("iwho", "iwho")
            tableMapping.ColumnMappings.Add("ldate", "ldate")
            tableMapping.ColumnMappings.Add("order_", "order_")
            tableMapping.ColumnMappings.Add("supplier", "supplier")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[invtransold] WHERE (([doc_ref] = @Original_doc_ref) AND ([ddat"& _ 
                "e] = @Original_ddate) AND ([rec_type] = @Original_rec_type) AND ([line_no] = @Or"& _ 
                "iginal_line_no) AND ([partid] = @Original_partid) AND ([iicode] = @Original_iico"& _ 
                "de) AND ([qty_ord] = @Original_qty_ord) AND ([qty_sent] = @Original_qty_sent) AN"& _ 
                "D ([assured] = @Original_assured) AND ([desc_area] = @Original_desc_area) AND (["& _ 
                "uprice] = @Original_uprice) AND ([pc_disc] = @Original_pc_disc) AND ([up_disc] ="& _ 
                " @Original_up_disc) AND ([curcyprice] = @Original_curcyprice) AND ([currency] = "& _ 
                "@Original_currency) AND ([bin_ref] = @Original_bin_ref) AND ([bin_recd] = @Origi"& _ 
                "nal_bin_recd) AND ([iwho] = @Original_iwho) AND ([ldate] = @Original_ldate) AND "& _ 
                "([order_] = @Original_order_) AND ([supplier] = @Original_supplier) AND ([Unique"& _ 
                "ID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_doc_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "doc_ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_line_no", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "line_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_partid", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qty_ord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_ord", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qty_sent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_sent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_desc_area", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_area", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_uprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "uprice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pc_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "pc_disc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_up_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "up_disc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_curcyprice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "curcyprice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_currency", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currency", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bin_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bin_ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bin_recd", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "bin_recd", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iwho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_order_", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "order_", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[invtransold] ([doc_ref], [ddate], [rec_type], [line_no], [part"& _ 
                "id], [iicode], [qty_ord], [qty_sent], [assured], [desc_area], [uprice], [pc_disc"& _ 
                "], [up_disc], [curcyprice], [currency], [bin_ref], [bin_recd], [iwho], [ldate], "& _ 
                "[order_], [supplier]) VALUES (@doc_ref, @ddate, @rec_type, @line_no, @partid, @i"& _ 
                "icode, @qty_ord, @qty_sent, @assured, @desc_area, @uprice, @pc_disc, @up_disc, @"& _ 
                "curcyprice, @currency, @bin_ref, @bin_recd, @iwho, @ldate, @order_, @supplier);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_sent, as"& _ 
                "sured, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref, bin_r"& _ 
                "ecd, iwho, ldate, order_, supplier, UniqueID FROM invtransold WHERE (UniqueID = "& _ 
                "SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@doc_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "doc_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@line_no", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "line_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@partid", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty_ord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_ord", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty_sent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_sent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@desc_area", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_area", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@uprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "uprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pc_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "pc_disc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@up_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "up_disc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@curcyprice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "curcyprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@currency", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bin_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bin_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bin_recd", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "bin_recd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@order_", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "order_", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[invtransold] SET [doc_ref] = @doc_ref, [ddate] = @ddate, [rec_type]"& _ 
                " = @rec_type, [line_no] = @line_no, [partid] = @partid, [iicode] = @iicode, [qty"& _ 
                "_ord] = @qty_ord, [qty_sent] = @qty_sent, [assured] = @assured, [desc_area] = @d"& _ 
                "esc_area, [uprice] = @uprice, [pc_disc] = @pc_disc, [up_disc] = @up_disc, [curcy"& _ 
                "price] = @curcyprice, [currency] = @currency, [bin_ref] = @bin_ref, [bin_recd] ="& _ 
                " @bin_recd, [iwho] = @iwho, [ldate] = @ldate, [order_] = @order_, [supplier] = @"& _ 
                "supplier WHERE (([doc_ref] = @Original_doc_ref) AND ([ddate] = @Original_ddate) "& _ 
                "AND ([rec_type] = @Original_rec_type) AND ([line_no] = @Original_line_no) AND (["& _ 
                "partid] = @Original_partid) AND ([iicode] = @Original_iicode) AND ([qty_ord] = @"& _ 
                "Original_qty_ord) AND ([qty_sent] = @Original_qty_sent) AND ([assured] = @Origin"& _ 
                "al_assured) AND ([desc_area] = @Original_desc_area) AND ([uprice] = @Original_up"& _ 
                "rice) AND ([pc_disc] = @Original_pc_disc) AND ([up_disc] = @Original_up_disc) AN"& _ 
                "D ([curcyprice] = @Original_curcyprice) AND ([currency] = @Original_currency) AN"& _ 
                "D ([bin_ref] = @Original_bin_ref) AND ([bin_recd] = @Original_bin_recd) AND ([iw"& _ 
                "ho] = @Original_iwho) AND ([ldate] = @Original_ldate) AND ([order_] = @Original_"& _ 
                "order_) AND ([supplier] = @Original_supplier) AND ([UniqueID] = @Original_Unique"& _ 
                "ID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_se"& _ 
                "nt, assured, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref,"& _ 
                " bin_recd, iwho, ldate, order_, supplier, UniqueID FROM invtransold WHERE (Uniqu"& _ 
                "eID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@doc_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "doc_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@line_no", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "line_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@partid", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty_ord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_ord", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty_sent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_sent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@desc_area", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_area", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@uprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "uprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pc_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "pc_disc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@up_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "up_disc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@curcyprice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "curcyprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@currency", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bin_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bin_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bin_recd", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "bin_recd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@order_", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "order_", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_doc_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "doc_ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_line_no", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "line_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_partid", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qty_ord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_ord", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qty_sent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_sent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_desc_area", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_area", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_uprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "uprice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pc_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "pc_disc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_up_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "up_disc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_curcyprice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "curcyprice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_currency", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currency", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bin_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bin_ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bin_recd", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "bin_recd", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iwho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_order_", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "order_", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_sent, assu"& _ 
                "red, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref, bin_rec"& _ 
                "d, iwho, ldate, order_, supplier, UniqueID FROM dbo.invtransold"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.invtransoldDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.invtransoldDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.invtransoldDataTable = New TransvacDataV2DataSet1.invtransoldDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.invtransoldDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "invtransold")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_doc_ref As String,  _
                    ByVal Original_ddate As Date,  _
                    ByVal Original_rec_type As String,  _
                    ByVal Original_line_no As Decimal,  _
                    ByVal Original_partid As String,  _
                    ByVal Original_iicode As String,  _
                    ByVal Original_qty_ord As Decimal,  _
                    ByVal Original_qty_sent As Decimal,  _
                    ByVal Original_assured As String,  _
                    ByVal Original_desc_area As String,  _
                    ByVal Original_uprice As Decimal,  _
                    ByVal Original_pc_disc As Decimal,  _
                    ByVal Original_up_disc As Decimal,  _
                    ByVal Original_curcyprice As String,  _
                    ByVal Original_currency As String,  _
                    ByVal Original_bin_ref As String,  _
                    ByVal Original_bin_recd As Decimal,  _
                    ByVal Original_iwho As String,  _
                    ByVal Original_ldate As Date,  _
                    ByVal Original_order_ As String,  _
                    ByVal Original_supplier As String,  _
                    ByVal Original_UniqueID As Long) As Integer
            If (Original_doc_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_doc_ref")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_doc_ref,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ddate,Date)
            If (Original_rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_rec_type")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_rec_type,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_line_no,Decimal)
            If (Original_partid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_partid")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_partid,String)
            End If
            If (Original_iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iicode")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_iicode,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_qty_ord,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_qty_sent,Decimal)
            If (Original_assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_assured")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_assured,String)
            End If
            If (Original_desc_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_desc_area")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_desc_area,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_uprice,Decimal)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_pc_disc,Decimal)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_up_disc,Decimal)
            If (Original_curcyprice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_curcyprice")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_curcyprice,String)
            End If
            If (Original_currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_currency")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_currency,String)
            End If
            If (Original_bin_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bin_ref")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_bin_ref,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_bin_recd,Decimal)
            If (Original_iwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iwho")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_iwho,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_ldate,Date)
            If (Original_order_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_order_")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_order_,String)
            End If
            If (Original_supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_supplier")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_supplier,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal doc_ref As String,  _
                    ByVal ddate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal line_no As Decimal,  _
                    ByVal partid As String,  _
                    ByVal iicode As String,  _
                    ByVal qty_ord As Decimal,  _
                    ByVal qty_sent As Decimal,  _
                    ByVal assured As String,  _
                    ByVal desc_area As String,  _
                    ByVal uprice As Decimal,  _
                    ByVal pc_disc As Decimal,  _
                    ByVal up_disc As Decimal,  _
                    ByVal curcyprice As String,  _
                    ByVal currency As String,  _
                    ByVal bin_ref As String,  _
                    ByVal bin_recd As Decimal,  _
                    ByVal iwho As String,  _
                    ByVal ldate As Date,  _
                    ByVal order_ As String,  _
                    ByVal supplier As String) As Integer
            If (doc_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("doc_ref")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(doc_ref,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ddate,Date)
            If (rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("rec_type")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(rec_type,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(line_no,Decimal)
            If (partid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("partid")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(partid,String)
            End If
            If (iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iicode")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(iicode,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(qty_ord,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(qty_sent,Decimal)
            If (assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("assured")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(assured,String)
            End If
            If (desc_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("desc_area")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(desc_area,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(uprice,Decimal)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(pc_disc,Decimal)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(up_disc,Decimal)
            If (curcyprice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("curcyprice")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(curcyprice,String)
            End If
            If (currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("currency")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(currency,String)
            End If
            If (bin_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bin_ref")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(bin_ref,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(bin_recd,Decimal)
            If (iwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iwho")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(iwho,String)
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(ldate,Date)
            If (order_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("order_")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(order_,String)
            End If
            If (supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("supplier")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(supplier,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal doc_ref As String,  _
                    ByVal ddate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal line_no As Decimal,  _
                    ByVal partid As String,  _
                    ByVal iicode As String,  _
                    ByVal qty_ord As Decimal,  _
                    ByVal qty_sent As Decimal,  _
                    ByVal assured As String,  _
                    ByVal desc_area As String,  _
                    ByVal uprice As Decimal,  _
                    ByVal pc_disc As Decimal,  _
                    ByVal up_disc As Decimal,  _
                    ByVal curcyprice As String,  _
                    ByVal currency As String,  _
                    ByVal bin_ref As String,  _
                    ByVal bin_recd As Decimal,  _
                    ByVal iwho As String,  _
                    ByVal ldate As Date,  _
                    ByVal order_ As String,  _
                    ByVal supplier As String,  _
                    ByVal Original_doc_ref As String,  _
                    ByVal Original_ddate As Date,  _
                    ByVal Original_rec_type As String,  _
                    ByVal Original_line_no As Decimal,  _
                    ByVal Original_partid As String,  _
                    ByVal Original_iicode As String,  _
                    ByVal Original_qty_ord As Decimal,  _
                    ByVal Original_qty_sent As Decimal,  _
                    ByVal Original_assured As String,  _
                    ByVal Original_desc_area As String,  _
                    ByVal Original_uprice As Decimal,  _
                    ByVal Original_pc_disc As Decimal,  _
                    ByVal Original_up_disc As Decimal,  _
                    ByVal Original_curcyprice As String,  _
                    ByVal Original_currency As String,  _
                    ByVal Original_bin_ref As String,  _
                    ByVal Original_bin_recd As Decimal,  _
                    ByVal Original_iwho As String,  _
                    ByVal Original_ldate As Date,  _
                    ByVal Original_order_ As String,  _
                    ByVal Original_supplier As String,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (doc_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("doc_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(doc_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ddate,Date)
            If (rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("rec_type")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(rec_type,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(line_no,Decimal)
            If (partid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("partid")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(partid,String)
            End If
            If (iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iicode")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(iicode,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(qty_ord,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(qty_sent,Decimal)
            If (assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("assured")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(assured,String)
            End If
            If (desc_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("desc_area")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(desc_area,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(uprice,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(pc_disc,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(up_disc,Decimal)
            If (curcyprice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("curcyprice")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(curcyprice,String)
            End If
            If (currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("currency")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(currency,String)
            End If
            If (bin_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bin_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(bin_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(bin_recd,Decimal)
            If (iwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(iwho,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(ldate,Date)
            If (order_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("order_")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(order_,String)
            End If
            If (supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("supplier")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(supplier,String)
            End If
            If (Original_doc_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_doc_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_doc_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_ddate,Date)
            If (Original_rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_rec_type")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_rec_type,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_line_no,Decimal)
            If (Original_partid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_partid")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_partid,String)
            End If
            If (Original_iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iicode")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_iicode,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_qty_ord,Decimal)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_qty_sent,Decimal)
            If (Original_assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_assured")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_assured,String)
            End If
            If (Original_desc_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_desc_area")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_desc_area,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_uprice,Decimal)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_pc_disc,Decimal)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_up_disc,Decimal)
            If (Original_curcyprice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_curcyprice")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_curcyprice,String)
            End If
            If (Original_currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_currency")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_currency,String)
            End If
            If (Original_bin_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bin_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_bin_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_bin_recd,Decimal)
            If (Original_iwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_iwho,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_ldate,Date)
            If (Original_order_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_order_")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_order_,String)
            End If
            If (Original_supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_supplier")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_supplier,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal doc_ref As String,  _
                    ByVal ddate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal line_no As Decimal,  _
                    ByVal partid As String,  _
                    ByVal iicode As String,  _
                    ByVal qty_ord As Decimal,  _
                    ByVal qty_sent As Decimal,  _
                    ByVal assured As String,  _
                    ByVal desc_area As String,  _
                    ByVal uprice As Decimal,  _
                    ByVal pc_disc As Decimal,  _
                    ByVal up_disc As Decimal,  _
                    ByVal curcyprice As String,  _
                    ByVal currency As String,  _
                    ByVal bin_ref As String,  _
                    ByVal bin_recd As Decimal,  _
                    ByVal iwho As String,  _
                    ByVal ldate As Date,  _
                    ByVal order_ As String,  _
                    ByVal supplier As String,  _
                    ByVal Original_doc_ref As String,  _
                    ByVal Original_ddate As Date,  _
                    ByVal Original_rec_type As String,  _
                    ByVal Original_line_no As Decimal,  _
                    ByVal Original_partid As String,  _
                    ByVal Original_iicode As String,  _
                    ByVal Original_qty_ord As Decimal,  _
                    ByVal Original_qty_sent As Decimal,  _
                    ByVal Original_assured As String,  _
                    ByVal Original_desc_area As String,  _
                    ByVal Original_uprice As Decimal,  _
                    ByVal Original_pc_disc As Decimal,  _
                    ByVal Original_up_disc As Decimal,  _
                    ByVal Original_curcyprice As String,  _
                    ByVal Original_currency As String,  _
                    ByVal Original_bin_ref As String,  _
                    ByVal Original_bin_recd As Decimal,  _
                    ByVal Original_iwho As String,  _
                    ByVal Original_ldate As Date,  _
                    ByVal Original_order_ As String,  _
                    ByVal Original_supplier As String,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_sent, assured, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref, bin_recd, iwho, ldate, order_, supplier, Original_doc_ref, Original_ddate, Original_rec_type, Original_line_no, Original_partid, Original_iicode, Original_qty_ord, Original_qty_sent, Original_assured, Original_desc_area, Original_uprice, Original_pc_disc, Original_up_disc, Original_curcyprice, Original_currency, Original_bin_ref, Original_bin_recd, Original_iwho, Original_ldate, Original_order_, Original_supplier, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class invtransold6TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "invtransold6"
            tableMapping.ColumnMappings.Add("doc_ref", "doc_ref")
            tableMapping.ColumnMappings.Add("ddate", "ddate")
            tableMapping.ColumnMappings.Add("rec_type", "rec_type")
            tableMapping.ColumnMappings.Add("line_no", "line_no")
            tableMapping.ColumnMappings.Add("partid", "partid")
            tableMapping.ColumnMappings.Add("iicode", "iicode")
            tableMapping.ColumnMappings.Add("qty_ord", "qty_ord")
            tableMapping.ColumnMappings.Add("qty_sent", "qty_sent")
            tableMapping.ColumnMappings.Add("assured", "assured")
            tableMapping.ColumnMappings.Add("desc_area", "desc_area")
            tableMapping.ColumnMappings.Add("uprice", "uprice")
            tableMapping.ColumnMappings.Add("pc_disc", "pc_disc")
            tableMapping.ColumnMappings.Add("up_disc", "up_disc")
            tableMapping.ColumnMappings.Add("curcyprice", "curcyprice")
            tableMapping.ColumnMappings.Add("currency", "currency")
            tableMapping.ColumnMappings.Add("bin_ref", "bin_ref")
            tableMapping.ColumnMappings.Add("bin_recd", "bin_recd")
            tableMapping.ColumnMappings.Add("iwho", "iwho")
            tableMapping.ColumnMappings.Add("ldate", "ldate")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[invtransold6] WHERE (([doc_ref] = @Original_doc_ref) AND ([dda"& _ 
                "te] = @Original_ddate) AND ([rec_type] = @Original_rec_type) AND ([line_no] = @O"& _ 
                "riginal_line_no) AND ([partid] = @Original_partid) AND ([iicode] = @Original_iic"& _ 
                "ode) AND ([qty_ord] = @Original_qty_ord) AND ([qty_sent] = @Original_qty_sent) A"& _ 
                "ND ([assured] = @Original_assured) AND ([desc_area] = @Original_desc_area) AND ("& _ 
                "[uprice] = @Original_uprice) AND ([pc_disc] = @Original_pc_disc) AND ([up_disc] "& _ 
                "= @Original_up_disc) AND ([curcyprice] = @Original_curcyprice) AND ([currency] ="& _ 
                " @Original_currency) AND ([bin_ref] = @Original_bin_ref) AND ([bin_recd] = @Orig"& _ 
                "inal_bin_recd) AND ([iwho] = @Original_iwho) AND ([ldate] = @Original_ldate) AND"& _ 
                " ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_doc_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "doc_ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_line_no", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "line_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_partid", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qty_ord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_ord", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qty_sent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_sent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_desc_area", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_area", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_uprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "uprice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pc_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "pc_disc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_up_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "up_disc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_curcyprice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "curcyprice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_currency", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currency", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bin_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bin_ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bin_recd", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "bin_recd", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iwho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[invtransold6] ([doc_ref], [ddate], [rec_type], [line_no], [par"& _ 
                "tid], [iicode], [qty_ord], [qty_sent], [assured], [desc_area], [uprice], [pc_dis"& _ 
                "c], [up_disc], [curcyprice], [currency], [bin_ref], [bin_recd], [iwho], [ldate])"& _ 
                " VALUES (@doc_ref, @ddate, @rec_type, @line_no, @partid, @iicode, @qty_ord, @qty"& _ 
                "_sent, @assured, @desc_area, @uprice, @pc_disc, @up_disc, @curcyprice, @currency"& _ 
                ", @bin_ref, @bin_recd, @iwho, @ldate);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT doc_ref, ddate, rec_type, line_no"& _ 
                ", partid, iicode, qty_ord, qty_sent, assured, desc_area, uprice, pc_disc, up_dis"& _ 
                "c, curcyprice, currency, bin_ref, bin_recd, iwho, ldate, UniqueID FROM invtranso"& _ 
                "ld6 WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@doc_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "doc_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@line_no", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "line_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@partid", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty_ord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_ord", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty_sent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_sent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@desc_area", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_area", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@uprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "uprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pc_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "pc_disc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@up_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "up_disc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@curcyprice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "curcyprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@currency", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bin_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bin_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bin_recd", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "bin_recd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[invtransold6] SET [doc_ref] = @doc_ref, [ddate] = @ddate, [rec_type"& _ 
                "] = @rec_type, [line_no] = @line_no, [partid] = @partid, [iicode] = @iicode, [qt"& _ 
                "y_ord] = @qty_ord, [qty_sent] = @qty_sent, [assured] = @assured, [desc_area] = @"& _ 
                "desc_area, [uprice] = @uprice, [pc_disc] = @pc_disc, [up_disc] = @up_disc, [curc"& _ 
                "yprice] = @curcyprice, [currency] = @currency, [bin_ref] = @bin_ref, [bin_recd] "& _ 
                "= @bin_recd, [iwho] = @iwho, [ldate] = @ldate WHERE (([doc_ref] = @Original_doc_"& _ 
                "ref) AND ([ddate] = @Original_ddate) AND ([rec_type] = @Original_rec_type) AND ("& _ 
                "[line_no] = @Original_line_no) AND ([partid] = @Original_partid) AND ([iicode] ="& _ 
                " @Original_iicode) AND ([qty_ord] = @Original_qty_ord) AND ([qty_sent] = @Origin"& _ 
                "al_qty_sent) AND ([assured] = @Original_assured) AND ([desc_area] = @Original_de"& _ 
                "sc_area) AND ([uprice] = @Original_uprice) AND ([pc_disc] = @Original_pc_disc) A"& _ 
                "ND ([up_disc] = @Original_up_disc) AND ([curcyprice] = @Original_curcyprice) AND"& _ 
                " ([currency] = @Original_currency) AND ([bin_ref] = @Original_bin_ref) AND ([bin"& _ 
                "_recd] = @Original_bin_recd) AND ([iwho] = @Original_iwho) AND ([ldate] = @Origi"& _ 
                "nal_ldate) AND ([UniqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT doc_ref, ddate, rec_t"& _ 
                "ype, line_no, partid, iicode, qty_ord, qty_sent, assured, desc_area, uprice, pc_"& _ 
                "disc, up_disc, curcyprice, currency, bin_ref, bin_recd, iwho, ldate, UniqueID FR"& _ 
                "OM invtransold6 WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@doc_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "doc_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@line_no", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "line_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@partid", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty_ord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_ord", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty_sent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_sent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@desc_area", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_area", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@uprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "uprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pc_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "pc_disc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@up_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "up_disc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@curcyprice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "curcyprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@currency", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bin_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bin_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bin_recd", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "bin_recd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_doc_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "doc_ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_line_no", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "line_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_partid", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qty_ord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_ord", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qty_sent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_sent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_desc_area", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_area", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_uprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "uprice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pc_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "pc_disc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_up_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "up_disc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_curcyprice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "curcyprice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_currency", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currency", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bin_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bin_ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bin_recd", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "bin_recd", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iwho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_sent, assu"& _ 
                "red, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref, bin_rec"& _ 
                "d, iwho, ldate, UniqueID FROM dbo.invtransold6"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.invtransold6DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.invtransold6DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.invtransold6DataTable = New TransvacDataV2DataSet1.invtransold6DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.invtransold6DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "invtransold6")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_doc_ref As String,  _
                    ByVal Original_ddate As Date,  _
                    ByVal Original_rec_type As String,  _
                    ByVal Original_line_no As Decimal,  _
                    ByVal Original_partid As String,  _
                    ByVal Original_iicode As String,  _
                    ByVal Original_qty_ord As Decimal,  _
                    ByVal Original_qty_sent As Decimal,  _
                    ByVal Original_assured As String,  _
                    ByVal Original_desc_area As String,  _
                    ByVal Original_uprice As Decimal,  _
                    ByVal Original_pc_disc As Decimal,  _
                    ByVal Original_up_disc As Decimal,  _
                    ByVal Original_curcyprice As String,  _
                    ByVal Original_currency As String,  _
                    ByVal Original_bin_ref As String,  _
                    ByVal Original_bin_recd As Decimal,  _
                    ByVal Original_iwho As String,  _
                    ByVal Original_ldate As Date,  _
                    ByVal Original_UniqueID As Long) As Integer
            If (Original_doc_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_doc_ref")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_doc_ref,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ddate,Date)
            If (Original_rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_rec_type")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_rec_type,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_line_no,Decimal)
            If (Original_partid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_partid")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_partid,String)
            End If
            If (Original_iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iicode")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_iicode,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_qty_ord,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_qty_sent,Decimal)
            If (Original_assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_assured")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_assured,String)
            End If
            If (Original_desc_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_desc_area")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_desc_area,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_uprice,Decimal)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_pc_disc,Decimal)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_up_disc,Decimal)
            If (Original_curcyprice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_curcyprice")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_curcyprice,String)
            End If
            If (Original_currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_currency")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_currency,String)
            End If
            If (Original_bin_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bin_ref")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_bin_ref,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_bin_recd,Decimal)
            If (Original_iwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iwho")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_iwho,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_ldate,Date)
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal doc_ref As String,  _
                    ByVal ddate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal line_no As Decimal,  _
                    ByVal partid As String,  _
                    ByVal iicode As String,  _
                    ByVal qty_ord As Decimal,  _
                    ByVal qty_sent As Decimal,  _
                    ByVal assured As String,  _
                    ByVal desc_area As String,  _
                    ByVal uprice As Decimal,  _
                    ByVal pc_disc As Decimal,  _
                    ByVal up_disc As Decimal,  _
                    ByVal curcyprice As String,  _
                    ByVal currency As String,  _
                    ByVal bin_ref As String,  _
                    ByVal bin_recd As Decimal,  _
                    ByVal iwho As String,  _
                    ByVal ldate As Date) As Integer
            If (doc_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("doc_ref")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(doc_ref,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ddate,Date)
            If (rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("rec_type")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(rec_type,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(line_no,Decimal)
            If (partid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("partid")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(partid,String)
            End If
            If (iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iicode")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(iicode,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(qty_ord,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(qty_sent,Decimal)
            If (assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("assured")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(assured,String)
            End If
            If (desc_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("desc_area")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(desc_area,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(uprice,Decimal)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(pc_disc,Decimal)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(up_disc,Decimal)
            If (curcyprice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("curcyprice")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(curcyprice,String)
            End If
            If (currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("currency")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(currency,String)
            End If
            If (bin_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bin_ref")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(bin_ref,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(bin_recd,Decimal)
            If (iwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iwho")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(iwho,String)
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(ldate,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal doc_ref As String,  _
                    ByVal ddate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal line_no As Decimal,  _
                    ByVal partid As String,  _
                    ByVal iicode As String,  _
                    ByVal qty_ord As Decimal,  _
                    ByVal qty_sent As Decimal,  _
                    ByVal assured As String,  _
                    ByVal desc_area As String,  _
                    ByVal uprice As Decimal,  _
                    ByVal pc_disc As Decimal,  _
                    ByVal up_disc As Decimal,  _
                    ByVal curcyprice As String,  _
                    ByVal currency As String,  _
                    ByVal bin_ref As String,  _
                    ByVal bin_recd As Decimal,  _
                    ByVal iwho As String,  _
                    ByVal ldate As Date,  _
                    ByVal Original_doc_ref As String,  _
                    ByVal Original_ddate As Date,  _
                    ByVal Original_rec_type As String,  _
                    ByVal Original_line_no As Decimal,  _
                    ByVal Original_partid As String,  _
                    ByVal Original_iicode As String,  _
                    ByVal Original_qty_ord As Decimal,  _
                    ByVal Original_qty_sent As Decimal,  _
                    ByVal Original_assured As String,  _
                    ByVal Original_desc_area As String,  _
                    ByVal Original_uprice As Decimal,  _
                    ByVal Original_pc_disc As Decimal,  _
                    ByVal Original_up_disc As Decimal,  _
                    ByVal Original_curcyprice As String,  _
                    ByVal Original_currency As String,  _
                    ByVal Original_bin_ref As String,  _
                    ByVal Original_bin_recd As Decimal,  _
                    ByVal Original_iwho As String,  _
                    ByVal Original_ldate As Date,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (doc_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("doc_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(doc_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ddate,Date)
            If (rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("rec_type")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(rec_type,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(line_no,Decimal)
            If (partid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("partid")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(partid,String)
            End If
            If (iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iicode")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(iicode,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(qty_ord,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(qty_sent,Decimal)
            If (assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("assured")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(assured,String)
            End If
            If (desc_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("desc_area")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(desc_area,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(uprice,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(pc_disc,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(up_disc,Decimal)
            If (curcyprice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("curcyprice")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(curcyprice,String)
            End If
            If (currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("currency")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(currency,String)
            End If
            If (bin_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bin_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(bin_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(bin_recd,Decimal)
            If (iwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(iwho,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(ldate,Date)
            If (Original_doc_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_doc_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_doc_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_ddate,Date)
            If (Original_rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_rec_type")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_rec_type,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_line_no,Decimal)
            If (Original_partid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_partid")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_partid,String)
            End If
            If (Original_iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iicode")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_iicode,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_qty_ord,Decimal)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_qty_sent,Decimal)
            If (Original_assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_assured")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_assured,String)
            End If
            If (Original_desc_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_desc_area")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_desc_area,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_uprice,Decimal)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_pc_disc,Decimal)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_up_disc,Decimal)
            If (Original_curcyprice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_curcyprice")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_curcyprice,String)
            End If
            If (Original_currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_currency")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_currency,String)
            End If
            If (Original_bin_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bin_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_bin_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_bin_recd,Decimal)
            If (Original_iwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_iwho,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_ldate,Date)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal doc_ref As String,  _
                    ByVal ddate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal line_no As Decimal,  _
                    ByVal partid As String,  _
                    ByVal iicode As String,  _
                    ByVal qty_ord As Decimal,  _
                    ByVal qty_sent As Decimal,  _
                    ByVal assured As String,  _
                    ByVal desc_area As String,  _
                    ByVal uprice As Decimal,  _
                    ByVal pc_disc As Decimal,  _
                    ByVal up_disc As Decimal,  _
                    ByVal curcyprice As String,  _
                    ByVal currency As String,  _
                    ByVal bin_ref As String,  _
                    ByVal bin_recd As Decimal,  _
                    ByVal iwho As String,  _
                    ByVal ldate As Date,  _
                    ByVal Original_doc_ref As String,  _
                    ByVal Original_ddate As Date,  _
                    ByVal Original_rec_type As String,  _
                    ByVal Original_line_no As Decimal,  _
                    ByVal Original_partid As String,  _
                    ByVal Original_iicode As String,  _
                    ByVal Original_qty_ord As Decimal,  _
                    ByVal Original_qty_sent As Decimal,  _
                    ByVal Original_assured As String,  _
                    ByVal Original_desc_area As String,  _
                    ByVal Original_uprice As Decimal,  _
                    ByVal Original_pc_disc As Decimal,  _
                    ByVal Original_up_disc As Decimal,  _
                    ByVal Original_curcyprice As String,  _
                    ByVal Original_currency As String,  _
                    ByVal Original_bin_ref As String,  _
                    ByVal Original_bin_recd As Decimal,  _
                    ByVal Original_iwho As String,  _
                    ByVal Original_ldate As Date,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_sent, assured, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref, bin_recd, iwho, ldate, Original_doc_ref, Original_ddate, Original_rec_type, Original_line_no, Original_partid, Original_iicode, Original_qty_ord, Original_qty_sent, Original_assured, Original_desc_area, Original_uprice, Original_pc_disc, Original_up_disc, Original_curcyprice, Original_currency, Original_bin_ref, Original_bin_recd, Original_iwho, Original_ldate, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class invworkTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "invwork"
            tableMapping.ColumnMappings.Add("doc_ref", "doc_ref")
            tableMapping.ColumnMappings.Add("ddate", "ddate")
            tableMapping.ColumnMappings.Add("rec_type", "rec_type")
            tableMapping.ColumnMappings.Add("line_no", "line_no")
            tableMapping.ColumnMappings.Add("partid", "partid")
            tableMapping.ColumnMappings.Add("iicode", "iicode")
            tableMapping.ColumnMappings.Add("qty_ord", "qty_ord")
            tableMapping.ColumnMappings.Add("qty_sent", "qty_sent")
            tableMapping.ColumnMappings.Add("assured", "assured")
            tableMapping.ColumnMappings.Add("desc_area", "desc_area")
            tableMapping.ColumnMappings.Add("uprice", "uprice")
            tableMapping.ColumnMappings.Add("pc_disc", "pc_disc")
            tableMapping.ColumnMappings.Add("up_disc", "up_disc")
            tableMapping.ColumnMappings.Add("curcyprice", "curcyprice")
            tableMapping.ColumnMappings.Add("currency", "currency")
            tableMapping.ColumnMappings.Add("bin_ref", "bin_ref")
            tableMapping.ColumnMappings.Add("bin_recd", "bin_recd")
            tableMapping.ColumnMappings.Add("iwho", "iwho")
            tableMapping.ColumnMappings.Add("ldate", "ldate")
            tableMapping.ColumnMappings.Add("order_", "order_")
            tableMapping.ColumnMappings.Add("supplier", "supplier")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[invwork] WHERE (([doc_ref] = @Original_doc_ref) AND ([ddate] ="& _ 
                " @Original_ddate) AND ([rec_type] = @Original_rec_type) AND ([line_no] = @Origin"& _ 
                "al_line_no) AND ([partid] = @Original_partid) AND ([iicode] = @Original_iicode) "& _ 
                "AND ([qty_ord] = @Original_qty_ord) AND ([qty_sent] = @Original_qty_sent) AND (["& _ 
                "assured] = @Original_assured) AND ([desc_area] = @Original_desc_area) AND ([upri"& _ 
                "ce] = @Original_uprice) AND ([pc_disc] = @Original_pc_disc) AND ([up_disc] = @Or"& _ 
                "iginal_up_disc) AND ([curcyprice] = @Original_curcyprice) AND ([currency] = @Ori"& _ 
                "ginal_currency) AND ([bin_ref] = @Original_bin_ref) AND ([bin_recd] = @Original_"& _ 
                "bin_recd) AND ([iwho] = @Original_iwho) AND ([ldate] = @Original_ldate) AND ([or"& _ 
                "der_] = @Original_order_) AND ([supplier] = @Original_supplier) AND ([UniqueID] "& _ 
                "= @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_doc_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "doc_ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_line_no", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "line_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_partid", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qty_ord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_ord", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qty_sent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_sent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_desc_area", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_area", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_uprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "uprice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pc_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "pc_disc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_up_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "up_disc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_curcyprice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "curcyprice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_currency", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currency", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bin_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bin_ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bin_recd", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "bin_recd", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iwho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_order_", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "order_", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[invwork] ([doc_ref], [ddate], [rec_type], [line_no], [partid],"& _ 
                " [iicode], [qty_ord], [qty_sent], [assured], [desc_area], [uprice], [pc_disc], ["& _ 
                "up_disc], [curcyprice], [currency], [bin_ref], [bin_recd], [iwho], [ldate], [ord"& _ 
                "er_], [supplier]) VALUES (@doc_ref, @ddate, @rec_type, @line_no, @partid, @iicod"& _ 
                "e, @qty_ord, @qty_sent, @assured, @desc_area, @uprice, @pc_disc, @up_disc, @curc"& _ 
                "yprice, @currency, @bin_ref, @bin_recd, @iwho, @ldate, @order_, @supplier);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SEL"& _ 
                "ECT doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_sent, assure"& _ 
                "d, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref, bin_recd,"& _ 
                " iwho, ldate, order_, supplier, UniqueID FROM invwork WHERE (UniqueID = SCOPE_ID"& _ 
                "ENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@doc_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "doc_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@line_no", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "line_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@partid", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty_ord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_ord", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty_sent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_sent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@desc_area", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_area", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@uprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "uprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pc_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "pc_disc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@up_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "up_disc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@curcyprice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "curcyprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@currency", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bin_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bin_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bin_recd", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "bin_recd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@order_", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "order_", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[invwork] SET [doc_ref] = @doc_ref, [ddate] = @ddate, [rec_type] = @"& _ 
                "rec_type, [line_no] = @line_no, [partid] = @partid, [iicode] = @iicode, [qty_ord"& _ 
                "] = @qty_ord, [qty_sent] = @qty_sent, [assured] = @assured, [desc_area] = @desc_"& _ 
                "area, [uprice] = @uprice, [pc_disc] = @pc_disc, [up_disc] = @up_disc, [curcypric"& _ 
                "e] = @curcyprice, [currency] = @currency, [bin_ref] = @bin_ref, [bin_recd] = @bi"& _ 
                "n_recd, [iwho] = @iwho, [ldate] = @ldate, [order_] = @order_, [supplier] = @supp"& _ 
                "lier WHERE (([doc_ref] = @Original_doc_ref) AND ([ddate] = @Original_ddate) AND "& _ 
                "([rec_type] = @Original_rec_type) AND ([line_no] = @Original_line_no) AND ([part"& _ 
                "id] = @Original_partid) AND ([iicode] = @Original_iicode) AND ([qty_ord] = @Orig"& _ 
                "inal_qty_ord) AND ([qty_sent] = @Original_qty_sent) AND ([assured] = @Original_a"& _ 
                "ssured) AND ([desc_area] = @Original_desc_area) AND ([uprice] = @Original_uprice"& _ 
                ") AND ([pc_disc] = @Original_pc_disc) AND ([up_disc] = @Original_up_disc) AND (["& _ 
                "curcyprice] = @Original_curcyprice) AND ([currency] = @Original_currency) AND (["& _ 
                "bin_ref] = @Original_bin_ref) AND ([bin_recd] = @Original_bin_recd) AND ([iwho] "& _ 
                "= @Original_iwho) AND ([ldate] = @Original_ldate) AND ([order_] = @Original_orde"& _ 
                "r_) AND ([supplier] = @Original_supplier) AND ([UniqueID] = @Original_UniqueID))"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_sent, "& _ 
                "assured, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref, bin"& _ 
                "_recd, iwho, ldate, order_, supplier, UniqueID FROM invwork WHERE (UniqueID = @U"& _ 
                "niqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@doc_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "doc_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@line_no", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "line_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@partid", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty_ord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_ord", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty_sent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_sent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@desc_area", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_area", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@uprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "uprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pc_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "pc_disc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@up_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "up_disc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@curcyprice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "curcyprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@currency", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bin_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bin_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bin_recd", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "bin_recd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@order_", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "order_", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_doc_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "doc_ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_line_no", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "line_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_partid", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qty_ord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_ord", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qty_sent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_sent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_desc_area", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_area", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_uprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "uprice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pc_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "pc_disc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_up_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "up_disc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_curcyprice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "curcyprice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_currency", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currency", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bin_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bin_ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bin_recd", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "bin_recd", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iwho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_order_", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "order_", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_sent, assu"& _ 
                "red, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref, bin_rec"& _ 
                "d, iwho, ldate, order_, supplier, UniqueID FROM dbo.invwork"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.invworkDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.invworkDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.invworkDataTable = New TransvacDataV2DataSet1.invworkDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.invworkDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "invwork")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_doc_ref As String,  _
                    ByVal Original_ddate As Date,  _
                    ByVal Original_rec_type As String,  _
                    ByVal Original_line_no As Decimal,  _
                    ByVal Original_partid As String,  _
                    ByVal Original_iicode As String,  _
                    ByVal Original_qty_ord As Decimal,  _
                    ByVal Original_qty_sent As Decimal,  _
                    ByVal Original_assured As String,  _
                    ByVal Original_desc_area As String,  _
                    ByVal Original_uprice As Decimal,  _
                    ByVal Original_pc_disc As Decimal,  _
                    ByVal Original_up_disc As Decimal,  _
                    ByVal Original_curcyprice As String,  _
                    ByVal Original_currency As String,  _
                    ByVal Original_bin_ref As String,  _
                    ByVal Original_bin_recd As Decimal,  _
                    ByVal Original_iwho As String,  _
                    ByVal Original_ldate As Date,  _
                    ByVal Original_order_ As String,  _
                    ByVal Original_supplier As String,  _
                    ByVal Original_UniqueID As Long) As Integer
            If (Original_doc_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_doc_ref")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_doc_ref,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ddate,Date)
            If (Original_rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_rec_type")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_rec_type,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_line_no,Decimal)
            If (Original_partid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_partid")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_partid,String)
            End If
            If (Original_iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iicode")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_iicode,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_qty_ord,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_qty_sent,Decimal)
            If (Original_assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_assured")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_assured,String)
            End If
            If (Original_desc_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_desc_area")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_desc_area,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_uprice,Decimal)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_pc_disc,Decimal)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_up_disc,Decimal)
            If (Original_curcyprice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_curcyprice")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_curcyprice,String)
            End If
            If (Original_currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_currency")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_currency,String)
            End If
            If (Original_bin_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bin_ref")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_bin_ref,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_bin_recd,Decimal)
            If (Original_iwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iwho")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_iwho,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_ldate,Date)
            If (Original_order_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_order_")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_order_,String)
            End If
            If (Original_supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_supplier")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_supplier,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal doc_ref As String,  _
                    ByVal ddate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal line_no As Decimal,  _
                    ByVal partid As String,  _
                    ByVal iicode As String,  _
                    ByVal qty_ord As Decimal,  _
                    ByVal qty_sent As Decimal,  _
                    ByVal assured As String,  _
                    ByVal desc_area As String,  _
                    ByVal uprice As Decimal,  _
                    ByVal pc_disc As Decimal,  _
                    ByVal up_disc As Decimal,  _
                    ByVal curcyprice As String,  _
                    ByVal currency As String,  _
                    ByVal bin_ref As String,  _
                    ByVal bin_recd As Decimal,  _
                    ByVal iwho As String,  _
                    ByVal ldate As Date,  _
                    ByVal order_ As String,  _
                    ByVal supplier As String) As Integer
            If (doc_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("doc_ref")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(doc_ref,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ddate,Date)
            If (rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("rec_type")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(rec_type,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(line_no,Decimal)
            If (partid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("partid")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(partid,String)
            End If
            If (iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iicode")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(iicode,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(qty_ord,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(qty_sent,Decimal)
            If (assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("assured")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(assured,String)
            End If
            If (desc_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("desc_area")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(desc_area,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(uprice,Decimal)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(pc_disc,Decimal)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(up_disc,Decimal)
            If (curcyprice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("curcyprice")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(curcyprice,String)
            End If
            If (currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("currency")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(currency,String)
            End If
            If (bin_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bin_ref")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(bin_ref,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(bin_recd,Decimal)
            If (iwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iwho")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(iwho,String)
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(ldate,Date)
            If (order_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("order_")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(order_,String)
            End If
            If (supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("supplier")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(supplier,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal doc_ref As String,  _
                    ByVal ddate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal line_no As Decimal,  _
                    ByVal partid As String,  _
                    ByVal iicode As String,  _
                    ByVal qty_ord As Decimal,  _
                    ByVal qty_sent As Decimal,  _
                    ByVal assured As String,  _
                    ByVal desc_area As String,  _
                    ByVal uprice As Decimal,  _
                    ByVal pc_disc As Decimal,  _
                    ByVal up_disc As Decimal,  _
                    ByVal curcyprice As String,  _
                    ByVal currency As String,  _
                    ByVal bin_ref As String,  _
                    ByVal bin_recd As Decimal,  _
                    ByVal iwho As String,  _
                    ByVal ldate As Date,  _
                    ByVal order_ As String,  _
                    ByVal supplier As String,  _
                    ByVal Original_doc_ref As String,  _
                    ByVal Original_ddate As Date,  _
                    ByVal Original_rec_type As String,  _
                    ByVal Original_line_no As Decimal,  _
                    ByVal Original_partid As String,  _
                    ByVal Original_iicode As String,  _
                    ByVal Original_qty_ord As Decimal,  _
                    ByVal Original_qty_sent As Decimal,  _
                    ByVal Original_assured As String,  _
                    ByVal Original_desc_area As String,  _
                    ByVal Original_uprice As Decimal,  _
                    ByVal Original_pc_disc As Decimal,  _
                    ByVal Original_up_disc As Decimal,  _
                    ByVal Original_curcyprice As String,  _
                    ByVal Original_currency As String,  _
                    ByVal Original_bin_ref As String,  _
                    ByVal Original_bin_recd As Decimal,  _
                    ByVal Original_iwho As String,  _
                    ByVal Original_ldate As Date,  _
                    ByVal Original_order_ As String,  _
                    ByVal Original_supplier As String,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (doc_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("doc_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(doc_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ddate,Date)
            If (rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("rec_type")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(rec_type,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(line_no,Decimal)
            If (partid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("partid")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(partid,String)
            End If
            If (iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iicode")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(iicode,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(qty_ord,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(qty_sent,Decimal)
            If (assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("assured")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(assured,String)
            End If
            If (desc_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("desc_area")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(desc_area,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(uprice,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(pc_disc,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(up_disc,Decimal)
            If (curcyprice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("curcyprice")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(curcyprice,String)
            End If
            If (currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("currency")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(currency,String)
            End If
            If (bin_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bin_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(bin_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(bin_recd,Decimal)
            If (iwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(iwho,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(ldate,Date)
            If (order_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("order_")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(order_,String)
            End If
            If (supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("supplier")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(supplier,String)
            End If
            If (Original_doc_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_doc_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_doc_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_ddate,Date)
            If (Original_rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_rec_type")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_rec_type,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_line_no,Decimal)
            If (Original_partid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_partid")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_partid,String)
            End If
            If (Original_iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iicode")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_iicode,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_qty_ord,Decimal)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_qty_sent,Decimal)
            If (Original_assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_assured")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_assured,String)
            End If
            If (Original_desc_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_desc_area")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_desc_area,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_uprice,Decimal)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_pc_disc,Decimal)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_up_disc,Decimal)
            If (Original_curcyprice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_curcyprice")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_curcyprice,String)
            End If
            If (Original_currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_currency")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_currency,String)
            End If
            If (Original_bin_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bin_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_bin_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_bin_recd,Decimal)
            If (Original_iwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_iwho,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_ldate,Date)
            If (Original_order_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_order_")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_order_,String)
            End If
            If (Original_supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_supplier")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_supplier,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal doc_ref As String,  _
                    ByVal ddate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal line_no As Decimal,  _
                    ByVal partid As String,  _
                    ByVal iicode As String,  _
                    ByVal qty_ord As Decimal,  _
                    ByVal qty_sent As Decimal,  _
                    ByVal assured As String,  _
                    ByVal desc_area As String,  _
                    ByVal uprice As Decimal,  _
                    ByVal pc_disc As Decimal,  _
                    ByVal up_disc As Decimal,  _
                    ByVal curcyprice As String,  _
                    ByVal currency As String,  _
                    ByVal bin_ref As String,  _
                    ByVal bin_recd As Decimal,  _
                    ByVal iwho As String,  _
                    ByVal ldate As Date,  _
                    ByVal order_ As String,  _
                    ByVal supplier As String,  _
                    ByVal Original_doc_ref As String,  _
                    ByVal Original_ddate As Date,  _
                    ByVal Original_rec_type As String,  _
                    ByVal Original_line_no As Decimal,  _
                    ByVal Original_partid As String,  _
                    ByVal Original_iicode As String,  _
                    ByVal Original_qty_ord As Decimal,  _
                    ByVal Original_qty_sent As Decimal,  _
                    ByVal Original_assured As String,  _
                    ByVal Original_desc_area As String,  _
                    ByVal Original_uprice As Decimal,  _
                    ByVal Original_pc_disc As Decimal,  _
                    ByVal Original_up_disc As Decimal,  _
                    ByVal Original_curcyprice As String,  _
                    ByVal Original_currency As String,  _
                    ByVal Original_bin_ref As String,  _
                    ByVal Original_bin_recd As Decimal,  _
                    ByVal Original_iwho As String,  _
                    ByVal Original_ldate As Date,  _
                    ByVal Original_order_ As String,  _
                    ByVal Original_supplier As String,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_sent, assured, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref, bin_recd, iwho, ldate, order_, supplier, Original_doc_ref, Original_ddate, Original_rec_type, Original_line_no, Original_partid, Original_iicode, Original_qty_ord, Original_qty_sent, Original_assured, Original_desc_area, Original_uprice, Original_pc_disc, Original_up_disc, Original_curcyprice, Original_currency, Original_bin_ref, Original_bin_recd, Original_iwho, Original_ldate, Original_order_, Original_supplier, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class invworkoldTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "invworkold"
            tableMapping.ColumnMappings.Add("doc_ref", "doc_ref")
            tableMapping.ColumnMappings.Add("ddate", "ddate")
            tableMapping.ColumnMappings.Add("rec_type", "rec_type")
            tableMapping.ColumnMappings.Add("line_no", "line_no")
            tableMapping.ColumnMappings.Add("partid", "partid")
            tableMapping.ColumnMappings.Add("iicode", "iicode")
            tableMapping.ColumnMappings.Add("qty_ord", "qty_ord")
            tableMapping.ColumnMappings.Add("qty_sent", "qty_sent")
            tableMapping.ColumnMappings.Add("assured", "assured")
            tableMapping.ColumnMappings.Add("desc_area", "desc_area")
            tableMapping.ColumnMappings.Add("uprice", "uprice")
            tableMapping.ColumnMappings.Add("pc_disc", "pc_disc")
            tableMapping.ColumnMappings.Add("up_disc", "up_disc")
            tableMapping.ColumnMappings.Add("curcyprice", "curcyprice")
            tableMapping.ColumnMappings.Add("currency", "currency")
            tableMapping.ColumnMappings.Add("bin_ref", "bin_ref")
            tableMapping.ColumnMappings.Add("bin_recd", "bin_recd")
            tableMapping.ColumnMappings.Add("iwho", "iwho")
            tableMapping.ColumnMappings.Add("ldate", "ldate")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[invworkold] WHERE (([doc_ref] = @Original_doc_ref) AND ([ddate"& _ 
                "] = @Original_ddate) AND ([rec_type] = @Original_rec_type) AND ([line_no] = @Ori"& _ 
                "ginal_line_no) AND ([partid] = @Original_partid) AND ([iicode] = @Original_iicod"& _ 
                "e) AND ([qty_ord] = @Original_qty_ord) AND ([qty_sent] = @Original_qty_sent) AND"& _ 
                " ([assured] = @Original_assured) AND ([desc_area] = @Original_desc_area) AND ([u"& _ 
                "price] = @Original_uprice) AND ([pc_disc] = @Original_pc_disc) AND ([up_disc] = "& _ 
                "@Original_up_disc) AND ([curcyprice] = @Original_curcyprice) AND ([currency] = @"& _ 
                "Original_currency) AND ([bin_ref] = @Original_bin_ref) AND ([bin_recd] = @Origin"& _ 
                "al_bin_recd) AND ([iwho] = @Original_iwho) AND ([ldate] = @Original_ldate) AND ("& _ 
                "[UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_doc_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "doc_ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_line_no", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "line_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_partid", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qty_ord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_ord", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qty_sent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_sent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_desc_area", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_area", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_uprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "uprice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pc_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "pc_disc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_up_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "up_disc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_curcyprice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "curcyprice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_currency", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currency", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bin_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bin_ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bin_recd", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "bin_recd", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iwho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[invworkold] ([doc_ref], [ddate], [rec_type], [line_no], [parti"& _ 
                "d], [iicode], [qty_ord], [qty_sent], [assured], [desc_area], [uprice], [pc_disc]"& _ 
                ", [up_disc], [curcyprice], [currency], [bin_ref], [bin_recd], [iwho], [ldate]) V"& _ 
                "ALUES (@doc_ref, @ddate, @rec_type, @line_no, @partid, @iicode, @qty_ord, @qty_s"& _ 
                "ent, @assured, @desc_area, @uprice, @pc_disc, @up_disc, @curcyprice, @currency, "& _ 
                "@bin_ref, @bin_recd, @iwho, @ldate);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT doc_ref, ddate, rec_type, line_no, "& _ 
                "partid, iicode, qty_ord, qty_sent, assured, desc_area, uprice, pc_disc, up_disc,"& _ 
                " curcyprice, currency, bin_ref, bin_recd, iwho, ldate, UniqueID FROM invworkold "& _ 
                "WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@doc_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "doc_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@line_no", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "line_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@partid", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty_ord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_ord", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty_sent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_sent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@desc_area", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_area", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@uprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "uprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pc_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "pc_disc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@up_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "up_disc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@curcyprice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "curcyprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@currency", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bin_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bin_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bin_recd", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "bin_recd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[invworkold] SET [doc_ref] = @doc_ref, [ddate] = @ddate, [rec_type] "& _ 
                "= @rec_type, [line_no] = @line_no, [partid] = @partid, [iicode] = @iicode, [qty_"& _ 
                "ord] = @qty_ord, [qty_sent] = @qty_sent, [assured] = @assured, [desc_area] = @de"& _ 
                "sc_area, [uprice] = @uprice, [pc_disc] = @pc_disc, [up_disc] = @up_disc, [curcyp"& _ 
                "rice] = @curcyprice, [currency] = @currency, [bin_ref] = @bin_ref, [bin_recd] = "& _ 
                "@bin_recd, [iwho] = @iwho, [ldate] = @ldate WHERE (([doc_ref] = @Original_doc_re"& _ 
                "f) AND ([ddate] = @Original_ddate) AND ([rec_type] = @Original_rec_type) AND ([l"& _ 
                "ine_no] = @Original_line_no) AND ([partid] = @Original_partid) AND ([iicode] = @"& _ 
                "Original_iicode) AND ([qty_ord] = @Original_qty_ord) AND ([qty_sent] = @Original"& _ 
                "_qty_sent) AND ([assured] = @Original_assured) AND ([desc_area] = @Original_desc"& _ 
                "_area) AND ([uprice] = @Original_uprice) AND ([pc_disc] = @Original_pc_disc) AND"& _ 
                " ([up_disc] = @Original_up_disc) AND ([curcyprice] = @Original_curcyprice) AND ("& _ 
                "[currency] = @Original_currency) AND ([bin_ref] = @Original_bin_ref) AND ([bin_r"& _ 
                "ecd] = @Original_bin_recd) AND ([iwho] = @Original_iwho) AND ([ldate] = @Origina"& _ 
                "l_ldate) AND ([UniqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT doc_ref, ddate, rec_typ"& _ 
                "e, line_no, partid, iicode, qty_ord, qty_sent, assured, desc_area, uprice, pc_di"& _ 
                "sc, up_disc, curcyprice, currency, bin_ref, bin_recd, iwho, ldate, UniqueID FROM"& _ 
                " invworkold WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@doc_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "doc_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@line_no", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "line_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@partid", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty_ord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_ord", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qty_sent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_sent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@desc_area", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_area", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@uprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "uprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pc_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "pc_disc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@up_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "up_disc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@curcyprice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "curcyprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@currency", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currency", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bin_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bin_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bin_recd", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "bin_recd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_doc_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "doc_ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_line_no", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "line_no", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_partid", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partid", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qty_ord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_ord", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qty_sent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qty_sent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_desc_area", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_area", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_uprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "uprice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pc_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "pc_disc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_up_disc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "up_disc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_curcyprice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "curcyprice", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_currency", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currency", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bin_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bin_ref", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bin_recd", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "bin_recd", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iwho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_sent, assu"& _ 
                "red, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref, bin_rec"& _ 
                "d, iwho, ldate, UniqueID FROM dbo.invworkold"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.invworkoldDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.invworkoldDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.invworkoldDataTable = New TransvacDataV2DataSet1.invworkoldDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.invworkoldDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "invworkold")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_doc_ref As String,  _
                    ByVal Original_ddate As Date,  _
                    ByVal Original_rec_type As String,  _
                    ByVal Original_line_no As Decimal,  _
                    ByVal Original_partid As String,  _
                    ByVal Original_iicode As String,  _
                    ByVal Original_qty_ord As Decimal,  _
                    ByVal Original_qty_sent As Decimal,  _
                    ByVal Original_assured As String,  _
                    ByVal Original_desc_area As String,  _
                    ByVal Original_uprice As Decimal,  _
                    ByVal Original_pc_disc As Decimal,  _
                    ByVal Original_up_disc As Decimal,  _
                    ByVal Original_curcyprice As String,  _
                    ByVal Original_currency As String,  _
                    ByVal Original_bin_ref As String,  _
                    ByVal Original_bin_recd As Decimal,  _
                    ByVal Original_iwho As String,  _
                    ByVal Original_ldate As Date,  _
                    ByVal Original_UniqueID As Long) As Integer
            If (Original_doc_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_doc_ref")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_doc_ref,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ddate,Date)
            If (Original_rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_rec_type")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_rec_type,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_line_no,Decimal)
            If (Original_partid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_partid")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_partid,String)
            End If
            If (Original_iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iicode")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_iicode,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_qty_ord,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_qty_sent,Decimal)
            If (Original_assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_assured")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_assured,String)
            End If
            If (Original_desc_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_desc_area")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_desc_area,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_uprice,Decimal)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_pc_disc,Decimal)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_up_disc,Decimal)
            If (Original_curcyprice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_curcyprice")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_curcyprice,String)
            End If
            If (Original_currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_currency")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_currency,String)
            End If
            If (Original_bin_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bin_ref")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_bin_ref,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_bin_recd,Decimal)
            If (Original_iwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iwho")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_iwho,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_ldate,Date)
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal doc_ref As String,  _
                    ByVal ddate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal line_no As Decimal,  _
                    ByVal partid As String,  _
                    ByVal iicode As String,  _
                    ByVal qty_ord As Decimal,  _
                    ByVal qty_sent As Decimal,  _
                    ByVal assured As String,  _
                    ByVal desc_area As String,  _
                    ByVal uprice As Decimal,  _
                    ByVal pc_disc As Decimal,  _
                    ByVal up_disc As Decimal,  _
                    ByVal curcyprice As String,  _
                    ByVal currency As String,  _
                    ByVal bin_ref As String,  _
                    ByVal bin_recd As Decimal,  _
                    ByVal iwho As String,  _
                    ByVal ldate As Date) As Integer
            If (doc_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("doc_ref")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(doc_ref,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(ddate,Date)
            If (rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("rec_type")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(rec_type,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(line_no,Decimal)
            If (partid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("partid")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(partid,String)
            End If
            If (iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iicode")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(iicode,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(qty_ord,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(qty_sent,Decimal)
            If (assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("assured")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(assured,String)
            End If
            If (desc_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("desc_area")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(desc_area,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(uprice,Decimal)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(pc_disc,Decimal)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(up_disc,Decimal)
            If (curcyprice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("curcyprice")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(curcyprice,String)
            End If
            If (currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("currency")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(currency,String)
            End If
            If (bin_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bin_ref")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(bin_ref,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(bin_recd,Decimal)
            If (iwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iwho")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(iwho,String)
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(ldate,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal doc_ref As String,  _
                    ByVal ddate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal line_no As Decimal,  _
                    ByVal partid As String,  _
                    ByVal iicode As String,  _
                    ByVal qty_ord As Decimal,  _
                    ByVal qty_sent As Decimal,  _
                    ByVal assured As String,  _
                    ByVal desc_area As String,  _
                    ByVal uprice As Decimal,  _
                    ByVal pc_disc As Decimal,  _
                    ByVal up_disc As Decimal,  _
                    ByVal curcyprice As String,  _
                    ByVal currency As String,  _
                    ByVal bin_ref As String,  _
                    ByVal bin_recd As Decimal,  _
                    ByVal iwho As String,  _
                    ByVal ldate As Date,  _
                    ByVal Original_doc_ref As String,  _
                    ByVal Original_ddate As Date,  _
                    ByVal Original_rec_type As String,  _
                    ByVal Original_line_no As Decimal,  _
                    ByVal Original_partid As String,  _
                    ByVal Original_iicode As String,  _
                    ByVal Original_qty_ord As Decimal,  _
                    ByVal Original_qty_sent As Decimal,  _
                    ByVal Original_assured As String,  _
                    ByVal Original_desc_area As String,  _
                    ByVal Original_uprice As Decimal,  _
                    ByVal Original_pc_disc As Decimal,  _
                    ByVal Original_up_disc As Decimal,  _
                    ByVal Original_curcyprice As String,  _
                    ByVal Original_currency As String,  _
                    ByVal Original_bin_ref As String,  _
                    ByVal Original_bin_recd As Decimal,  _
                    ByVal Original_iwho As String,  _
                    ByVal Original_ldate As Date,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (doc_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("doc_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(doc_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ddate,Date)
            If (rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("rec_type")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(rec_type,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(line_no,Decimal)
            If (partid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("partid")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(partid,String)
            End If
            If (iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iicode")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(iicode,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(qty_ord,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(qty_sent,Decimal)
            If (assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("assured")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(assured,String)
            End If
            If (desc_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("desc_area")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(desc_area,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(uprice,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(pc_disc,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(up_disc,Decimal)
            If (curcyprice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("curcyprice")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(curcyprice,String)
            End If
            If (currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("currency")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(currency,String)
            End If
            If (bin_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bin_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(bin_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(bin_recd,Decimal)
            If (iwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(iwho,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(ldate,Date)
            If (Original_doc_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_doc_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_doc_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_ddate,Date)
            If (Original_rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_rec_type")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_rec_type,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_line_no,Decimal)
            If (Original_partid Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_partid")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_partid,String)
            End If
            If (Original_iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iicode")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_iicode,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_qty_ord,Decimal)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_qty_sent,Decimal)
            If (Original_assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_assured")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_assured,String)
            End If
            If (Original_desc_area Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_desc_area")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_desc_area,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_uprice,Decimal)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_pc_disc,Decimal)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_up_disc,Decimal)
            If (Original_curcyprice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_curcyprice")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_curcyprice,String)
            End If
            If (Original_currency Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_currency")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_currency,String)
            End If
            If (Original_bin_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bin_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_bin_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_bin_recd,Decimal)
            If (Original_iwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_iwho,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_ldate,Date)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal doc_ref As String,  _
                    ByVal ddate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal line_no As Decimal,  _
                    ByVal partid As String,  _
                    ByVal iicode As String,  _
                    ByVal qty_ord As Decimal,  _
                    ByVal qty_sent As Decimal,  _
                    ByVal assured As String,  _
                    ByVal desc_area As String,  _
                    ByVal uprice As Decimal,  _
                    ByVal pc_disc As Decimal,  _
                    ByVal up_disc As Decimal,  _
                    ByVal curcyprice As String,  _
                    ByVal currency As String,  _
                    ByVal bin_ref As String,  _
                    ByVal bin_recd As Decimal,  _
                    ByVal iwho As String,  _
                    ByVal ldate As Date,  _
                    ByVal Original_doc_ref As String,  _
                    ByVal Original_ddate As Date,  _
                    ByVal Original_rec_type As String,  _
                    ByVal Original_line_no As Decimal,  _
                    ByVal Original_partid As String,  _
                    ByVal Original_iicode As String,  _
                    ByVal Original_qty_ord As Decimal,  _
                    ByVal Original_qty_sent As Decimal,  _
                    ByVal Original_assured As String,  _
                    ByVal Original_desc_area As String,  _
                    ByVal Original_uprice As Decimal,  _
                    ByVal Original_pc_disc As Decimal,  _
                    ByVal Original_up_disc As Decimal,  _
                    ByVal Original_curcyprice As String,  _
                    ByVal Original_currency As String,  _
                    ByVal Original_bin_ref As String,  _
                    ByVal Original_bin_recd As Decimal,  _
                    ByVal Original_iwho As String,  _
                    ByVal Original_ldate As Date,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(doc_ref, ddate, rec_type, line_no, partid, iicode, qty_ord, qty_sent, assured, desc_area, uprice, pc_disc, up_disc, curcyprice, currency, bin_ref, bin_recd, iwho, ldate, Original_doc_ref, Original_ddate, Original_rec_type, Original_line_no, Original_partid, Original_iicode, Original_qty_ord, Original_qty_sent, Original_assured, Original_desc_area, Original_uprice, Original_pc_disc, Original_up_disc, Original_curcyprice, Original_currency, Original_bin_ref, Original_bin_recd, Original_iwho, Original_ldate, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class issueTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "issue"
            tableMapping.ColumnMappings.Add("pno", "pno")
            tableMapping.ColumnMappings.Add("issue", "issue")
            tableMapping.ColumnMappings.Add("idate", "idate")
            tableMapping.ColumnMappings.Add("idesc", "idesc")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[issue] WHERE (([pno] = @Original_pno) AND ([issue] = @Original"& _ 
                "_issue) AND ([idate] = @Original_idate) AND ([idesc] = @Original_idesc) AND ([Un"& _ 
                "iqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_issue", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "issue", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_idate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_idesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[issue] ([pno], [issue], [idate], [idesc]) VALUES (@pno, @issue"& _ 
                ", @idate, @idesc);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pno, issue, idate, idesc, UniqueID FROM issue WHERE ("& _ 
                "UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@issue", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "issue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[issue] SET [pno] = @pno, [issue] = @issue, [idate] = @idate, [idesc"& _ 
                "] = @idesc WHERE (([pno] = @Original_pno) AND ([issue] = @Original_issue) AND (["& _ 
                "idate] = @Original_idate) AND ([idesc] = @Original_idesc) AND ([UniqueID] = @Ori"& _ 
                "ginal_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pno, issue, idate, idesc, UniqueID FROM issue WHERE (U"& _ 
                "niqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@issue", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "issue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_issue", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "issue", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_idate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_idesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT pno, issue, idate, idesc, UniqueID FROM dbo.issue"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.issueDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.issueDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.issueDataTable = New TransvacDataV2DataSet1.issueDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.issueDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "issue")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_pno As String, ByVal Original_issue As String, ByVal Original_idate As Date, ByVal Original_idesc As String, ByVal Original_UniqueID As Long) As Integer
            If (Original_pno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_pno")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_pno,String)
            End If
            If (Original_issue Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_issue")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_issue,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_idate,Date)
            If (Original_idesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_idesc")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_idesc,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal pno As String, ByVal issue As String, ByVal idate As Date, ByVal idesc As String) As Integer
            If (pno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pno")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(pno,String)
            End If
            If (issue Is Nothing) Then
                Throw New Global.System.ArgumentNullException("issue")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(issue,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(idate,Date)
            If (idesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("idesc")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(idesc,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal pno As String, ByVal issue As String, ByVal idate As Date, ByVal idesc As String, ByVal Original_pno As String, ByVal Original_issue As String, ByVal Original_idate As Date, ByVal Original_idesc As String, ByVal Original_UniqueID As Long, ByVal UniqueID As Long) As Integer
            If (pno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pno")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(pno,String)
            End If
            If (issue Is Nothing) Then
                Throw New Global.System.ArgumentNullException("issue")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(issue,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(idate,Date)
            If (idesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("idesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(idesc,String)
            End If
            If (Original_pno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_pno")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_pno,String)
            End If
            If (Original_issue Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_issue")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_issue,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_idate,Date)
            If (Original_idesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_idesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_idesc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal pno As String, ByVal issue As String, ByVal idate As Date, ByVal idesc As String, ByVal Original_pno As String, ByVal Original_issue As String, ByVal Original_idate As Date, ByVal Original_idesc As String, ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(pno, issue, idate, idesc, Original_pno, Original_issue, Original_idate, Original_idesc, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class locationTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "location"
            tableMapping.ColumnMappings.Add("ldesc", "ldesc")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[location] WHERE (([ldesc] = @Original_ldesc) AND ([UniqueID] ="& _ 
                " @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ldesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[location] ([ldesc]) VALUES (@ldesc);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ldesc, UniqueID F"& _ 
                "ROM location WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ldesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[location] SET [ldesc] = @ldesc WHERE (([ldesc] = @Original_ldesc) A"& _ 
                "ND ([UniqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ldesc, UniqueID FROM location WHE"& _ 
                "RE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ldesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ldesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ldesc, UniqueID FROM dbo.location"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.locationDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.locationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.locationDataTable = New TransvacDataV2DataSet1.locationDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.locationDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "location")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ldesc As String, ByVal Original_UniqueID As Long) As Integer
            If (Original_ldesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ldesc")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ldesc,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ldesc As String) As Integer
            If (ldesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ldesc")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ldesc,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ldesc As String, ByVal Original_ldesc As String, ByVal Original_UniqueID As Long, ByVal UniqueID As Long) As Integer
            If (ldesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ldesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ldesc,String)
            End If
            If (Original_ldesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ldesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_ldesc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ldesc As String, ByVal Original_ldesc As String, ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(ldesc, Original_ldesc, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class mainTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "main"
            tableMapping.ColumnMappings.Add("accno", "accno")
            tableMapping.ColumnMappings.Add("name", "name")
            tableMapping.ColumnMappings.Add("add1", "add1")
            tableMapping.ColumnMappings.Add("add2", "add2")
            tableMapping.ColumnMappings.Add("add3", "add3")
            tableMapping.ColumnMappings.Add("add4", "add4")
            tableMapping.ColumnMappings.Add("add5", "add5")
            tableMapping.ColumnMappings.Add("pcode", "pcode")
            tableMapping.ColumnMappings.Add("bankname", "bankname")
            tableMapping.ColumnMappings.Add("bankaccno", "bankaccno")
            tableMapping.ColumnMappings.Add("banksort", "banksort")
            tableMapping.ColumnMappings.Add("vatno", "vatno")
            tableMapping.ColumnMappings.Add("vatrate", "vatrate")
            tableMapping.ColumnMappings.Add("invoiceno", "invoiceno")
            tableMapping.ColumnMappings.Add("telno", "telno")
            tableMapping.ColumnMappings.Add("faxno", "faxno")
            tableMapping.ColumnMappings.Add("email", "email")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[main] WHERE (([accno] = @Original_accno) AND ([name] = @Origin"& _ 
                "al_name) AND ([add1] = @Original_add1) AND ([add2] = @Original_add2) AND ([add3]"& _ 
                " = @Original_add3) AND ([add4] = @Original_add4) AND ([add5] = @Original_add5) A"& _ 
                "ND ([pcode] = @Original_pcode) AND ([bankname] = @Original_bankname) AND ([banka"& _ 
                "ccno] = @Original_bankaccno) AND ([banksort] = @Original_banksort) AND ([vatno] "& _ 
                "= @Original_vatno) AND ([vatrate] = @Original_vatrate) AND ([invoiceno] = @Origi"& _ 
                "nal_invoiceno) AND ([telno] = @Original_telno) AND ([faxno] = @Original_faxno) A"& _ 
                "ND ([email] = @Original_email) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_accno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "accno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_add1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "add1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_add2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "add2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_add3", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "add3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_add4", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "add4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_add5", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "add5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pcode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pcode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bankname", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bankname", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bankaccno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bankaccno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_banksort", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "banksort", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_vatno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "vatno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_vatrate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "vatrate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_invoiceno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "invoiceno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_telno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "telno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_faxno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "faxno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_email", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "email", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[main] ([accno], [name], [add1], [add2], [add3], [add4], [add5]"& _ 
                ", [pcode], [bankname], [bankaccno], [banksort], [vatno], [vatrate], [invoiceno],"& _ 
                " [telno], [faxno], [email]) VALUES (@accno, @name, @add1, @add2, @add3, @add4, @"& _ 
                "add5, @pcode, @bankname, @bankaccno, @banksort, @vatno, @vatrate, @invoiceno, @t"& _ 
                "elno, @faxno, @email);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT accno, name, add1, add2, add3, add4, add5, pcode,"& _ 
                " bankname, bankaccno, banksort, vatno, vatrate, invoiceno, telno, faxno, email, "& _ 
                "UniqueID FROM main WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@accno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "accno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@add1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "add1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@add2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "add2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@add3", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "add3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@add4", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "add4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@add5", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "add5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pcode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bankname", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bankname", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bankaccno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bankaccno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@banksort", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "banksort", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "vatno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatrate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "vatrate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invoiceno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "invoiceno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@telno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "telno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@faxno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "faxno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@email", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[main] SET [accno] = @accno, [name] = @name, [add1] = @add1, [add2] "& _ 
                "= @add2, [add3] = @add3, [add4] = @add4, [add5] = @add5, [pcode] = @pcode, [bank"& _ 
                "name] = @bankname, [bankaccno] = @bankaccno, [banksort] = @banksort, [vatno] = @"& _ 
                "vatno, [vatrate] = @vatrate, [invoiceno] = @invoiceno, [telno] = @telno, [faxno]"& _ 
                " = @faxno, [email] = @email WHERE (([accno] = @Original_accno) AND ([name] = @Or"& _ 
                "iginal_name) AND ([add1] = @Original_add1) AND ([add2] = @Original_add2) AND ([a"& _ 
                "dd3] = @Original_add3) AND ([add4] = @Original_add4) AND ([add5] = @Original_add"& _ 
                "5) AND ([pcode] = @Original_pcode) AND ([bankname] = @Original_bankname) AND ([b"& _ 
                "ankaccno] = @Original_bankaccno) AND ([banksort] = @Original_banksort) AND ([vat"& _ 
                "no] = @Original_vatno) AND ([vatrate] = @Original_vatrate) AND ([invoiceno] = @O"& _ 
                "riginal_invoiceno) AND ([telno] = @Original_telno) AND ([faxno] = @Original_faxn"& _ 
                "o) AND ([email] = @Original_email) AND ([UniqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELE"& _ 
                "CT accno, name, add1, add2, add3, add4, add5, pcode, bankname, bankaccno, bankso"& _ 
                "rt, vatno, vatrate, invoiceno, telno, faxno, email, UniqueID FROM main WHERE (Un"& _ 
                "iqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@accno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "accno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@add1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "add1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@add2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "add2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@add3", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "add3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@add4", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "add4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@add5", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "add5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pcode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bankname", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bankname", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bankaccno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bankaccno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@banksort", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "banksort", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "vatno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatrate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "vatrate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invoiceno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "invoiceno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@telno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "telno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@faxno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "faxno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@email", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_accno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "accno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_add1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "add1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_add2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "add2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_add3", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "add3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_add4", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "add4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_add5", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "add5", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_pcode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pcode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bankname", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bankname", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bankaccno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bankaccno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_banksort", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "banksort", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_vatno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "vatno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_vatrate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "vatrate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_invoiceno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "invoiceno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_telno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "telno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_faxno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "faxno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_email", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "email", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT accno, name, add1, add2, add3, add4, add5, pcode, bankname, bankaccno, ban"& _ 
                "ksort, vatno, vatrate, invoiceno, telno, faxno, email, UniqueID FROM dbo.main"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.mainDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.mainDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.mainDataTable = New TransvacDataV2DataSet1.mainDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.mainDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "main")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_accno As Decimal,  _
                    ByVal Original_name As String,  _
                    ByVal Original_add1 As String,  _
                    ByVal Original_add2 As String,  _
                    ByVal Original_add3 As String,  _
                    ByVal Original_add4 As String,  _
                    ByVal Original_add5 As String,  _
                    ByVal Original_pcode As String,  _
                    ByVal Original_bankname As String,  _
                    ByVal Original_bankaccno As String,  _
                    ByVal Original_banksort As String,  _
                    ByVal Original_vatno As String,  _
                    ByVal Original_vatrate As Decimal,  _
                    ByVal Original_invoiceno As Decimal,  _
                    ByVal Original_telno As String,  _
                    ByVal Original_faxno As String,  _
                    ByVal Original_email As String,  _
                    ByVal Original_UniqueID As Long) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_accno,Decimal)
            If (Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_name,String)
            End If
            If (Original_add1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_add1")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_add1,String)
            End If
            If (Original_add2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_add2")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_add2,String)
            End If
            If (Original_add3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_add3")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_add3,String)
            End If
            If (Original_add4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_add4")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_add4,String)
            End If
            If (Original_add5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_add5")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_add5,String)
            End If
            If (Original_pcode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_pcode")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_pcode,String)
            End If
            If (Original_bankname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bankname")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_bankname,String)
            End If
            If (Original_bankaccno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bankaccno")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_bankaccno,String)
            End If
            If (Original_banksort Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_banksort")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_banksort,String)
            End If
            If (Original_vatno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_vatno")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_vatno,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_vatrate,Decimal)
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_invoiceno,Decimal)
            If (Original_telno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_telno")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_telno,String)
            End If
            If (Original_faxno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_faxno")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_faxno,String)
            End If
            If (Original_email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_email")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_email,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal accno As Decimal,  _
                    ByVal name As String,  _
                    ByVal add1 As String,  _
                    ByVal add2 As String,  _
                    ByVal add3 As String,  _
                    ByVal add4 As String,  _
                    ByVal add5 As String,  _
                    ByVal pcode As String,  _
                    ByVal bankname As String,  _
                    ByVal bankaccno As String,  _
                    ByVal banksort As String,  _
                    ByVal vatno As String,  _
                    ByVal vatrate As Decimal,  _
                    ByVal invoiceno As Decimal,  _
                    ByVal telno As String,  _
                    ByVal faxno As String,  _
                    ByVal email As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(accno,Decimal)
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(name,String)
            End If
            If (add1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("add1")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(add1,String)
            End If
            If (add2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("add2")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(add2,String)
            End If
            If (add3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("add3")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(add3,String)
            End If
            If (add4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("add4")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(add4,String)
            End If
            If (add5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("add5")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(add5,String)
            End If
            If (pcode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pcode")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(pcode,String)
            End If
            If (bankname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bankname")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(bankname,String)
            End If
            If (bankaccno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bankaccno")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(bankaccno,String)
            End If
            If (banksort Is Nothing) Then
                Throw New Global.System.ArgumentNullException("banksort")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(banksort,String)
            End If
            If (vatno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("vatno")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(vatno,String)
            End If
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(vatrate,Decimal)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(invoiceno,Decimal)
            If (telno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("telno")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(telno,String)
            End If
            If (faxno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("faxno")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(faxno,String)
            End If
            If (email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("email")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(email,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal accno As Decimal,  _
                    ByVal name As String,  _
                    ByVal add1 As String,  _
                    ByVal add2 As String,  _
                    ByVal add3 As String,  _
                    ByVal add4 As String,  _
                    ByVal add5 As String,  _
                    ByVal pcode As String,  _
                    ByVal bankname As String,  _
                    ByVal bankaccno As String,  _
                    ByVal banksort As String,  _
                    ByVal vatno As String,  _
                    ByVal vatrate As Decimal,  _
                    ByVal invoiceno As Decimal,  _
                    ByVal telno As String,  _
                    ByVal faxno As String,  _
                    ByVal email As String,  _
                    ByVal Original_accno As Decimal,  _
                    ByVal Original_name As String,  _
                    ByVal Original_add1 As String,  _
                    ByVal Original_add2 As String,  _
                    ByVal Original_add3 As String,  _
                    ByVal Original_add4 As String,  _
                    ByVal Original_add5 As String,  _
                    ByVal Original_pcode As String,  _
                    ByVal Original_bankname As String,  _
                    ByVal Original_bankaccno As String,  _
                    ByVal Original_banksort As String,  _
                    ByVal Original_vatno As String,  _
                    ByVal Original_vatrate As Decimal,  _
                    ByVal Original_invoiceno As Decimal,  _
                    ByVal Original_telno As String,  _
                    ByVal Original_faxno As String,  _
                    ByVal Original_email As String,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(accno,Decimal)
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(name,String)
            End If
            If (add1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("add1")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(add1,String)
            End If
            If (add2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("add2")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(add2,String)
            End If
            If (add3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("add3")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(add3,String)
            End If
            If (add4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("add4")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(add4,String)
            End If
            If (add5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("add5")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(add5,String)
            End If
            If (pcode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pcode")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(pcode,String)
            End If
            If (bankname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bankname")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(bankname,String)
            End If
            If (bankaccno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bankaccno")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(bankaccno,String)
            End If
            If (banksort Is Nothing) Then
                Throw New Global.System.ArgumentNullException("banksort")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(banksort,String)
            End If
            If (vatno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("vatno")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(vatno,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(vatrate,Decimal)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(invoiceno,Decimal)
            If (telno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("telno")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(telno,String)
            End If
            If (faxno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("faxno")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(faxno,String)
            End If
            If (email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("email")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(email,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_accno,Decimal)
            If (Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_name,String)
            End If
            If (Original_add1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_add1")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_add1,String)
            End If
            If (Original_add2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_add2")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_add2,String)
            End If
            If (Original_add3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_add3")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_add3,String)
            End If
            If (Original_add4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_add4")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_add4,String)
            End If
            If (Original_add5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_add5")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_add5,String)
            End If
            If (Original_pcode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_pcode")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_pcode,String)
            End If
            If (Original_bankname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bankname")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_bankname,String)
            End If
            If (Original_bankaccno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_bankaccno")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_bankaccno,String)
            End If
            If (Original_banksort Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_banksort")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_banksort,String)
            End If
            If (Original_vatno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_vatno")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_vatno,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_vatrate,Decimal)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_invoiceno,Decimal)
            If (Original_telno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_telno")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_telno,String)
            End If
            If (Original_faxno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_faxno")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_faxno,String)
            End If
            If (Original_email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_email")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_email,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal accno As Decimal,  _
                    ByVal name As String,  _
                    ByVal add1 As String,  _
                    ByVal add2 As String,  _
                    ByVal add3 As String,  _
                    ByVal add4 As String,  _
                    ByVal add5 As String,  _
                    ByVal pcode As String,  _
                    ByVal bankname As String,  _
                    ByVal bankaccno As String,  _
                    ByVal banksort As String,  _
                    ByVal vatno As String,  _
                    ByVal vatrate As Decimal,  _
                    ByVal invoiceno As Decimal,  _
                    ByVal telno As String,  _
                    ByVal faxno As String,  _
                    ByVal email As String,  _
                    ByVal Original_accno As Decimal,  _
                    ByVal Original_name As String,  _
                    ByVal Original_add1 As String,  _
                    ByVal Original_add2 As String,  _
                    ByVal Original_add3 As String,  _
                    ByVal Original_add4 As String,  _
                    ByVal Original_add5 As String,  _
                    ByVal Original_pcode As String,  _
                    ByVal Original_bankname As String,  _
                    ByVal Original_bankaccno As String,  _
                    ByVal Original_banksort As String,  _
                    ByVal Original_vatno As String,  _
                    ByVal Original_vatrate As Decimal,  _
                    ByVal Original_invoiceno As Decimal,  _
                    ByVal Original_telno As String,  _
                    ByVal Original_faxno As String,  _
                    ByVal Original_email As String,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(accno, name, add1, add2, add3, add4, add5, pcode, bankname, bankaccno, banksort, vatno, vatrate, invoiceno, telno, faxno, email, Original_accno, Original_name, Original_add1, Original_add2, Original_add3, Original_add4, Original_add5, Original_pcode, Original_bankname, Original_bankaccno, Original_banksort, Original_vatno, Original_vatrate, Original_invoiceno, Original_telno, Original_faxno, Original_email, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class markupTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "markup"
            tableMapping.ColumnMappings.Add("supplier", "supplier")
            tableMapping.ColumnMappings.Add("countrycde", "countrycde")
            tableMapping.ColumnMappings.Add("sup_discpc", "sup_discpc")
            tableMapping.ColumnMappings.Add("mupercent", "mupercent")
            tableMapping.ColumnMappings.Add("who", "who")
            tableMapping.ColumnMappings.Add("lupdate", "lupdate")
            tableMapping.ColumnMappings.Add("account", "account")
            tableMapping.ColumnMappings.Add("multi", "multi")
            tableMapping.ColumnMappings.Add("ddays", "ddays")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[markup] WHERE (([supplier] = @Original_supplier) AND ([country"& _ 
                "cde] = @Original_countrycde) AND ([sup_discpc] = @Original_sup_discpc) AND ([mup"& _ 
                "ercent] = @Original_mupercent) AND ([who] = @Original_who) AND ([lupdate] = @Ori"& _ 
                "ginal_lupdate) AND ([account] = @Original_account) AND ([multi] = @Original_mult"& _ 
                "i) AND ([ddays] = @Original_ddays) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_countrycde", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "countrycde", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sup_discpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "sup_discpc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_mupercent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "mupercent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_who", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "who", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_lupdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lupdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_account", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "account", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_multi", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "multi", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ddays", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "ddays", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[markup] ([supplier], [countrycde], [sup_discpc], [mupercent], "& _ 
                "[who], [lupdate], [account], [multi], [ddays]) VALUES (@supplier, @countrycde, @"& _ 
                "sup_discpc, @mupercent, @who, @lupdate, @account, @multi, @ddays);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT suppl"& _ 
                "ier, countrycde, sup_discpc, mupercent, who, lupdate, account, multi, ddays, Uni"& _ 
                "queID FROM markup WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@countrycde", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "countrycde", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sup_discpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "sup_discpc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@mupercent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "mupercent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@who", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "who", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lupdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lupdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@account", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@multi", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "multi", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ddays", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "ddays", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[markup] SET [supplier] = @supplier, [countrycde] = @countrycde, [su"& _ 
                "p_discpc] = @sup_discpc, [mupercent] = @mupercent, [who] = @who, [lupdate] = @lu"& _ 
                "pdate, [account] = @account, [multi] = @multi, [ddays] = @ddays WHERE (([supplie"& _ 
                "r] = @Original_supplier) AND ([countrycde] = @Original_countrycde) AND ([sup_dis"& _ 
                "cpc] = @Original_sup_discpc) AND ([mupercent] = @Original_mupercent) AND ([who] "& _ 
                "= @Original_who) AND ([lupdate] = @Original_lupdate) AND ([account] = @Original_"& _ 
                "account) AND ([multi] = @Original_multi) AND ([ddays] = @Original_ddays) AND ([U"& _ 
                "niqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT supplier, countrycde, sup_discpc, muper"& _ 
                "cent, who, lupdate, account, multi, ddays, UniqueID FROM markup WHERE (UniqueID "& _ 
                "= @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@countrycde", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "countrycde", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sup_discpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "sup_discpc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@mupercent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "mupercent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@who", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "who", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lupdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lupdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@account", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@multi", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "multi", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ddays", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "ddays", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_countrycde", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "countrycde", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sup_discpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "sup_discpc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_mupercent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "mupercent", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_who", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "who", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_lupdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lupdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_account", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "account", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_multi", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "multi", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ddays", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "ddays", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT supplier, countrycde, sup_discpc, mupercent, who, lupdate, account, multi,"& _ 
                " ddays, UniqueID FROM dbo.markup"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.markupDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.markupDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.markupDataTable = New TransvacDataV2DataSet1.markupDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.markupDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "markup")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_supplier As String, ByVal Original_countrycde As String, ByVal Original_sup_discpc As Decimal, ByVal Original_mupercent As Decimal, ByVal Original_who As String, ByVal Original_lupdate As Date, ByVal Original_account As String, ByVal Original_multi As Boolean, ByVal Original_ddays As Decimal, ByVal Original_UniqueID As Long) As Integer
            If (Original_supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_supplier")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_supplier,String)
            End If
            If (Original_countrycde Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_countrycde")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_countrycde,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_sup_discpc,Decimal)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_mupercent,Decimal)
            If (Original_who Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_who")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_who,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_lupdate,Date)
            If (Original_account Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_account")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_account,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_multi,Boolean)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ddays,Decimal)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal supplier As String, ByVal countrycde As String, ByVal sup_discpc As Decimal, ByVal mupercent As Decimal, ByVal who As String, ByVal lupdate As Date, ByVal account As String, ByVal multi As Boolean, ByVal ddays As Decimal) As Integer
            If (supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("supplier")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(supplier,String)
            End If
            If (countrycde Is Nothing) Then
                Throw New Global.System.ArgumentNullException("countrycde")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(countrycde,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(sup_discpc,Decimal)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(mupercent,Decimal)
            If (who Is Nothing) Then
                Throw New Global.System.ArgumentNullException("who")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(who,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(lupdate,Date)
            If (account Is Nothing) Then
                Throw New Global.System.ArgumentNullException("account")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(account,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(multi,Boolean)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(ddays,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal supplier As String,  _
                    ByVal countrycde As String,  _
                    ByVal sup_discpc As Decimal,  _
                    ByVal mupercent As Decimal,  _
                    ByVal who As String,  _
                    ByVal lupdate As Date,  _
                    ByVal account As String,  _
                    ByVal multi As Boolean,  _
                    ByVal ddays As Decimal,  _
                    ByVal Original_supplier As String,  _
                    ByVal Original_countrycde As String,  _
                    ByVal Original_sup_discpc As Decimal,  _
                    ByVal Original_mupercent As Decimal,  _
                    ByVal Original_who As String,  _
                    ByVal Original_lupdate As Date,  _
                    ByVal Original_account As String,  _
                    ByVal Original_multi As Boolean,  _
                    ByVal Original_ddays As Decimal,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("supplier")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(supplier,String)
            End If
            If (countrycde Is Nothing) Then
                Throw New Global.System.ArgumentNullException("countrycde")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(countrycde,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(sup_discpc,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(mupercent,Decimal)
            If (who Is Nothing) Then
                Throw New Global.System.ArgumentNullException("who")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(who,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(lupdate,Date)
            If (account Is Nothing) Then
                Throw New Global.System.ArgumentNullException("account")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(account,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(multi,Boolean)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ddays,Decimal)
            If (Original_supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_supplier")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_supplier,String)
            End If
            If (Original_countrycde Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_countrycde")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_countrycde,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_sup_discpc,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_mupercent,Decimal)
            If (Original_who Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_who")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_who,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_lupdate,Date)
            If (Original_account Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_account")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_account,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_multi,Boolean)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_ddays,Decimal)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal supplier As String,  _
                    ByVal countrycde As String,  _
                    ByVal sup_discpc As Decimal,  _
                    ByVal mupercent As Decimal,  _
                    ByVal who As String,  _
                    ByVal lupdate As Date,  _
                    ByVal account As String,  _
                    ByVal multi As Boolean,  _
                    ByVal ddays As Decimal,  _
                    ByVal Original_supplier As String,  _
                    ByVal Original_countrycde As String,  _
                    ByVal Original_sup_discpc As Decimal,  _
                    ByVal Original_mupercent As Decimal,  _
                    ByVal Original_who As String,  _
                    ByVal Original_lupdate As Date,  _
                    ByVal Original_account As String,  _
                    ByVal Original_multi As Boolean,  _
                    ByVal Original_ddays As Decimal,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(supplier, countrycde, sup_discpc, mupercent, who, lupdate, account, multi, ddays, Original_supplier, Original_countrycde, Original_sup_discpc, Original_mupercent, Original_who, Original_lupdate, Original_account, Original_multi, Original_ddays, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class namesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "names"
            tableMapping.ColumnMappings.Add("name", "name")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[names] WHERE (([name] = @Original_name) AND ([UniqueID] = @Ori"& _ 
                "ginal_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[names] ([name]) VALUES (@name);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT name, UniqueID FROM na"& _ 
                "mes WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[names] SET [name] = @name WHERE (([name] = @Original_name) AND ([Un"& _ 
                "iqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT name, UniqueID FROM names WHERE (UniqueI"& _ 
                "D = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT name, UniqueID FROM dbo.names"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.namesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.namesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.namesDataTable = New TransvacDataV2DataSet1.namesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.namesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "names")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_name As String, ByVal Original_UniqueID As Long) As Integer
            If (Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_name,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal name As String) As Integer
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal name As String, ByVal Original_name As String, ByVal Original_UniqueID As Long, ByVal UniqueID As Long) As Integer
            If (name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("name")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(name,String)
            End If
            If (Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal name As String, ByVal Original_name As String, ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(name, Original_name, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class orddetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "orddetail"
            tableMapping.ColumnMappings.Add("orderno", "orderno")
            tableMapping.ColumnMappings.Add("dinvno", "dinvno")
            tableMapping.ColumnMappings.Add("supplier", "supplier")
            tableMapping.ColumnMappings.Add("partno", "partno")
            tableMapping.ColumnMappings.Add("desc_", "desc_")
            tableMapping.ColumnMappings.Add("qtyord", "qtyord")
            tableMapping.ColumnMappings.Add("qtyrec", "qtyrec")
            tableMapping.ColumnMappings.Add("iicode", "iicode")
            tableMapping.ColumnMappings.Add("locatebin", "locatebin")
            tableMapping.ColumnMappings.Add("price", "price")
            tableMapping.ColumnMappings.Add("owho", "owho")
            tableMapping.ColumnMappings.Add("ddate", "ddate")
            tableMapping.ColumnMappings.Add("otype", "otype")
            tableMapping.ColumnMappings.Add("recno", "recno")
            tableMapping.ColumnMappings.Add("oline", "oline")
            tableMapping.ColumnMappings.Add("acode", "acode")
            tableMapping.ColumnMappings.Add("back2back", "back2back")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[orddetail] WHERE (([orderno] = @Original_orderno) AND ([dinvno"& _ 
                "] = @Original_dinvno) AND ([supplier] = @Original_supplier) AND ([partno] = @Ori"& _ 
                "ginal_partno) AND ([desc_] = @Original_desc_) AND ([qtyord] = @Original_qtyord) "& _ 
                "AND ([qtyrec] = @Original_qtyrec) AND ([iicode] = @Original_iicode) AND ([locate"& _ 
                "bin] = @Original_locatebin) AND ([price] = @Original_price) AND ([owho] = @Origi"& _ 
                "nal_owho) AND ([ddate] = @Original_ddate) AND ([otype] = @Original_otype) AND (["& _ 
                "recno] = @Original_recno) AND ([oline] = @Original_oline) AND ([acode] = @Origin"& _ 
                "al_acode) AND ([back2back] = @Original_back2back) AND ([UniqueID] = @Original_Un"& _ 
                "iqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_orderno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "orderno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dinvno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dinvno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_partno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_desc_", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qtyord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qtyord", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qtyrec", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qtyrec", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_locatebin", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "locatebin", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_owho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "owho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_otype", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "otype", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_recno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "recno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_oline", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oline", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_acode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "acode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_back2back", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "back2back", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[orddetail] ([orderno], [dinvno], [supplier], [partno], [desc_]"& _ 
                ", [qtyord], [qtyrec], [iicode], [locatebin], [price], [owho], [ddate], [otype], "& _ 
                "[recno], [oline], [acode], [back2back]) VALUES (@orderno, @dinvno, @supplier, @p"& _ 
                "artno, @desc_, @qtyord, @qtyrec, @iicode, @locatebin, @price, @owho, @ddate, @ot"& _ 
                "ype, @recno, @oline, @acode, @back2back);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT orderno, dinvno, supplier, par"& _ 
                "tno, desc_, qtyord, qtyrec, iicode, locatebin, price, owho, ddate, otype, recno,"& _ 
                " oline, acode, back2back, UniqueID FROM orddetail WHERE (UniqueID = SCOPE_IDENTI"& _ 
                "TY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@orderno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "orderno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dinvno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dinvno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@partno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@desc_", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qtyord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qtyord", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qtyrec", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qtyrec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@locatebin", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "locatebin", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@owho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "owho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@otype", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "otype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@recno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "recno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@oline", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oline", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@acode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "acode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@back2back", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "back2back", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[orddetail] SET [orderno] = @orderno, [dinvno] = @dinvno, [supplier]"& _ 
                " = @supplier, [partno] = @partno, [desc_] = @desc_, [qtyord] = @qtyord, [qtyrec]"& _ 
                " = @qtyrec, [iicode] = @iicode, [locatebin] = @locatebin, [price] = @price, [owh"& _ 
                "o] = @owho, [ddate] = @ddate, [otype] = @otype, [recno] = @recno, [oline] = @oli"& _ 
                "ne, [acode] = @acode, [back2back] = @back2back WHERE (([orderno] = @Original_ord"& _ 
                "erno) AND ([dinvno] = @Original_dinvno) AND ([supplier] = @Original_supplier) AN"& _ 
                "D ([partno] = @Original_partno) AND ([desc_] = @Original_desc_) AND ([qtyord] = "& _ 
                "@Original_qtyord) AND ([qtyrec] = @Original_qtyrec) AND ([iicode] = @Original_ii"& _ 
                "code) AND ([locatebin] = @Original_locatebin) AND ([price] = @Original_price) AN"& _ 
                "D ([owho] = @Original_owho) AND ([ddate] = @Original_ddate) AND ([otype] = @Orig"& _ 
                "inal_otype) AND ([recno] = @Original_recno) AND ([oline] = @Original_oline) AND "& _ 
                "([acode] = @Original_acode) AND ([back2back] = @Original_back2back) AND ([Unique"& _ 
                "ID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT orderno, dinvno, supplier, partno, desc_, qt"& _ 
                "yord, qtyrec, iicode, locatebin, price, owho, ddate, otype, recno, oline, acode,"& _ 
                " back2back, UniqueID FROM orddetail WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@orderno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "orderno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@dinvno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dinvno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@partno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@desc_", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qtyord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qtyord", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qtyrec", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qtyrec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@locatebin", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "locatebin", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "price", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@owho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "owho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@otype", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "otype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@recno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "recno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@oline", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oline", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@acode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "acode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@back2back", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "back2back", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_orderno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "orderno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_dinvno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "dinvno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_supplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "supplier", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_partno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "partno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_desc_", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "desc_", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qtyord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qtyord", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_qtyrec", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "qtyrec", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_locatebin", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "locatebin", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "price", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_owho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "owho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_otype", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "otype", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_recno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "recno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_oline", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oline", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_acode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "acode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_back2back", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "back2back", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT orderno, dinvno, supplier, partno, desc_, qtyord, qtyrec, iicode, locatebi"& _ 
                "n, price, owho, ddate, otype, recno, oline, acode, back2back, UniqueID FROM dbo."& _ 
                "orddetail"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.orddetailDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.orddetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.orddetailDataTable = New TransvacDataV2DataSet1.orddetailDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.orddetailDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "orddetail")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_orderno As String,  _
                    ByVal Original_dinvno As String,  _
                    ByVal Original_supplier As String,  _
                    ByVal Original_partno As String,  _
                    ByVal Original_desc_ As String,  _
                    ByVal Original_qtyord As Decimal,  _
                    ByVal Original_qtyrec As Decimal,  _
                    ByVal Original_iicode As String,  _
                    ByVal Original_locatebin As String,  _
                    ByVal Original_price As Decimal,  _
                    ByVal Original_owho As String,  _
                    ByVal Original_ddate As Date,  _
                    ByVal Original_otype As String,  _
                    ByVal Original_recno As Decimal,  _
                    ByVal Original_oline As String,  _
                    ByVal Original_acode As String,  _
                    ByVal Original_back2back As Boolean,  _
                    ByVal Original_UniqueID As Long) As Integer
            If (Original_orderno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_orderno")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_orderno,String)
            End If
            If (Original_dinvno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_dinvno")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_dinvno,String)
            End If
            If (Original_supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_supplier")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_supplier,String)
            End If
            If (Original_partno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_partno")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_partno,String)
            End If
            If (Original_desc_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_desc_")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_desc_,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_qtyord,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_qtyrec,Decimal)
            If (Original_iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iicode")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_iicode,String)
            End If
            If (Original_locatebin Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_locatebin")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_locatebin,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_price,Decimal)
            If (Original_owho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_owho")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_owho,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_ddate,Date)
            If (Original_otype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_otype")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_otype,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_recno,Decimal)
            If (Original_oline Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_oline")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_oline,String)
            End If
            If (Original_acode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_acode")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_acode,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_back2back,Boolean)
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal orderno As String,  _
                    ByVal dinvno As String,  _
                    ByVal supplier As String,  _
                    ByVal partno As String,  _
                    ByVal desc_ As String,  _
                    ByVal qtyord As Decimal,  _
                    ByVal qtyrec As Decimal,  _
                    ByVal iicode As String,  _
                    ByVal locatebin As String,  _
                    ByVal price As Decimal,  _
                    ByVal owho As String,  _
                    ByVal ddate As Date,  _
                    ByVal otype As String,  _
                    ByVal recno As Decimal,  _
                    ByVal oline As String,  _
                    ByVal acode As String,  _
                    ByVal back2back As Boolean) As Integer
            If (orderno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("orderno")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(orderno,String)
            End If
            If (dinvno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dinvno")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(dinvno,String)
            End If
            If (supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("supplier")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(supplier,String)
            End If
            If (partno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("partno")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(partno,String)
            End If
            If (desc_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("desc_")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(desc_,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(qtyord,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(qtyrec,Decimal)
            If (iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iicode")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(iicode,String)
            End If
            If (locatebin Is Nothing) Then
                Throw New Global.System.ArgumentNullException("locatebin")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(locatebin,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(price,Decimal)
            If (owho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("owho")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(owho,String)
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(ddate,Date)
            If (otype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("otype")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(otype,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(recno,Decimal)
            If (oline Is Nothing) Then
                Throw New Global.System.ArgumentNullException("oline")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(oline,String)
            End If
            If (acode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("acode")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(acode,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(back2back,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal orderno As String,  _
                    ByVal dinvno As String,  _
                    ByVal supplier As String,  _
                    ByVal partno As String,  _
                    ByVal desc_ As String,  _
                    ByVal qtyord As Decimal,  _
                    ByVal qtyrec As Decimal,  _
                    ByVal iicode As String,  _
                    ByVal locatebin As String,  _
                    ByVal price As Decimal,  _
                    ByVal owho As String,  _
                    ByVal ddate As Date,  _
                    ByVal otype As String,  _
                    ByVal recno As Decimal,  _
                    ByVal oline As String,  _
                    ByVal acode As String,  _
                    ByVal back2back As Boolean,  _
                    ByVal Original_orderno As String,  _
                    ByVal Original_dinvno As String,  _
                    ByVal Original_supplier As String,  _
                    ByVal Original_partno As String,  _
                    ByVal Original_desc_ As String,  _
                    ByVal Original_qtyord As Decimal,  _
                    ByVal Original_qtyrec As Decimal,  _
                    ByVal Original_iicode As String,  _
                    ByVal Original_locatebin As String,  _
                    ByVal Original_price As Decimal,  _
                    ByVal Original_owho As String,  _
                    ByVal Original_ddate As Date,  _
                    ByVal Original_otype As String,  _
                    ByVal Original_recno As Decimal,  _
                    ByVal Original_oline As String,  _
                    ByVal Original_acode As String,  _
                    ByVal Original_back2back As Boolean,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (orderno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("orderno")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(orderno,String)
            End If
            If (dinvno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dinvno")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(dinvno,String)
            End If
            If (supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("supplier")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(supplier,String)
            End If
            If (partno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("partno")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(partno,String)
            End If
            If (desc_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("desc_")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(desc_,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(qtyord,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(qtyrec,Decimal)
            If (iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iicode")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(iicode,String)
            End If
            If (locatebin Is Nothing) Then
                Throw New Global.System.ArgumentNullException("locatebin")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(locatebin,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(price,Decimal)
            If (owho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("owho")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(owho,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ddate,Date)
            If (otype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("otype")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(otype,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(recno,Decimal)
            If (oline Is Nothing) Then
                Throw New Global.System.ArgumentNullException("oline")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(oline,String)
            End If
            If (acode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("acode")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(acode,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(back2back,Boolean)
            If (Original_orderno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_orderno")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_orderno,String)
            End If
            If (Original_dinvno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_dinvno")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_dinvno,String)
            End If
            If (Original_supplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_supplier")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_supplier,String)
            End If
            If (Original_partno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_partno")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_partno,String)
            End If
            If (Original_desc_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_desc_")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_desc_,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_qtyord,Decimal)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_qtyrec,Decimal)
            If (Original_iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iicode")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_iicode,String)
            End If
            If (Original_locatebin Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_locatebin")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_locatebin,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_price,Decimal)
            If (Original_owho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_owho")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_owho,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_ddate,Date)
            If (Original_otype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_otype")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_otype,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_recno,Decimal)
            If (Original_oline Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_oline")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_oline,String)
            End If
            If (Original_acode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_acode")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_acode,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_back2back,Boolean)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal orderno As String,  _
                    ByVal dinvno As String,  _
                    ByVal supplier As String,  _
                    ByVal partno As String,  _
                    ByVal desc_ As String,  _
                    ByVal qtyord As Decimal,  _
                    ByVal qtyrec As Decimal,  _
                    ByVal iicode As String,  _
                    ByVal locatebin As String,  _
                    ByVal price As Decimal,  _
                    ByVal owho As String,  _
                    ByVal ddate As Date,  _
                    ByVal otype As String,  _
                    ByVal recno As Decimal,  _
                    ByVal oline As String,  _
                    ByVal acode As String,  _
                    ByVal back2back As Boolean,  _
                    ByVal Original_orderno As String,  _
                    ByVal Original_dinvno As String,  _
                    ByVal Original_supplier As String,  _
                    ByVal Original_partno As String,  _
                    ByVal Original_desc_ As String,  _
                    ByVal Original_qtyord As Decimal,  _
                    ByVal Original_qtyrec As Decimal,  _
                    ByVal Original_iicode As String,  _
                    ByVal Original_locatebin As String,  _
                    ByVal Original_price As Decimal,  _
                    ByVal Original_owho As String,  _
                    ByVal Original_ddate As Date,  _
                    ByVal Original_otype As String,  _
                    ByVal Original_recno As Decimal,  _
                    ByVal Original_oline As String,  _
                    ByVal Original_acode As String,  _
                    ByVal Original_back2back As Boolean,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(orderno, dinvno, supplier, partno, desc_, qtyord, qtyrec, iicode, locatebin, price, owho, ddate, otype, recno, oline, acode, back2back, Original_orderno, Original_dinvno, Original_supplier, Original_partno, Original_desc_, Original_qtyord, Original_qtyrec, Original_iicode, Original_locatebin, Original_price, Original_owho, Original_ddate, Original_otype, Original_recno, Original_oline, Original_acode, Original_back2back, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class orderheadTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "orderhead"
            tableMapping.ColumnMappings.Add("orderno", "orderno")
            tableMapping.ColumnMappings.Add("osupplier", "osupplier")
            tableMapping.ColumnMappings.Add("osname", "osname")
            tableMapping.ColumnMappings.Add("ocurr", "ocurr")
            tableMapping.ColumnMappings.Add("oadd1", "oadd1")
            tableMapping.ColumnMappings.Add("oadd2", "oadd2")
            tableMapping.ColumnMappings.Add("oadd3", "oadd3")
            tableMapping.ColumnMappings.Add("oadd4", "oadd4")
            tableMapping.ColumnMappings.Add("oadd5", "oadd5")
            tableMapping.ColumnMappings.Add("oscontact", "oscontact")
            tableMapping.ColumnMappings.Add("ostelno", "ostelno")
            tableMapping.ColumnMappings.Add("osfaxno", "osfaxno")
            tableMapping.ColumnMappings.Add("osemail", "osemail")
            tableMapping.ColumnMappings.Add("odate", "odate")
            tableMapping.ColumnMappings.Add("oheader", "oheader")
            tableMapping.ColumnMappings.Add("omemo1", "omemo1")
            tableMapping.ColumnMappings.Add("omemo2", "omemo2")
            tableMapping.ColumnMappings.Add("omemo3", "omemo3")
            tableMapping.ColumnMappings.Add("omemo4", "omemo4")
            tableMapping.ColumnMappings.Add("odisc", "odisc")
            tableMapping.ColumnMappings.Add("owho", "owho")
            tableMapping.ColumnMappings.Add("oinits", "oinits")
            tableMapping.ColumnMappings.Add("osaccount", "osaccount")
            tableMapping.ColumnMappings.Add("oprinted", "oprinted")
            tableMapping.ColumnMappings.Add("ddate", "ddate")
            tableMapping.ColumnMappings.Add("back2back", "back2back")
            tableMapping.ColumnMappings.Add("timestamp_column", "timestamp_column")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[orderhead] WHERE (([timestamp_column] = @Original_timestamp_co"& _ 
                "lumn) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[orderhead] ([orderno], [osupplier], [osname], [ocurr], [oadd1]"& _ 
                ", [oadd2], [oadd3], [oadd4], [oadd5], [oscontact], [ostelno], [osfaxno], [osemai"& _ 
                "l], [odate], [oheader], [omemo1], [omemo2], [omemo3], [omemo4], [odisc], [owho],"& _ 
                " [oinits], [osaccount], [oprinted], [ddate], [back2back]) VALUES (@orderno, @osu"& _ 
                "pplier, @osname, @ocurr, @oadd1, @oadd2, @oadd3, @oadd4, @oadd5, @oscontact, @os"& _ 
                "telno, @osfaxno, @osemail, @odate, @oheader, @omemo1, @omemo2, @omemo3, @omemo4,"& _ 
                " @odisc, @owho, @oinits, @osaccount, @oprinted, @ddate, @back2back);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ord"& _ 
                "erno, osupplier, osname, ocurr, oadd1, oadd2, oadd3, oadd4, oadd5, oscontact, os"& _ 
                "telno, osfaxno, osemail, odate, oheader, omemo1, omemo2, omemo3, omemo4, odisc, "& _ 
                "owho, oinits, osaccount, oprinted, ddate, back2back, timestamp_column, UniqueID "& _ 
                "FROM orderhead WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@orderno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "orderno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@osupplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "osupplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@osname", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "osname", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ocurr", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ocurr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@oadd1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oadd1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@oadd2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oadd2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@oadd3", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oadd3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@oadd4", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oadd4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@oadd5", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oadd5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@oscontact", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oscontact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ostelno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ostelno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@osfaxno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "osfaxno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@osemail", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "osemail", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@odate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "odate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@oheader", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oheader", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@omemo1", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "omemo1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@omemo2", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "omemo2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@omemo3", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "omemo3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@omemo4", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "omemo4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@odisc", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "odisc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@owho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "owho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@oinits", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oinits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@osaccount", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "osaccount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@oprinted", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oprinted", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@back2back", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "back2back", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[orderhead] SET [orderno] = @orderno, [osupplier] = @osupplier, [osn"& _ 
                "ame] = @osname, [ocurr] = @ocurr, [oadd1] = @oadd1, [oadd2] = @oadd2, [oadd3] = "& _ 
                "@oadd3, [oadd4] = @oadd4, [oadd5] = @oadd5, [oscontact] = @oscontact, [ostelno] "& _ 
                "= @ostelno, [osfaxno] = @osfaxno, [osemail] = @osemail, [odate] = @odate, [ohead"& _ 
                "er] = @oheader, [omemo1] = @omemo1, [omemo2] = @omemo2, [omemo3] = @omemo3, [ome"& _ 
                "mo4] = @omemo4, [odisc] = @odisc, [owho] = @owho, [oinits] = @oinits, [osaccount"& _ 
                "] = @osaccount, [oprinted] = @oprinted, [ddate] = @ddate, [back2back] = @back2ba"& _ 
                "ck WHERE (([timestamp_column] = @Original_timestamp_column) AND ([UniqueID] = @O"& _ 
                "riginal_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT orderno, osupplier, osname, ocurr, oadd1, oadd2, oad"& _ 
                "d3, oadd4, oadd5, oscontact, ostelno, osfaxno, osemail, odate, oheader, omemo1, "& _ 
                "omemo2, omemo3, omemo4, odisc, owho, oinits, osaccount, oprinted, ddate, back2ba"& _ 
                "ck, timestamp_column, UniqueID FROM orderhead WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@orderno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "orderno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@osupplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "osupplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@osname", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "osname", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ocurr", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ocurr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@oadd1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oadd1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@oadd2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oadd2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@oadd3", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oadd3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@oadd4", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oadd4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@oadd5", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oadd5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@oscontact", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oscontact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ostelno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ostelno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@osfaxno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "osfaxno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@osemail", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "osemail", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@odate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "odate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@oheader", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oheader", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@omemo1", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "omemo1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@omemo2", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "omemo2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@omemo3", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "omemo3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@omemo4", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "omemo4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@odisc", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "odisc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@owho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "owho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@oinits", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oinits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@osaccount", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "osaccount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@oprinted", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "oprinted", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ddate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ddate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@back2back", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "back2back", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT orderno, osupplier, osname, ocurr, oadd1, oadd2, oadd3, oadd4, oadd5, osco"& _ 
                "ntact, ostelno, osfaxno, osemail, odate, oheader, omemo1, omemo2, omemo3, omemo4"& _ 
                ", odisc, owho, oinits, osaccount, oprinted, ddate, back2back, timestamp_column, "& _ 
                "UniqueID FROM dbo.orderhead"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.orderheadDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.orderheadDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.orderheadDataTable = New TransvacDataV2DataSet1.orderheadDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.orderheadDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "orderhead")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal orderno As String,  _
                    ByVal osupplier As String,  _
                    ByVal osname As String,  _
                    ByVal ocurr As String,  _
                    ByVal oadd1 As String,  _
                    ByVal oadd2 As String,  _
                    ByVal oadd3 As String,  _
                    ByVal oadd4 As String,  _
                    ByVal oadd5 As String,  _
                    ByVal oscontact As String,  _
                    ByVal ostelno As String,  _
                    ByVal osfaxno As String,  _
                    ByVal osemail As String,  _
                    ByVal odate As Date,  _
                    ByVal oheader As String,  _
                    ByVal omemo1 As String,  _
                    ByVal omemo2 As String,  _
                    ByVal omemo3 As String,  _
                    ByVal omemo4 As String,  _
                    ByVal odisc As Boolean,  _
                    ByVal owho As String,  _
                    ByVal oinits As String,  _
                    ByVal osaccount As String,  _
                    ByVal oprinted As Boolean,  _
                    ByVal ddate As Date,  _
                    ByVal back2back As Boolean) As Integer
            If (orderno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("orderno")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(orderno,String)
            End If
            If (osupplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("osupplier")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(osupplier,String)
            End If
            If (osname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("osname")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(osname,String)
            End If
            If (ocurr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ocurr")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ocurr,String)
            End If
            If (oadd1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("oadd1")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(oadd1,String)
            End If
            If (oadd2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("oadd2")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(oadd2,String)
            End If
            If (oadd3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("oadd3")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(oadd3,String)
            End If
            If (oadd4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("oadd4")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(oadd4,String)
            End If
            If (oadd5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("oadd5")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(oadd5,String)
            End If
            If (oscontact Is Nothing) Then
                Throw New Global.System.ArgumentNullException("oscontact")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(oscontact,String)
            End If
            If (ostelno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ostelno")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(ostelno,String)
            End If
            If (osfaxno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("osfaxno")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(osfaxno,String)
            End If
            If (osemail Is Nothing) Then
                Throw New Global.System.ArgumentNullException("osemail")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(osemail,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(odate,Date)
            If (oheader Is Nothing) Then
                Throw New Global.System.ArgumentNullException("oheader")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(oheader,String)
            End If
            If (omemo1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("omemo1")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(omemo1,String)
            End If
            If (omemo2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("omemo2")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(omemo2,String)
            End If
            If (omemo3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("omemo3")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(omemo3,String)
            End If
            If (omemo4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("omemo4")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(omemo4,String)
            End If
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(odisc,Boolean)
            If (owho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("owho")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(owho,String)
            End If
            If (oinits Is Nothing) Then
                Throw New Global.System.ArgumentNullException("oinits")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(oinits,String)
            End If
            If (osaccount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("osaccount")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(osaccount,String)
            End If
            Me.Adapter.InsertCommand.Parameters(23).Value = CType(oprinted,Boolean)
            Me.Adapter.InsertCommand.Parameters(24).Value = CType(ddate,Date)
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(back2back,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal orderno As String,  _
                    ByVal osupplier As String,  _
                    ByVal osname As String,  _
                    ByVal ocurr As String,  _
                    ByVal oadd1 As String,  _
                    ByVal oadd2 As String,  _
                    ByVal oadd3 As String,  _
                    ByVal oadd4 As String,  _
                    ByVal oadd5 As String,  _
                    ByVal oscontact As String,  _
                    ByVal ostelno As String,  _
                    ByVal osfaxno As String,  _
                    ByVal osemail As String,  _
                    ByVal odate As Date,  _
                    ByVal oheader As String,  _
                    ByVal omemo1 As String,  _
                    ByVal omemo2 As String,  _
                    ByVal omemo3 As String,  _
                    ByVal omemo4 As String,  _
                    ByVal odisc As Boolean,  _
                    ByVal owho As String,  _
                    ByVal oinits As String,  _
                    ByVal osaccount As String,  _
                    ByVal oprinted As Boolean,  _
                    ByVal ddate As Date,  _
                    ByVal back2back As Boolean,  _
                    ByVal Original_timestamp_column() As Byte,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (orderno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("orderno")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(orderno,String)
            End If
            If (osupplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("osupplier")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(osupplier,String)
            End If
            If (osname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("osname")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(osname,String)
            End If
            If (ocurr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ocurr")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ocurr,String)
            End If
            If (oadd1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("oadd1")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(oadd1,String)
            End If
            If (oadd2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("oadd2")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(oadd2,String)
            End If
            If (oadd3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("oadd3")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(oadd3,String)
            End If
            If (oadd4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("oadd4")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(oadd4,String)
            End If
            If (oadd5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("oadd5")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(oadd5,String)
            End If
            If (oscontact Is Nothing) Then
                Throw New Global.System.ArgumentNullException("oscontact")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(oscontact,String)
            End If
            If (ostelno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ostelno")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ostelno,String)
            End If
            If (osfaxno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("osfaxno")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(osfaxno,String)
            End If
            If (osemail Is Nothing) Then
                Throw New Global.System.ArgumentNullException("osemail")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(osemail,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(odate,Date)
            If (oheader Is Nothing) Then
                Throw New Global.System.ArgumentNullException("oheader")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(oheader,String)
            End If
            If (omemo1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("omemo1")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(omemo1,String)
            End If
            If (omemo2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("omemo2")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(omemo2,String)
            End If
            If (omemo3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("omemo3")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(omemo3,String)
            End If
            If (omemo4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("omemo4")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(omemo4,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(odisc,Boolean)
            If (owho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("owho")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(owho,String)
            End If
            If (oinits Is Nothing) Then
                Throw New Global.System.ArgumentNullException("oinits")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(oinits,String)
            End If
            If (osaccount Is Nothing) Then
                Throw New Global.System.ArgumentNullException("osaccount")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(osaccount,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(oprinted,Boolean)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(ddate,Date)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(back2back,Boolean)
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal orderno As String,  _
                    ByVal osupplier As String,  _
                    ByVal osname As String,  _
                    ByVal ocurr As String,  _
                    ByVal oadd1 As String,  _
                    ByVal oadd2 As String,  _
                    ByVal oadd3 As String,  _
                    ByVal oadd4 As String,  _
                    ByVal oadd5 As String,  _
                    ByVal oscontact As String,  _
                    ByVal ostelno As String,  _
                    ByVal osfaxno As String,  _
                    ByVal osemail As String,  _
                    ByVal odate As Date,  _
                    ByVal oheader As String,  _
                    ByVal omemo1 As String,  _
                    ByVal omemo2 As String,  _
                    ByVal omemo3 As String,  _
                    ByVal omemo4 As String,  _
                    ByVal odisc As Boolean,  _
                    ByVal owho As String,  _
                    ByVal oinits As String,  _
                    ByVal osaccount As String,  _
                    ByVal oprinted As Boolean,  _
                    ByVal ddate As Date,  _
                    ByVal back2back As Boolean,  _
                    ByVal Original_timestamp_column() As Byte,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(orderno, osupplier, osname, ocurr, oadd1, oadd2, oadd3, oadd4, oadd5, oscontact, ostelno, osfaxno, osemail, odate, oheader, omemo1, omemo2, omemo3, omemo4, odisc, owho, oinits, osaccount, oprinted, ddate, back2back, Original_timestamp_column, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class orderlineTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "orderline"
            tableMapping.ColumnMappings.Add("lorderno", "lorderno")
            tableMapping.ColumnMappings.Add("llineno", "llineno")
            tableMapping.ColumnMappings.Add("lpartno", "lpartno")
            tableMapping.ColumnMappings.Add("ldesc", "ldesc")
            tableMapping.ColumnMappings.Add("lqtyord", "lqtyord")
            tableMapping.ColumnMappings.Add("lqtypart", "lqtypart")
            tableMapping.ColumnMappings.Add("lqtyrec", "lqtyrec")
            tableMapping.ColumnMappings.Add("lprice", "lprice")
            tableMapping.ColumnMappings.Add("leprice", "leprice")
            tableMapping.ColumnMappings.Add("liicode", "liicode")
            tableMapping.ColumnMappings.Add("llocatebin", "llocatebin")
            tableMapping.ColumnMappings.Add("lolinememo", "lolinememo")
            tableMapping.ColumnMappings.Add("lnonstock", "lnonstock")
            tableMapping.ColumnMappings.Add("lodate", "lodate")
            tableMapping.ColumnMappings.Add("lrdate", "lrdate")
            tableMapping.ColumnMappings.Add("lback2back", "lback2back")
            tableMapping.ColumnMappings.Add("timestamp_column", "timestamp_column")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[orderline] WHERE (([timestamp_column] = @Original_timestamp_co"& _ 
                "lumn) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[orderline] ([lorderno], [llineno], [lpartno], [ldesc], [lqtyor"& _ 
                "d], [lqtypart], [lqtyrec], [lprice], [leprice], [liicode], [llocatebin], [loline"& _ 
                "memo], [lnonstock], [lodate], [lrdate], [lback2back]) VALUES (@lorderno, @llinen"& _ 
                "o, @lpartno, @ldesc, @lqtyord, @lqtypart, @lqtyrec, @lprice, @leprice, @liicode,"& _ 
                " @llocatebin, @lolinememo, @lnonstock, @lodate, @lrdate, @lback2back);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT l"& _ 
                "orderno, llineno, lpartno, ldesc, lqtyord, lqtypart, lqtyrec, lprice, leprice, l"& _ 
                "iicode, llocatebin, lolinememo, lnonstock, lodate, lrdate, lback2back, timestamp"& _ 
                "_column, UniqueID FROM orderline WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lorderno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lorderno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@llineno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "llineno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lpartno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lpartno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ldesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lqtyord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 0, "lqtyord", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lqtypart", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 0, "lqtypart", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lqtyrec", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 0, "lqtyrec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "lprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@leprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 2, "leprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@liicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "liicode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@llocatebin", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "llocatebin", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lolinememo", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lolinememo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lnonstock", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lnonstock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lodate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lodate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lrdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lrdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lback2back", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lback2back", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[orderline] SET [lorderno] = @lorderno, [llineno] = @llineno, [lpart"& _ 
                "no] = @lpartno, [ldesc] = @ldesc, [lqtyord] = @lqtyord, [lqtypart] = @lqtypart, "& _ 
                "[lqtyrec] = @lqtyrec, [lprice] = @lprice, [leprice] = @leprice, [liicode] = @lii"& _ 
                "code, [llocatebin] = @llocatebin, [lolinememo] = @lolinememo, [lnonstock] = @lno"& _ 
                "nstock, [lodate] = @lodate, [lrdate] = @lrdate, [lback2back] = @lback2back WHERE"& _ 
                " (([timestamp_column] = @Original_timestamp_column) AND ([UniqueID] = @Original_"& _ 
                "UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT lorderno, llineno, lpartno, ldesc, lqtyord, lqtypart, lqtyre"& _ 
                "c, lprice, leprice, liicode, llocatebin, lolinememo, lnonstock, lodate, lrdate, "& _ 
                "lback2back, timestamp_column, UniqueID FROM orderline WHERE (UniqueID = @UniqueI"& _ 
                "D)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lorderno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lorderno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@llineno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "llineno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lpartno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lpartno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ldesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lqtyord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 0, "lqtyord", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lqtypart", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 0, "lqtypart", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lqtyrec", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 0, "lqtyrec", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "lprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@leprice", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 2, "leprice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@liicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "liicode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@llocatebin", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "llocatebin", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lolinememo", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lolinememo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lnonstock", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lnonstock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lodate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lodate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lrdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lrdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lback2back", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lback2back", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT lorderno, llineno, lpartno, ldesc, lqtyord, lqtypart, lqtyrec, lprice, lep"& _ 
                "rice, liicode, llocatebin, lolinememo, lnonstock, lodate, lrdate, lback2back, ti"& _ 
                "mestamp_column, UniqueID FROM dbo.orderline"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.orderlineDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.orderlineDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.orderlineDataTable = New TransvacDataV2DataSet1.orderlineDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.orderlineDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "orderline")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal lorderno As String,  _
                    ByVal llineno As String,  _
                    ByVal lpartno As String,  _
                    ByVal ldesc As String,  _
                    ByVal lqtyord As Decimal,  _
                    ByVal lqtypart As Decimal,  _
                    ByVal lqtyrec As Decimal,  _
                    ByVal lprice As Decimal,  _
                    ByVal leprice As Decimal,  _
                    ByVal liicode As String,  _
                    ByVal llocatebin As String,  _
                    ByVal lolinememo As String,  _
                    ByVal lnonstock As Boolean,  _
                    ByVal lodate As Date,  _
                    ByVal lrdate As Date,  _
                    ByVal lback2back As Boolean) As Integer
            If (lorderno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lorderno")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(lorderno,String)
            End If
            If (llineno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("llineno")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(llineno,String)
            End If
            If (lpartno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lpartno")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(lpartno,String)
            End If
            If (ldesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ldesc")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ldesc,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(lqtyord,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(lqtypart,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(lqtyrec,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(lprice,Decimal)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(leprice,Decimal)
            If (liicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("liicode")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(liicode,String)
            End If
            If (llocatebin Is Nothing) Then
                Throw New Global.System.ArgumentNullException("llocatebin")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(llocatebin,String)
            End If
            If (lolinememo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lolinememo")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(lolinememo,String)
            End If
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(lnonstock,Boolean)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(lodate,Date)
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(lrdate,Date)
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(lback2back,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal lorderno As String,  _
                    ByVal llineno As String,  _
                    ByVal lpartno As String,  _
                    ByVal ldesc As String,  _
                    ByVal lqtyord As Decimal,  _
                    ByVal lqtypart As Decimal,  _
                    ByVal lqtyrec As Decimal,  _
                    ByVal lprice As Decimal,  _
                    ByVal leprice As Decimal,  _
                    ByVal liicode As String,  _
                    ByVal llocatebin As String,  _
                    ByVal lolinememo As String,  _
                    ByVal lnonstock As Boolean,  _
                    ByVal lodate As Date,  _
                    ByVal lrdate As Date,  _
                    ByVal lback2back As Boolean,  _
                    ByVal Original_timestamp_column() As Byte,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (lorderno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lorderno")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(lorderno,String)
            End If
            If (llineno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("llineno")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(llineno,String)
            End If
            If (lpartno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lpartno")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(lpartno,String)
            End If
            If (ldesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ldesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ldesc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(lqtyord,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(lqtypart,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(lqtyrec,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(lprice,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(leprice,Decimal)
            If (liicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("liicode")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(liicode,String)
            End If
            If (llocatebin Is Nothing) Then
                Throw New Global.System.ArgumentNullException("llocatebin")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(llocatebin,String)
            End If
            If (lolinememo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("lolinememo")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(lolinememo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(lnonstock,Boolean)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(lodate,Date)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(lrdate,Date)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(lback2back,Boolean)
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal lorderno As String,  _
                    ByVal llineno As String,  _
                    ByVal lpartno As String,  _
                    ByVal ldesc As String,  _
                    ByVal lqtyord As Decimal,  _
                    ByVal lqtypart As Decimal,  _
                    ByVal lqtyrec As Decimal,  _
                    ByVal lprice As Decimal,  _
                    ByVal leprice As Decimal,  _
                    ByVal liicode As String,  _
                    ByVal llocatebin As String,  _
                    ByVal lolinememo As String,  _
                    ByVal lnonstock As Boolean,  _
                    ByVal lodate As Date,  _
                    ByVal lrdate As Date,  _
                    ByVal lback2back As Boolean,  _
                    ByVal Original_timestamp_column() As Byte,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(lorderno, llineno, lpartno, ldesc, lqtyord, lqtypart, lqtyrec, lprice, leprice, liicode, llocatebin, lolinememo, lnonstock, lodate, lrdate, lback2back, Original_timestamp_column, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class qictrlTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "qictrl"
            tableMapping.ColumnMappings.Add("quoteno", "quoteno")
            tableMapping.ColumnMappings.Add("qdate", "qdate")
            tableMapping.ColumnMappings.Add("cust_ref", "cust_ref")
            tableMapping.ColumnMappings.Add("cust_date", "cust_date")
            tableMapping.ColumnMappings.Add("cdeldate", "cdeldate")
            tableMapping.ColumnMappings.Add("accountno", "accountno")
            tableMapping.ColumnMappings.Add("s_name", "s_name")
            tableMapping.ColumnMappings.Add("contact", "contact")
            tableMapping.ColumnMappings.Add("holdnote", "holdnote")
            tableMapping.ColumnMappings.Add("invoice", "invoice")
            tableMapping.ColumnMappings.Add("idate", "idate")
            tableMapping.ColumnMappings.Add("ediscpc", "ediscpc")
            tableMapping.ColumnMappings.Add("ediscount", "ediscount")
            tableMapping.ColumnMappings.Add("iaddr", "iaddr")
            tableMapping.ColumnMappings.Add("daddr", "daddr")
            tableMapping.ColumnMappings.Add("srequmnt", "srequmnt")
            tableMapping.ColumnMappings.Add("termdays", "termdays")
            tableMapping.ColumnMappings.Add("terms", "terms")
            tableMapping.ColumnMappings.Add("shipment", "shipment")
            tableMapping.ColumnMappings.Add("carriage", "carriage")
            tableMapping.ColumnMappings.Add("packing", "packing")
            tableMapping.ColumnMappings.Add("vatpc", "vatpc")
            tableMapping.ColumnMappings.Add("eurovat", "eurovat")
            tableMapping.ColumnMappings.Add("vatamt", "vatamt")
            tableMapping.ColumnMappings.Add("t_parts", "t_parts")
            tableMapping.ColumnMappings.Add("t_cost", "t_cost")
            tableMapping.ColumnMappings.Add("s_pdate", "s_pdate")
            tableMapping.ColumnMappings.Add("s_paid", "s_paid")
            tableMapping.ColumnMappings.Add("cpercent", "cpercent")
            tableMapping.ColumnMappings.Add("ccard", "ccard")
            tableMapping.ColumnMappings.Add("s_adjust", "s_adjust")
            tableMapping.ColumnMappings.Add("s_acode", "s_acode")
            tableMapping.ColumnMappings.Add("entrykd", "entrykd")
            tableMapping.ColumnMappings.Add("invcurcy", "invcurcy")
            tableMapping.ColumnMappings.Add("invrexch", "invrexch")
            tableMapping.ColumnMappings.Add("back2back", "back2back")
            tableMapping.ColumnMappings.Add("phone", "phone")
            tableMapping.ColumnMappings.Add("fax", "fax")
            tableMapping.ColumnMappings.Add("email", "email")
            tableMapping.ColumnMappings.Add("bustype", "bustype")
            tableMapping.ColumnMappings.Add("qiwho", "qiwho")
            tableMapping.ColumnMappings.Add("qiuse", "qiuse")
            tableMapping.ColumnMappings.Add("serv", "serv")
            tableMapping.ColumnMappings.Add("conf", "conf")
            tableMapping.ColumnMappings.Add("timestamp_column", "timestamp_column")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[qictrl] WHERE (([timestamp_column] = @Original_timestamp_colum"& _ 
                "n) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[qictrl] ([quoteno], [qdate], [cust_ref], [cust_date], [cdeldat"& _ 
                "e], [accountno], [s_name], [contact], [holdnote], [invoice], [idate], [ediscpc],"& _ 
                " [ediscount], [iaddr], [daddr], [srequmnt], [termdays], [terms], [shipment], [ca"& _ 
                "rriage], [packing], [vatpc], [eurovat], [vatamt], [t_parts], [t_cost], [s_pdate]"& _ 
                ", [s_paid], [cpercent], [ccard], [s_adjust], [s_acode], [entrykd], [invcurcy], ["& _ 
                "invrexch], [back2back], [phone], [fax], [email], [bustype], [qiwho], [qiuse], [s"& _ 
                "erv], [conf]) VALUES (@quoteno, @qdate, @cust_ref, @cust_date, @cdeldate, @accou"& _ 
                "ntno, @s_name, @contact, @holdnote, @invoice, @idate, @ediscpc, @ediscount, @iad"& _ 
                "dr, @daddr, @srequmnt, @termdays, @terms, @shipment, @carriage, @packing, @vatpc"& _ 
                ", @eurovat, @vatamt, @t_parts, @t_cost, @s_pdate, @s_paid, @cpercent, @ccard, @s"& _ 
                "_adjust, @s_acode, @entrykd, @invcurcy, @invrexch, @back2back, @phone, @fax, @em"& _ 
                "ail, @bustype, @qiwho, @qiuse, @serv, @conf);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT quoteno, qdate, cust_ref, "& _ 
                "cust_date, cdeldate, accountno, s_name, contact, holdnote, invoice, idate, edisc"& _ 
                "pc, ediscount, iaddr, daddr, srequmnt, termdays, terms, shipment, carriage, pack"& _ 
                "ing, vatpc, eurovat, vatamt, t_parts, t_cost, s_pdate, s_paid, cpercent, ccard, "& _ 
                "s_adjust, s_acode, entrykd, invcurcy, invrexch, back2back, phone, fax, email, bu"& _ 
                "stype, qiwho, qiuse, serv, conf, timestamp_column, UniqueID FROM qictrl WHERE (U"& _ 
                "niqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quoteno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quoteno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cust_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cust_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cust_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cust_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cdeldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cdeldate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@accountno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "accountno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@contact", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "contact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@holdnote", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "holdnote", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invoice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invoice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ediscpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 0, "ediscpc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ediscount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "ediscount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iaddr", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iaddr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@daddr", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "daddr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srequmnt", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "srequmnt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@termdays", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 0, "termdays", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@terms", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "terms", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@shipment", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "shipment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@carriage", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "carriage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@packing", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "packing", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 1, "vatpc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eurovat", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eurovat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatamt", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "vatamt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@t_parts", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "t_parts", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@t_cost", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "t_cost", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_pdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_pdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_paid", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "s_paid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cpercent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 1, "cpercent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ccard", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "ccard", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_adjust", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "s_adjust", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_acode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_acode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@entrykd", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "entrykd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invcurcy", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invcurcy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invrexch", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "invrexch", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@back2back", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "back2back", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@phone", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fax", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@email", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bustype", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bustype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qiwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qiwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qiuse", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qiuse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@serv", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "serv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@conf", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "conf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[qictrl] SET [quoteno] = @quoteno, [qdate] = @qdate, [cust_ref] = @c"& _ 
                "ust_ref, [cust_date] = @cust_date, [cdeldate] = @cdeldate, [accountno] = @accoun"& _ 
                "tno, [s_name] = @s_name, [contact] = @contact, [holdnote] = @holdnote, [invoice]"& _ 
                " = @invoice, [idate] = @idate, [ediscpc] = @ediscpc, [ediscount] = @ediscount, ["& _ 
                "iaddr] = @iaddr, [daddr] = @daddr, [srequmnt] = @srequmnt, [termdays] = @termday"& _ 
                "s, [terms] = @terms, [shipment] = @shipment, [carriage] = @carriage, [packing] ="& _ 
                " @packing, [vatpc] = @vatpc, [eurovat] = @eurovat, [vatamt] = @vatamt, [t_parts]"& _ 
                " = @t_parts, [t_cost] = @t_cost, [s_pdate] = @s_pdate, [s_paid] = @s_paid, [cper"& _ 
                "cent] = @cpercent, [ccard] = @ccard, [s_adjust] = @s_adjust, [s_acode] = @s_acod"& _ 
                "e, [entrykd] = @entrykd, [invcurcy] = @invcurcy, [invrexch] = @invrexch, [back2b"& _ 
                "ack] = @back2back, [phone] = @phone, [fax] = @fax, [email] = @email, [bustype] ="& _ 
                " @bustype, [qiwho] = @qiwho, [qiuse] = @qiuse, [serv] = @serv, [conf] = @conf WH"& _ 
                "ERE (([timestamp_column] = @Original_timestamp_column) AND ([UniqueID] = @Origin"& _ 
                "al_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT quoteno, qdate, cust_ref, cust_date, cdeldate, accountno,"& _ 
                " s_name, contact, holdnote, invoice, idate, ediscpc, ediscount, iaddr, daddr, sr"& _ 
                "equmnt, termdays, terms, shipment, carriage, packing, vatpc, eurovat, vatamt, t_"& _ 
                "parts, t_cost, s_pdate, s_paid, cpercent, ccard, s_adjust, s_acode, entrykd, inv"& _ 
                "curcy, invrexch, back2back, phone, fax, email, bustype, qiwho, qiuse, serv, conf"& _ 
                ", timestamp_column, UniqueID FROM qictrl WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quoteno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quoteno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cust_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cust_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cust_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cust_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cdeldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cdeldate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@accountno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "accountno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@contact", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "contact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@holdnote", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "holdnote", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invoice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invoice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ediscpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 0, "ediscpc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ediscount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "ediscount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iaddr", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iaddr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@daddr", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "daddr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srequmnt", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "srequmnt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@termdays", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 0, "termdays", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@terms", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "terms", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@shipment", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "shipment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@carriage", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "carriage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@packing", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "packing", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 1, "vatpc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eurovat", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eurovat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatamt", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "vatamt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@t_parts", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "t_parts", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@t_cost", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "t_cost", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_pdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_pdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_paid", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "s_paid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cpercent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 1, "cpercent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ccard", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "ccard", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_adjust", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "s_adjust", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_acode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_acode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@entrykd", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "entrykd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invcurcy", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invcurcy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invrexch", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "invrexch", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@back2back", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "back2back", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@phone", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fax", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@email", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bustype", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bustype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qiwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qiwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qiuse", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qiuse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@serv", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "serv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@conf", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "conf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT quoteno, qdate, cust_ref, cust_date, cdeldate, accountno, s_name, contact,"& _ 
                " holdnote, invoice, idate, ediscpc, ediscount, iaddr, daddr, srequmnt, termdays,"& _ 
                " terms, shipment, carriage, packing, vatpc, eurovat, vatamt, t_parts, t_cost, s_"& _ 
                "pdate, s_paid, cpercent, ccard, s_adjust, s_acode, entrykd, invcurcy, invrexch, "& _ 
                "back2back, phone, fax, email, bustype, qiwho, qiuse, serv, conf, timestamp_colum"& _ 
                "n, UniqueID FROM dbo.qictrl"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        quoteno, qdate, cust_ref, cust_date, cdeldate, accountno, s_name, c"& _ 
                "ontact, holdnote, invoice, idate, ediscpc, ediscount, iaddr, daddr, srequmnt, te"& _ 
                "rmdays, terms, shipment, carriage, packing, vatpc, eurovat, vatamt, t_parts, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                        t_cost, s_pdate, s_paid, cpercent, ccard, s_adjust, s_ac"& _ 
                "ode, entrykd, invcurcy, invrexch, back2back, phone, fax, email, bustype, qiwho, "& _ 
                "qiuse, serv, conf, timestamp_column, UniqueID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            qictrl"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE    "& _ 
                "    (accountno LIKE @Param1 + '%')"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.[Char], 5, Global.System.Data.ParameterDirection.Input, 0, 0, "accountno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.qictrlDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.qictrlDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.qictrlDataTable = New TransvacDataV2DataSet1.qictrlDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByQuoteList(ByVal dataTable As TransvacDataV2DataSet1.qictrlDataTable, ByVal Param1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByQuoteList(ByVal Param1 As String) As TransvacDataV2DataSet1.qictrlDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            Dim dataTable As TransvacDataV2DataSet1.qictrlDataTable = New TransvacDataV2DataSet1.qictrlDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.qictrlDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "qictrl")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal quoteno As String,  _
                    ByVal qdate As Date,  _
                    ByVal cust_ref As String,  _
                    ByVal cust_date As Date,  _
                    ByVal cdeldate As Date,  _
                    ByVal accountno As String,  _
                    ByVal s_name As String,  _
                    ByVal contact As String,  _
                    ByVal holdnote As String,  _
                    ByVal invoice As String,  _
                    ByVal idate As Date,  _
                    ByVal ediscpc As Decimal,  _
                    ByVal ediscount As Decimal,  _
                    ByVal iaddr As String,  _
                    ByVal daddr As String,  _
                    ByVal srequmnt As String,  _
                    ByVal termdays As Decimal,  _
                    ByVal terms As String,  _
                    ByVal shipment As String,  _
                    ByVal carriage As Decimal,  _
                    ByVal packing As Decimal,  _
                    ByVal vatpc As Decimal,  _
                    ByVal eurovat As String,  _
                    ByVal vatamt As Decimal,  _
                    ByVal t_parts As Decimal,  _
                    ByVal t_cost As Decimal,  _
                    ByVal s_pdate As Date,  _
                    ByVal s_paid As Decimal,  _
                    ByVal cpercent As Decimal,  _
                    ByVal ccard As Decimal,  _
                    ByVal s_adjust As Decimal,  _
                    ByVal s_acode As String,  _
                    ByVal entrykd As String,  _
                    ByVal invcurcy As String,  _
                    ByVal invrexch As Decimal,  _
                    ByVal back2back As Boolean,  _
                    ByVal phone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal bustype As String,  _
                    ByVal qiwho As String,  _
                    ByVal qiuse As String,  _
                    ByVal serv As Boolean,  _
                    ByVal conf As Boolean) As Integer
            If (quoteno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("quoteno")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(quoteno,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(qdate,Date)
            If (cust_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cust_ref")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(cust_ref,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(cust_date,Date)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(cdeldate,Date)
            If (accountno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("accountno")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(accountno,String)
            End If
            If (s_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s_name")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(s_name,String)
            End If
            If (contact Is Nothing) Then
                Throw New Global.System.ArgumentNullException("contact")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(contact,String)
            End If
            If (holdnote Is Nothing) Then
                Throw New Global.System.ArgumentNullException("holdnote")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(holdnote,String)
            End If
            If (invoice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("invoice")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(invoice,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(idate,Date)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(ediscpc,Decimal)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(ediscount,Decimal)
            If (iaddr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iaddr")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(iaddr,String)
            End If
            If (daddr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("daddr")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(daddr,String)
            End If
            If (srequmnt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srequmnt")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(srequmnt,String)
            End If
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(termdays,Decimal)
            If (terms Is Nothing) Then
                Throw New Global.System.ArgumentNullException("terms")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(terms,String)
            End If
            If (shipment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("shipment")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(shipment,String)
            End If
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(carriage,Decimal)
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(packing,Decimal)
            Me.Adapter.InsertCommand.Parameters(21).Value = CType(vatpc,Decimal)
            If (eurovat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("eurovat")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(eurovat,String)
            End If
            Me.Adapter.InsertCommand.Parameters(23).Value = CType(vatamt,Decimal)
            Me.Adapter.InsertCommand.Parameters(24).Value = CType(t_parts,Decimal)
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(t_cost,Decimal)
            Me.Adapter.InsertCommand.Parameters(26).Value = CType(s_pdate,Date)
            Me.Adapter.InsertCommand.Parameters(27).Value = CType(s_paid,Decimal)
            Me.Adapter.InsertCommand.Parameters(28).Value = CType(cpercent,Decimal)
            Me.Adapter.InsertCommand.Parameters(29).Value = CType(ccard,Decimal)
            Me.Adapter.InsertCommand.Parameters(30).Value = CType(s_adjust,Decimal)
            If (s_acode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s_acode")
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(s_acode,String)
            End If
            If (entrykd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("entrykd")
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(entrykd,String)
            End If
            If (invcurcy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("invcurcy")
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(invcurcy,String)
            End If
            Me.Adapter.InsertCommand.Parameters(34).Value = CType(invrexch,Decimal)
            Me.Adapter.InsertCommand.Parameters(35).Value = CType(back2back,Boolean)
            If (phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("phone")
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(phone,String)
            End If
            If (fax Is Nothing) Then
                Throw New Global.System.ArgumentNullException("fax")
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(fax,String)
            End If
            If (email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("email")
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(email,String)
            End If
            If (bustype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bustype")
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(bustype,String)
            End If
            If (qiwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qiwho")
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(qiwho,String)
            End If
            If (qiuse Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qiuse")
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(qiuse,String)
            End If
            Me.Adapter.InsertCommand.Parameters(42).Value = CType(serv,Boolean)
            Me.Adapter.InsertCommand.Parameters(43).Value = CType(conf,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal quoteno As String,  _
                    ByVal qdate As Date,  _
                    ByVal cust_ref As String,  _
                    ByVal cust_date As Date,  _
                    ByVal cdeldate As Date,  _
                    ByVal accountno As String,  _
                    ByVal s_name As String,  _
                    ByVal contact As String,  _
                    ByVal holdnote As String,  _
                    ByVal invoice As String,  _
                    ByVal idate As Date,  _
                    ByVal ediscpc As Decimal,  _
                    ByVal ediscount As Decimal,  _
                    ByVal iaddr As String,  _
                    ByVal daddr As String,  _
                    ByVal srequmnt As String,  _
                    ByVal termdays As Decimal,  _
                    ByVal terms As String,  _
                    ByVal shipment As String,  _
                    ByVal carriage As Decimal,  _
                    ByVal packing As Decimal,  _
                    ByVal vatpc As Decimal,  _
                    ByVal eurovat As String,  _
                    ByVal vatamt As Decimal,  _
                    ByVal t_parts As Decimal,  _
                    ByVal t_cost As Decimal,  _
                    ByVal s_pdate As Date,  _
                    ByVal s_paid As Decimal,  _
                    ByVal cpercent As Decimal,  _
                    ByVal ccard As Decimal,  _
                    ByVal s_adjust As Decimal,  _
                    ByVal s_acode As String,  _
                    ByVal entrykd As String,  _
                    ByVal invcurcy As String,  _
                    ByVal invrexch As Decimal,  _
                    ByVal back2back As Boolean,  _
                    ByVal phone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal bustype As String,  _
                    ByVal qiwho As String,  _
                    ByVal qiuse As String,  _
                    ByVal serv As Boolean,  _
                    ByVal conf As Boolean,  _
                    ByVal Original_timestamp_column() As Byte,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (quoteno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("quoteno")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(quoteno,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(qdate,Date)
            If (cust_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cust_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(cust_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(cust_date,Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(cdeldate,Date)
            If (accountno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("accountno")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(accountno,String)
            End If
            If (s_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(s_name,String)
            End If
            If (contact Is Nothing) Then
                Throw New Global.System.ArgumentNullException("contact")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(contact,String)
            End If
            If (holdnote Is Nothing) Then
                Throw New Global.System.ArgumentNullException("holdnote")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(holdnote,String)
            End If
            If (invoice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("invoice")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(invoice,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(idate,Date)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ediscpc,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ediscount,Decimal)
            If (iaddr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iaddr")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(iaddr,String)
            End If
            If (daddr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("daddr")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(daddr,String)
            End If
            If (srequmnt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srequmnt")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(srequmnt,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(termdays,Decimal)
            If (terms Is Nothing) Then
                Throw New Global.System.ArgumentNullException("terms")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(terms,String)
            End If
            If (shipment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("shipment")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(shipment,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(carriage,Decimal)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(packing,Decimal)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(vatpc,Decimal)
            If (eurovat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("eurovat")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(eurovat,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(vatamt,Decimal)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(t_parts,Decimal)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(t_cost,Decimal)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(s_pdate,Date)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(s_paid,Decimal)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(cpercent,Decimal)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(ccard,Decimal)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(s_adjust,Decimal)
            If (s_acode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s_acode")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(s_acode,String)
            End If
            If (entrykd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("entrykd")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(entrykd,String)
            End If
            If (invcurcy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("invcurcy")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(invcurcy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(invrexch,Decimal)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(back2back,Boolean)
            If (phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(phone,String)
            End If
            If (fax Is Nothing) Then
                Throw New Global.System.ArgumentNullException("fax")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(fax,String)
            End If
            If (email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("email")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(email,String)
            End If
            If (bustype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bustype")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(bustype,String)
            End If
            If (qiwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qiwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(qiwho,String)
            End If
            If (qiuse Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qiuse")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(qiuse,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(serv,Boolean)
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(conf,Boolean)
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal quoteno As String,  _
                    ByVal qdate As Date,  _
                    ByVal cust_ref As String,  _
                    ByVal cust_date As Date,  _
                    ByVal cdeldate As Date,  _
                    ByVal accountno As String,  _
                    ByVal s_name As String,  _
                    ByVal contact As String,  _
                    ByVal holdnote As String,  _
                    ByVal invoice As String,  _
                    ByVal idate As Date,  _
                    ByVal ediscpc As Decimal,  _
                    ByVal ediscount As Decimal,  _
                    ByVal iaddr As String,  _
                    ByVal daddr As String,  _
                    ByVal srequmnt As String,  _
                    ByVal termdays As Decimal,  _
                    ByVal terms As String,  _
                    ByVal shipment As String,  _
                    ByVal carriage As Decimal,  _
                    ByVal packing As Decimal,  _
                    ByVal vatpc As Decimal,  _
                    ByVal eurovat As String,  _
                    ByVal vatamt As Decimal,  _
                    ByVal t_parts As Decimal,  _
                    ByVal t_cost As Decimal,  _
                    ByVal s_pdate As Date,  _
                    ByVal s_paid As Decimal,  _
                    ByVal cpercent As Decimal,  _
                    ByVal ccard As Decimal,  _
                    ByVal s_adjust As Decimal,  _
                    ByVal s_acode As String,  _
                    ByVal entrykd As String,  _
                    ByVal invcurcy As String,  _
                    ByVal invrexch As Decimal,  _
                    ByVal back2back As Boolean,  _
                    ByVal phone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal bustype As String,  _
                    ByVal qiwho As String,  _
                    ByVal qiuse As String,  _
                    ByVal serv As Boolean,  _
                    ByVal conf As Boolean,  _
                    ByVal Original_timestamp_column() As Byte,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(quoteno, qdate, cust_ref, cust_date, cdeldate, accountno, s_name, contact, holdnote, invoice, idate, ediscpc, ediscount, iaddr, daddr, srequmnt, termdays, terms, shipment, carriage, packing, vatpc, eurovat, vatamt, t_parts, t_cost, s_pdate, s_paid, cpercent, ccard, s_adjust, s_acode, entrykd, invcurcy, invrexch, back2back, phone, fax, email, bustype, qiwho, qiuse, serv, conf, Original_timestamp_column, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class qictrlnewTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "qictrlnew"
            tableMapping.ColumnMappings.Add("quoteno", "quoteno")
            tableMapping.ColumnMappings.Add("qdate", "qdate")
            tableMapping.ColumnMappings.Add("cust_ref", "cust_ref")
            tableMapping.ColumnMappings.Add("cust_date", "cust_date")
            tableMapping.ColumnMappings.Add("accountno", "accountno")
            tableMapping.ColumnMappings.Add("s_name", "s_name")
            tableMapping.ColumnMappings.Add("contact", "contact")
            tableMapping.ColumnMappings.Add("holdnote", "holdnote")
            tableMapping.ColumnMappings.Add("invoice", "invoice")
            tableMapping.ColumnMappings.Add("idate", "idate")
            tableMapping.ColumnMappings.Add("ediscpc", "ediscpc")
            tableMapping.ColumnMappings.Add("ediscount", "ediscount")
            tableMapping.ColumnMappings.Add("iaddr", "iaddr")
            tableMapping.ColumnMappings.Add("daddr", "daddr")
            tableMapping.ColumnMappings.Add("srequmnt", "srequmnt")
            tableMapping.ColumnMappings.Add("termdays", "termdays")
            tableMapping.ColumnMappings.Add("terms", "terms")
            tableMapping.ColumnMappings.Add("shipment", "shipment")
            tableMapping.ColumnMappings.Add("carriage", "carriage")
            tableMapping.ColumnMappings.Add("packing", "packing")
            tableMapping.ColumnMappings.Add("vatpc", "vatpc")
            tableMapping.ColumnMappings.Add("eurovat", "eurovat")
            tableMapping.ColumnMappings.Add("vatamt", "vatamt")
            tableMapping.ColumnMappings.Add("t_parts", "t_parts")
            tableMapping.ColumnMappings.Add("t_cost", "t_cost")
            tableMapping.ColumnMappings.Add("s_pdate", "s_pdate")
            tableMapping.ColumnMappings.Add("s_paid", "s_paid")
            tableMapping.ColumnMappings.Add("cpercent", "cpercent")
            tableMapping.ColumnMappings.Add("ccard", "ccard")
            tableMapping.ColumnMappings.Add("s_adjust", "s_adjust")
            tableMapping.ColumnMappings.Add("s_acode", "s_acode")
            tableMapping.ColumnMappings.Add("entrykd", "entrykd")
            tableMapping.ColumnMappings.Add("invcurcy", "invcurcy")
            tableMapping.ColumnMappings.Add("invrexch", "invrexch")
            tableMapping.ColumnMappings.Add("back2back", "back2back")
            tableMapping.ColumnMappings.Add("phone", "phone")
            tableMapping.ColumnMappings.Add("fax", "fax")
            tableMapping.ColumnMappings.Add("email", "email")
            tableMapping.ColumnMappings.Add("bustype", "bustype")
            tableMapping.ColumnMappings.Add("qiwho", "qiwho")
            tableMapping.ColumnMappings.Add("qiuse", "qiuse")
            tableMapping.ColumnMappings.Add("timestamp_column", "timestamp_column")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[qictrlnew] WHERE (([timestamp_column] = @Original_timestamp_co"& _ 
                "lumn) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[qictrlnew] ([quoteno], [qdate], [cust_ref], [cust_date], [acco"& _ 
                "untno], [s_name], [contact], [holdnote], [invoice], [idate], [ediscpc], [ediscou"& _ 
                "nt], [iaddr], [daddr], [srequmnt], [termdays], [terms], [shipment], [carriage], "& _ 
                "[packing], [vatpc], [eurovat], [vatamt], [t_parts], [t_cost], [s_pdate], [s_paid"& _ 
                "], [cpercent], [ccard], [s_adjust], [s_acode], [entrykd], [invcurcy], [invrexch]"& _ 
                ", [back2back], [phone], [fax], [email], [bustype], [qiwho], [qiuse]) VALUES (@qu"& _ 
                "oteno, @qdate, @cust_ref, @cust_date, @accountno, @s_name, @contact, @holdnote, "& _ 
                "@invoice, @idate, @ediscpc, @ediscount, @iaddr, @daddr, @srequmnt, @termdays, @t"& _ 
                "erms, @shipment, @carriage, @packing, @vatpc, @eurovat, @vatamt, @t_parts, @t_co"& _ 
                "st, @s_pdate, @s_paid, @cpercent, @ccard, @s_adjust, @s_acode, @entrykd, @invcur"& _ 
                "cy, @invrexch, @back2back, @phone, @fax, @email, @bustype, @qiwho, @qiuse);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SEL"& _ 
                "ECT quoteno, qdate, cust_ref, cust_date, accountno, s_name, contact, holdnote, i"& _ 
                "nvoice, idate, ediscpc, ediscount, iaddr, daddr, srequmnt, termdays, terms, ship"& _ 
                "ment, carriage, packing, vatpc, eurovat, vatamt, t_parts, t_cost, s_pdate, s_pai"& _ 
                "d, cpercent, ccard, s_adjust, s_acode, entrykd, invcurcy, invrexch, back2back, p"& _ 
                "hone, fax, email, bustype, qiwho, qiuse, timestamp_column, UniqueID FROM qictrln"& _ 
                "ew WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quoteno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quoteno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cust_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cust_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cust_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cust_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@accountno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "accountno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@contact", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "contact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@holdnote", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "holdnote", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invoice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invoice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ediscpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 0, "ediscpc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ediscount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "ediscount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iaddr", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iaddr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@daddr", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "daddr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srequmnt", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "srequmnt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@termdays", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 0, "termdays", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@terms", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "terms", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@shipment", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "shipment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@carriage", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "carriage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@packing", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "packing", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 1, "vatpc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eurovat", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eurovat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatamt", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "vatamt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@t_parts", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "t_parts", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@t_cost", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "t_cost", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_pdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_pdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_paid", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "s_paid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cpercent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 1, "cpercent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ccard", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "ccard", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_adjust", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "s_adjust", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_acode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_acode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@entrykd", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "entrykd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invcurcy", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invcurcy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invrexch", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "invrexch", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@back2back", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "back2back", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@phone", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fax", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@email", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bustype", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bustype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qiwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qiwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qiuse", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qiuse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[qictrlnew] SET [quoteno] = @quoteno, [qdate] = @qdate, [cust_ref] ="& _ 
                " @cust_ref, [cust_date] = @cust_date, [accountno] = @accountno, [s_name] = @s_na"& _ 
                "me, [contact] = @contact, [holdnote] = @holdnote, [invoice] = @invoice, [idate] "& _ 
                "= @idate, [ediscpc] = @ediscpc, [ediscount] = @ediscount, [iaddr] = @iaddr, [dad"& _ 
                "dr] = @daddr, [srequmnt] = @srequmnt, [termdays] = @termdays, [terms] = @terms, "& _ 
                "[shipment] = @shipment, [carriage] = @carriage, [packing] = @packing, [vatpc] = "& _ 
                "@vatpc, [eurovat] = @eurovat, [vatamt] = @vatamt, [t_parts] = @t_parts, [t_cost]"& _ 
                " = @t_cost, [s_pdate] = @s_pdate, [s_paid] = @s_paid, [cpercent] = @cpercent, [c"& _ 
                "card] = @ccard, [s_adjust] = @s_adjust, [s_acode] = @s_acode, [entrykd] = @entry"& _ 
                "kd, [invcurcy] = @invcurcy, [invrexch] = @invrexch, [back2back] = @back2back, [p"& _ 
                "hone] = @phone, [fax] = @fax, [email] = @email, [bustype] = @bustype, [qiwho] = "& _ 
                "@qiwho, [qiuse] = @qiuse WHERE (([timestamp_column] = @Original_timestamp_column"& _ 
                ") AND ([UniqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT quoteno, qdate, cust_ref, cust"& _ 
                "_date, accountno, s_name, contact, holdnote, invoice, idate, ediscpc, ediscount,"& _ 
                " iaddr, daddr, srequmnt, termdays, terms, shipment, carriage, packing, vatpc, eu"& _ 
                "rovat, vatamt, t_parts, t_cost, s_pdate, s_paid, cpercent, ccard, s_adjust, s_ac"& _ 
                "ode, entrykd, invcurcy, invrexch, back2back, phone, fax, email, bustype, qiwho, "& _ 
                "qiuse, timestamp_column, UniqueID FROM qictrlnew WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quoteno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quoteno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cust_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cust_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cust_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cust_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@accountno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "accountno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@contact", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "contact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@holdnote", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "holdnote", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invoice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invoice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ediscpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 0, "ediscpc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ediscount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "ediscount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iaddr", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iaddr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@daddr", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "daddr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srequmnt", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "srequmnt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@termdays", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 0, "termdays", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@terms", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "terms", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@shipment", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "shipment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@carriage", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "carriage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@packing", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "packing", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 1, "vatpc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eurovat", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eurovat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatamt", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "vatamt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@t_parts", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "t_parts", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@t_cost", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "t_cost", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_pdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_pdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_paid", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "s_paid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cpercent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 1, "cpercent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ccard", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "ccard", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_adjust", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "s_adjust", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_acode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_acode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@entrykd", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "entrykd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invcurcy", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invcurcy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invrexch", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "invrexch", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@back2back", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "back2back", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@phone", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fax", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@email", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bustype", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bustype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qiwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qiwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qiuse", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qiuse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT quoteno, qdate, cust_ref, cust_date, accountno, s_name, contact, holdnote,"& _ 
                " invoice, idate, ediscpc, ediscount, iaddr, daddr, srequmnt, termdays, terms, sh"& _ 
                "ipment, carriage, packing, vatpc, eurovat, vatamt, t_parts, t_cost, s_pdate, s_p"& _ 
                "aid, cpercent, ccard, s_adjust, s_acode, entrykd, invcurcy, invrexch, back2back,"& _ 
                " phone, fax, email, bustype, qiwho, qiuse, timestamp_column, UniqueID FROM dbo.q"& _ 
                "ictrlnew"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.qictrlnewDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.qictrlnewDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.qictrlnewDataTable = New TransvacDataV2DataSet1.qictrlnewDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.qictrlnewDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "qictrlnew")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal quoteno As String,  _
                    ByVal qdate As Date,  _
                    ByVal cust_ref As String,  _
                    ByVal cust_date As Date,  _
                    ByVal accountno As String,  _
                    ByVal s_name As String,  _
                    ByVal contact As String,  _
                    ByVal holdnote As String,  _
                    ByVal invoice As String,  _
                    ByVal idate As Date,  _
                    ByVal ediscpc As Decimal,  _
                    ByVal ediscount As Decimal,  _
                    ByVal iaddr As String,  _
                    ByVal daddr As String,  _
                    ByVal srequmnt As String,  _
                    ByVal termdays As Decimal,  _
                    ByVal terms As String,  _
                    ByVal shipment As String,  _
                    ByVal carriage As Decimal,  _
                    ByVal packing As Decimal,  _
                    ByVal vatpc As Decimal,  _
                    ByVal eurovat As String,  _
                    ByVal vatamt As Decimal,  _
                    ByVal t_parts As Decimal,  _
                    ByVal t_cost As Decimal,  _
                    ByVal s_pdate As Date,  _
                    ByVal s_paid As Decimal,  _
                    ByVal cpercent As Decimal,  _
                    ByVal ccard As Decimal,  _
                    ByVal s_adjust As Decimal,  _
                    ByVal s_acode As String,  _
                    ByVal entrykd As String,  _
                    ByVal invcurcy As String,  _
                    ByVal invrexch As Decimal,  _
                    ByVal back2back As Boolean,  _
                    ByVal phone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal bustype As String,  _
                    ByVal qiwho As String,  _
                    ByVal qiuse As String) As Integer
            If (quoteno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("quoteno")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(quoteno,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(qdate,Date)
            If (cust_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cust_ref")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(cust_ref,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(cust_date,Date)
            If (accountno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("accountno")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(accountno,String)
            End If
            If (s_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s_name")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(s_name,String)
            End If
            If (contact Is Nothing) Then
                Throw New Global.System.ArgumentNullException("contact")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(contact,String)
            End If
            If (holdnote Is Nothing) Then
                Throw New Global.System.ArgumentNullException("holdnote")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(holdnote,String)
            End If
            If (invoice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("invoice")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(invoice,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(idate,Date)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(ediscpc,Decimal)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(ediscount,Decimal)
            If (iaddr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iaddr")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(iaddr,String)
            End If
            If (daddr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("daddr")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(daddr,String)
            End If
            If (srequmnt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srequmnt")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(srequmnt,String)
            End If
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(termdays,Decimal)
            If (terms Is Nothing) Then
                Throw New Global.System.ArgumentNullException("terms")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(terms,String)
            End If
            If (shipment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("shipment")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(shipment,String)
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(carriage,Decimal)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(packing,Decimal)
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(vatpc,Decimal)
            If (eurovat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("eurovat")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(eurovat,String)
            End If
            Me.Adapter.InsertCommand.Parameters(22).Value = CType(vatamt,Decimal)
            Me.Adapter.InsertCommand.Parameters(23).Value = CType(t_parts,Decimal)
            Me.Adapter.InsertCommand.Parameters(24).Value = CType(t_cost,Decimal)
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(s_pdate,Date)
            Me.Adapter.InsertCommand.Parameters(26).Value = CType(s_paid,Decimal)
            Me.Adapter.InsertCommand.Parameters(27).Value = CType(cpercent,Decimal)
            Me.Adapter.InsertCommand.Parameters(28).Value = CType(ccard,Decimal)
            Me.Adapter.InsertCommand.Parameters(29).Value = CType(s_adjust,Decimal)
            If (s_acode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s_acode")
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(s_acode,String)
            End If
            If (entrykd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("entrykd")
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(entrykd,String)
            End If
            If (invcurcy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("invcurcy")
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(invcurcy,String)
            End If
            Me.Adapter.InsertCommand.Parameters(33).Value = CType(invrexch,Decimal)
            Me.Adapter.InsertCommand.Parameters(34).Value = CType(back2back,Boolean)
            If (phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("phone")
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(phone,String)
            End If
            If (fax Is Nothing) Then
                Throw New Global.System.ArgumentNullException("fax")
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(fax,String)
            End If
            If (email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("email")
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(email,String)
            End If
            If (bustype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bustype")
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(bustype,String)
            End If
            If (qiwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qiwho")
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(qiwho,String)
            End If
            If (qiuse Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qiuse")
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(qiuse,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal quoteno As String,  _
                    ByVal qdate As Date,  _
                    ByVal cust_ref As String,  _
                    ByVal cust_date As Date,  _
                    ByVal accountno As String,  _
                    ByVal s_name As String,  _
                    ByVal contact As String,  _
                    ByVal holdnote As String,  _
                    ByVal invoice As String,  _
                    ByVal idate As Date,  _
                    ByVal ediscpc As Decimal,  _
                    ByVal ediscount As Decimal,  _
                    ByVal iaddr As String,  _
                    ByVal daddr As String,  _
                    ByVal srequmnt As String,  _
                    ByVal termdays As Decimal,  _
                    ByVal terms As String,  _
                    ByVal shipment As String,  _
                    ByVal carriage As Decimal,  _
                    ByVal packing As Decimal,  _
                    ByVal vatpc As Decimal,  _
                    ByVal eurovat As String,  _
                    ByVal vatamt As Decimal,  _
                    ByVal t_parts As Decimal,  _
                    ByVal t_cost As Decimal,  _
                    ByVal s_pdate As Date,  _
                    ByVal s_paid As Decimal,  _
                    ByVal cpercent As Decimal,  _
                    ByVal ccard As Decimal,  _
                    ByVal s_adjust As Decimal,  _
                    ByVal s_acode As String,  _
                    ByVal entrykd As String,  _
                    ByVal invcurcy As String,  _
                    ByVal invrexch As Decimal,  _
                    ByVal back2back As Boolean,  _
                    ByVal phone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal bustype As String,  _
                    ByVal qiwho As String,  _
                    ByVal qiuse As String,  _
                    ByVal Original_timestamp_column() As Byte,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (quoteno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("quoteno")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(quoteno,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(qdate,Date)
            If (cust_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cust_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(cust_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(cust_date,Date)
            If (accountno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("accountno")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(accountno,String)
            End If
            If (s_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(s_name,String)
            End If
            If (contact Is Nothing) Then
                Throw New Global.System.ArgumentNullException("contact")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(contact,String)
            End If
            If (holdnote Is Nothing) Then
                Throw New Global.System.ArgumentNullException("holdnote")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(holdnote,String)
            End If
            If (invoice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("invoice")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(invoice,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(idate,Date)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ediscpc,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ediscount,Decimal)
            If (iaddr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iaddr")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(iaddr,String)
            End If
            If (daddr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("daddr")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(daddr,String)
            End If
            If (srequmnt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srequmnt")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(srequmnt,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(termdays,Decimal)
            If (terms Is Nothing) Then
                Throw New Global.System.ArgumentNullException("terms")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(terms,String)
            End If
            If (shipment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("shipment")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(shipment,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(carriage,Decimal)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(packing,Decimal)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(vatpc,Decimal)
            If (eurovat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("eurovat")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(eurovat,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(vatamt,Decimal)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(t_parts,Decimal)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(t_cost,Decimal)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(s_pdate,Date)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(s_paid,Decimal)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(cpercent,Decimal)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(ccard,Decimal)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(s_adjust,Decimal)
            If (s_acode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s_acode")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(s_acode,String)
            End If
            If (entrykd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("entrykd")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(entrykd,String)
            End If
            If (invcurcy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("invcurcy")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(invcurcy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(invrexch,Decimal)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(back2back,Boolean)
            If (phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(phone,String)
            End If
            If (fax Is Nothing) Then
                Throw New Global.System.ArgumentNullException("fax")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(fax,String)
            End If
            If (email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("email")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(email,String)
            End If
            If (bustype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bustype")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(bustype,String)
            End If
            If (qiwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qiwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(qiwho,String)
            End If
            If (qiuse Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qiuse")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(qiuse,String)
            End If
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal quoteno As String,  _
                    ByVal qdate As Date,  _
                    ByVal cust_ref As String,  _
                    ByVal cust_date As Date,  _
                    ByVal accountno As String,  _
                    ByVal s_name As String,  _
                    ByVal contact As String,  _
                    ByVal holdnote As String,  _
                    ByVal invoice As String,  _
                    ByVal idate As Date,  _
                    ByVal ediscpc As Decimal,  _
                    ByVal ediscount As Decimal,  _
                    ByVal iaddr As String,  _
                    ByVal daddr As String,  _
                    ByVal srequmnt As String,  _
                    ByVal termdays As Decimal,  _
                    ByVal terms As String,  _
                    ByVal shipment As String,  _
                    ByVal carriage As Decimal,  _
                    ByVal packing As Decimal,  _
                    ByVal vatpc As Decimal,  _
                    ByVal eurovat As String,  _
                    ByVal vatamt As Decimal,  _
                    ByVal t_parts As Decimal,  _
                    ByVal t_cost As Decimal,  _
                    ByVal s_pdate As Date,  _
                    ByVal s_paid As Decimal,  _
                    ByVal cpercent As Decimal,  _
                    ByVal ccard As Decimal,  _
                    ByVal s_adjust As Decimal,  _
                    ByVal s_acode As String,  _
                    ByVal entrykd As String,  _
                    ByVal invcurcy As String,  _
                    ByVal invrexch As Decimal,  _
                    ByVal back2back As Boolean,  _
                    ByVal phone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal bustype As String,  _
                    ByVal qiwho As String,  _
                    ByVal qiuse As String,  _
                    ByVal Original_timestamp_column() As Byte,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(quoteno, qdate, cust_ref, cust_date, accountno, s_name, contact, holdnote, invoice, idate, ediscpc, ediscount, iaddr, daddr, srequmnt, termdays, terms, shipment, carriage, packing, vatpc, eurovat, vatamt, t_parts, t_cost, s_pdate, s_paid, cpercent, ccard, s_adjust, s_acode, entrykd, invcurcy, invrexch, back2back, phone, fax, email, bustype, qiwho, qiuse, Original_timestamp_column, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class qictrloldTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "qictrlold"
            tableMapping.ColumnMappings.Add("quoteno", "quoteno")
            tableMapping.ColumnMappings.Add("qdate", "qdate")
            tableMapping.ColumnMappings.Add("cust_ref", "cust_ref")
            tableMapping.ColumnMappings.Add("cust_date", "cust_date")
            tableMapping.ColumnMappings.Add("accountno", "accountno")
            tableMapping.ColumnMappings.Add("s_name", "s_name")
            tableMapping.ColumnMappings.Add("contact", "contact")
            tableMapping.ColumnMappings.Add("holdnote", "holdnote")
            tableMapping.ColumnMappings.Add("invoice", "invoice")
            tableMapping.ColumnMappings.Add("idate", "idate")
            tableMapping.ColumnMappings.Add("ediscpc", "ediscpc")
            tableMapping.ColumnMappings.Add("ediscount", "ediscount")
            tableMapping.ColumnMappings.Add("iaddr", "iaddr")
            tableMapping.ColumnMappings.Add("daddr", "daddr")
            tableMapping.ColumnMappings.Add("srequmnt", "srequmnt")
            tableMapping.ColumnMappings.Add("termdays", "termdays")
            tableMapping.ColumnMappings.Add("terms", "terms")
            tableMapping.ColumnMappings.Add("shipment", "shipment")
            tableMapping.ColumnMappings.Add("carriage", "carriage")
            tableMapping.ColumnMappings.Add("packing", "packing")
            tableMapping.ColumnMappings.Add("vatpc", "vatpc")
            tableMapping.ColumnMappings.Add("eurovat", "eurovat")
            tableMapping.ColumnMappings.Add("vatamt", "vatamt")
            tableMapping.ColumnMappings.Add("t_parts", "t_parts")
            tableMapping.ColumnMappings.Add("t_cost", "t_cost")
            tableMapping.ColumnMappings.Add("s_pdate", "s_pdate")
            tableMapping.ColumnMappings.Add("s_paid", "s_paid")
            tableMapping.ColumnMappings.Add("cpercent", "cpercent")
            tableMapping.ColumnMappings.Add("ccard", "ccard")
            tableMapping.ColumnMappings.Add("s_adjust", "s_adjust")
            tableMapping.ColumnMappings.Add("s_acode", "s_acode")
            tableMapping.ColumnMappings.Add("entrykd", "entrykd")
            tableMapping.ColumnMappings.Add("invcurcy", "invcurcy")
            tableMapping.ColumnMappings.Add("invrexch", "invrexch")
            tableMapping.ColumnMappings.Add("back2back", "back2back")
            tableMapping.ColumnMappings.Add("phone", "phone")
            tableMapping.ColumnMappings.Add("fax", "fax")
            tableMapping.ColumnMappings.Add("email", "email")
            tableMapping.ColumnMappings.Add("bustype", "bustype")
            tableMapping.ColumnMappings.Add("qiwho", "qiwho")
            tableMapping.ColumnMappings.Add("qiuse", "qiuse")
            tableMapping.ColumnMappings.Add("timestamp_column", "timestamp_column")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[qictrlold] WHERE (([timestamp_column] = @Original_timestamp_co"& _ 
                "lumn) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[qictrlold] ([quoteno], [qdate], [cust_ref], [cust_date], [acco"& _ 
                "untno], [s_name], [contact], [holdnote], [invoice], [idate], [ediscpc], [ediscou"& _ 
                "nt], [iaddr], [daddr], [srequmnt], [termdays], [terms], [shipment], [carriage], "& _ 
                "[packing], [vatpc], [eurovat], [vatamt], [t_parts], [t_cost], [s_pdate], [s_paid"& _ 
                "], [cpercent], [ccard], [s_adjust], [s_acode], [entrykd], [invcurcy], [invrexch]"& _ 
                ", [back2back], [phone], [fax], [email], [bustype], [qiwho], [qiuse]) VALUES (@qu"& _ 
                "oteno, @qdate, @cust_ref, @cust_date, @accountno, @s_name, @contact, @holdnote, "& _ 
                "@invoice, @idate, @ediscpc, @ediscount, @iaddr, @daddr, @srequmnt, @termdays, @t"& _ 
                "erms, @shipment, @carriage, @packing, @vatpc, @eurovat, @vatamt, @t_parts, @t_co"& _ 
                "st, @s_pdate, @s_paid, @cpercent, @ccard, @s_adjust, @s_acode, @entrykd, @invcur"& _ 
                "cy, @invrexch, @back2back, @phone, @fax, @email, @bustype, @qiwho, @qiuse);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SEL"& _ 
                "ECT quoteno, qdate, cust_ref, cust_date, accountno, s_name, contact, holdnote, i"& _ 
                "nvoice, idate, ediscpc, ediscount, iaddr, daddr, srequmnt, termdays, terms, ship"& _ 
                "ment, carriage, packing, vatpc, eurovat, vatamt, t_parts, t_cost, s_pdate, s_pai"& _ 
                "d, cpercent, ccard, s_adjust, s_acode, entrykd, invcurcy, invrexch, back2back, p"& _ 
                "hone, fax, email, bustype, qiwho, qiuse, timestamp_column, UniqueID FROM qictrlo"& _ 
                "ld WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quoteno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quoteno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cust_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cust_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cust_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cust_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@accountno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "accountno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@contact", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "contact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@holdnote", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "holdnote", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invoice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invoice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ediscpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 0, "ediscpc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ediscount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "ediscount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iaddr", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iaddr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@daddr", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "daddr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srequmnt", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "srequmnt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@termdays", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 0, "termdays", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@terms", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "terms", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@shipment", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "shipment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@carriage", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "carriage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@packing", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "packing", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 1, "vatpc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eurovat", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eurovat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatamt", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "vatamt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@t_parts", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "t_parts", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@t_cost", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "t_cost", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_pdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_pdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_paid", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "s_paid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cpercent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 1, "cpercent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ccard", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "ccard", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_adjust", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "s_adjust", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_acode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_acode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@entrykd", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "entrykd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invcurcy", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invcurcy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invrexch", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "invrexch", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@back2back", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "back2back", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@phone", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fax", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@email", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bustype", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bustype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qiwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qiwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qiuse", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qiuse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[qictrlold] SET [quoteno] = @quoteno, [qdate] = @qdate, [cust_ref] ="& _ 
                " @cust_ref, [cust_date] = @cust_date, [accountno] = @accountno, [s_name] = @s_na"& _ 
                "me, [contact] = @contact, [holdnote] = @holdnote, [invoice] = @invoice, [idate] "& _ 
                "= @idate, [ediscpc] = @ediscpc, [ediscount] = @ediscount, [iaddr] = @iaddr, [dad"& _ 
                "dr] = @daddr, [srequmnt] = @srequmnt, [termdays] = @termdays, [terms] = @terms, "& _ 
                "[shipment] = @shipment, [carriage] = @carriage, [packing] = @packing, [vatpc] = "& _ 
                "@vatpc, [eurovat] = @eurovat, [vatamt] = @vatamt, [t_parts] = @t_parts, [t_cost]"& _ 
                " = @t_cost, [s_pdate] = @s_pdate, [s_paid] = @s_paid, [cpercent] = @cpercent, [c"& _ 
                "card] = @ccard, [s_adjust] = @s_adjust, [s_acode] = @s_acode, [entrykd] = @entry"& _ 
                "kd, [invcurcy] = @invcurcy, [invrexch] = @invrexch, [back2back] = @back2back, [p"& _ 
                "hone] = @phone, [fax] = @fax, [email] = @email, [bustype] = @bustype, [qiwho] = "& _ 
                "@qiwho, [qiuse] = @qiuse WHERE (([timestamp_column] = @Original_timestamp_column"& _ 
                ") AND ([UniqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT quoteno, qdate, cust_ref, cust"& _ 
                "_date, accountno, s_name, contact, holdnote, invoice, idate, ediscpc, ediscount,"& _ 
                " iaddr, daddr, srequmnt, termdays, terms, shipment, carriage, packing, vatpc, eu"& _ 
                "rovat, vatamt, t_parts, t_cost, s_pdate, s_paid, cpercent, ccard, s_adjust, s_ac"& _ 
                "ode, entrykd, invcurcy, invrexch, back2back, phone, fax, email, bustype, qiwho, "& _ 
                "qiuse, timestamp_column, UniqueID FROM qictrlold WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quoteno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quoteno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cust_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cust_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cust_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cust_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@accountno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "accountno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@contact", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "contact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@holdnote", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "holdnote", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invoice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invoice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ediscpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 0, "ediscpc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ediscount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "ediscount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iaddr", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iaddr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@daddr", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "daddr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srequmnt", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "srequmnt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@termdays", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 0, "termdays", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@terms", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "terms", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@shipment", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "shipment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@carriage", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "carriage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@packing", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "packing", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 1, "vatpc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eurovat", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eurovat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatamt", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "vatamt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@t_parts", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "t_parts", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@t_cost", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "t_cost", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_pdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_pdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_paid", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "s_paid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cpercent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 1, "cpercent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ccard", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "ccard", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_adjust", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "s_adjust", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_acode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_acode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@entrykd", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "entrykd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invcurcy", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invcurcy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invrexch", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "invrexch", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@back2back", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "back2back", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@phone", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fax", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@email", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bustype", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bustype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qiwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qiwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qiuse", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qiuse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT quoteno, qdate, cust_ref, cust_date, accountno, s_name, contact, holdnote,"& _ 
                " invoice, idate, ediscpc, ediscount, iaddr, daddr, srequmnt, termdays, terms, sh"& _ 
                "ipment, carriage, packing, vatpc, eurovat, vatamt, t_parts, t_cost, s_pdate, s_p"& _ 
                "aid, cpercent, ccard, s_adjust, s_acode, entrykd, invcurcy, invrexch, back2back,"& _ 
                " phone, fax, email, bustype, qiwho, qiuse, timestamp_column, UniqueID FROM dbo.q"& _ 
                "ictrlold"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.qictrloldDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.qictrloldDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.qictrloldDataTable = New TransvacDataV2DataSet1.qictrloldDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.qictrloldDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "qictrlold")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal quoteno As String,  _
                    ByVal qdate As Date,  _
                    ByVal cust_ref As String,  _
                    ByVal cust_date As Date,  _
                    ByVal accountno As String,  _
                    ByVal s_name As String,  _
                    ByVal contact As String,  _
                    ByVal holdnote As String,  _
                    ByVal invoice As String,  _
                    ByVal idate As Date,  _
                    ByVal ediscpc As Decimal,  _
                    ByVal ediscount As Decimal,  _
                    ByVal iaddr As String,  _
                    ByVal daddr As String,  _
                    ByVal srequmnt As String,  _
                    ByVal termdays As Decimal,  _
                    ByVal terms As String,  _
                    ByVal shipment As String,  _
                    ByVal carriage As Decimal,  _
                    ByVal packing As Decimal,  _
                    ByVal vatpc As Decimal,  _
                    ByVal eurovat As String,  _
                    ByVal vatamt As Decimal,  _
                    ByVal t_parts As Decimal,  _
                    ByVal t_cost As Decimal,  _
                    ByVal s_pdate As Date,  _
                    ByVal s_paid As Decimal,  _
                    ByVal cpercent As Decimal,  _
                    ByVal ccard As Decimal,  _
                    ByVal s_adjust As Decimal,  _
                    ByVal s_acode As String,  _
                    ByVal entrykd As String,  _
                    ByVal invcurcy As String,  _
                    ByVal invrexch As Decimal,  _
                    ByVal back2back As Boolean,  _
                    ByVal phone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal bustype As String,  _
                    ByVal qiwho As String,  _
                    ByVal qiuse As String) As Integer
            If (quoteno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("quoteno")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(quoteno,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(qdate,Date)
            If (cust_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cust_ref")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(cust_ref,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(cust_date,Date)
            If (accountno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("accountno")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(accountno,String)
            End If
            If (s_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s_name")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(s_name,String)
            End If
            If (contact Is Nothing) Then
                Throw New Global.System.ArgumentNullException("contact")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(contact,String)
            End If
            If (holdnote Is Nothing) Then
                Throw New Global.System.ArgumentNullException("holdnote")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(holdnote,String)
            End If
            If (invoice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("invoice")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(invoice,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(idate,Date)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(ediscpc,Decimal)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(ediscount,Decimal)
            If (iaddr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iaddr")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(iaddr,String)
            End If
            If (daddr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("daddr")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(daddr,String)
            End If
            If (srequmnt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srequmnt")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(srequmnt,String)
            End If
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(termdays,Decimal)
            If (terms Is Nothing) Then
                Throw New Global.System.ArgumentNullException("terms")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(terms,String)
            End If
            If (shipment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("shipment")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(shipment,String)
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(carriage,Decimal)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(packing,Decimal)
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(vatpc,Decimal)
            If (eurovat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("eurovat")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(eurovat,String)
            End If
            Me.Adapter.InsertCommand.Parameters(22).Value = CType(vatamt,Decimal)
            Me.Adapter.InsertCommand.Parameters(23).Value = CType(t_parts,Decimal)
            Me.Adapter.InsertCommand.Parameters(24).Value = CType(t_cost,Decimal)
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(s_pdate,Date)
            Me.Adapter.InsertCommand.Parameters(26).Value = CType(s_paid,Decimal)
            Me.Adapter.InsertCommand.Parameters(27).Value = CType(cpercent,Decimal)
            Me.Adapter.InsertCommand.Parameters(28).Value = CType(ccard,Decimal)
            Me.Adapter.InsertCommand.Parameters(29).Value = CType(s_adjust,Decimal)
            If (s_acode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s_acode")
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(s_acode,String)
            End If
            If (entrykd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("entrykd")
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(entrykd,String)
            End If
            If (invcurcy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("invcurcy")
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(invcurcy,String)
            End If
            Me.Adapter.InsertCommand.Parameters(33).Value = CType(invrexch,Decimal)
            Me.Adapter.InsertCommand.Parameters(34).Value = CType(back2back,Boolean)
            If (phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("phone")
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(phone,String)
            End If
            If (fax Is Nothing) Then
                Throw New Global.System.ArgumentNullException("fax")
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(fax,String)
            End If
            If (email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("email")
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(email,String)
            End If
            If (bustype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bustype")
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(bustype,String)
            End If
            If (qiwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qiwho")
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(qiwho,String)
            End If
            If (qiuse Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qiuse")
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(qiuse,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal quoteno As String,  _
                    ByVal qdate As Date,  _
                    ByVal cust_ref As String,  _
                    ByVal cust_date As Date,  _
                    ByVal accountno As String,  _
                    ByVal s_name As String,  _
                    ByVal contact As String,  _
                    ByVal holdnote As String,  _
                    ByVal invoice As String,  _
                    ByVal idate As Date,  _
                    ByVal ediscpc As Decimal,  _
                    ByVal ediscount As Decimal,  _
                    ByVal iaddr As String,  _
                    ByVal daddr As String,  _
                    ByVal srequmnt As String,  _
                    ByVal termdays As Decimal,  _
                    ByVal terms As String,  _
                    ByVal shipment As String,  _
                    ByVal carriage As Decimal,  _
                    ByVal packing As Decimal,  _
                    ByVal vatpc As Decimal,  _
                    ByVal eurovat As String,  _
                    ByVal vatamt As Decimal,  _
                    ByVal t_parts As Decimal,  _
                    ByVal t_cost As Decimal,  _
                    ByVal s_pdate As Date,  _
                    ByVal s_paid As Decimal,  _
                    ByVal cpercent As Decimal,  _
                    ByVal ccard As Decimal,  _
                    ByVal s_adjust As Decimal,  _
                    ByVal s_acode As String,  _
                    ByVal entrykd As String,  _
                    ByVal invcurcy As String,  _
                    ByVal invrexch As Decimal,  _
                    ByVal back2back As Boolean,  _
                    ByVal phone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal bustype As String,  _
                    ByVal qiwho As String,  _
                    ByVal qiuse As String,  _
                    ByVal Original_timestamp_column() As Byte,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (quoteno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("quoteno")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(quoteno,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(qdate,Date)
            If (cust_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cust_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(cust_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(cust_date,Date)
            If (accountno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("accountno")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(accountno,String)
            End If
            If (s_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(s_name,String)
            End If
            If (contact Is Nothing) Then
                Throw New Global.System.ArgumentNullException("contact")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(contact,String)
            End If
            If (holdnote Is Nothing) Then
                Throw New Global.System.ArgumentNullException("holdnote")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(holdnote,String)
            End If
            If (invoice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("invoice")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(invoice,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(idate,Date)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ediscpc,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ediscount,Decimal)
            If (iaddr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iaddr")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(iaddr,String)
            End If
            If (daddr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("daddr")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(daddr,String)
            End If
            If (srequmnt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srequmnt")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(srequmnt,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(termdays,Decimal)
            If (terms Is Nothing) Then
                Throw New Global.System.ArgumentNullException("terms")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(terms,String)
            End If
            If (shipment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("shipment")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(shipment,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(carriage,Decimal)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(packing,Decimal)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(vatpc,Decimal)
            If (eurovat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("eurovat")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(eurovat,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(vatamt,Decimal)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(t_parts,Decimal)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(t_cost,Decimal)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(s_pdate,Date)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(s_paid,Decimal)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(cpercent,Decimal)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(ccard,Decimal)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(s_adjust,Decimal)
            If (s_acode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s_acode")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(s_acode,String)
            End If
            If (entrykd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("entrykd")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(entrykd,String)
            End If
            If (invcurcy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("invcurcy")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(invcurcy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(invrexch,Decimal)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(back2back,Boolean)
            If (phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(phone,String)
            End If
            If (fax Is Nothing) Then
                Throw New Global.System.ArgumentNullException("fax")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(fax,String)
            End If
            If (email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("email")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(email,String)
            End If
            If (bustype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bustype")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(bustype,String)
            End If
            If (qiwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qiwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(qiwho,String)
            End If
            If (qiuse Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qiuse")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(qiuse,String)
            End If
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal quoteno As String,  _
                    ByVal qdate As Date,  _
                    ByVal cust_ref As String,  _
                    ByVal cust_date As Date,  _
                    ByVal accountno As String,  _
                    ByVal s_name As String,  _
                    ByVal contact As String,  _
                    ByVal holdnote As String,  _
                    ByVal invoice As String,  _
                    ByVal idate As Date,  _
                    ByVal ediscpc As Decimal,  _
                    ByVal ediscount As Decimal,  _
                    ByVal iaddr As String,  _
                    ByVal daddr As String,  _
                    ByVal srequmnt As String,  _
                    ByVal termdays As Decimal,  _
                    ByVal terms As String,  _
                    ByVal shipment As String,  _
                    ByVal carriage As Decimal,  _
                    ByVal packing As Decimal,  _
                    ByVal vatpc As Decimal,  _
                    ByVal eurovat As String,  _
                    ByVal vatamt As Decimal,  _
                    ByVal t_parts As Decimal,  _
                    ByVal t_cost As Decimal,  _
                    ByVal s_pdate As Date,  _
                    ByVal s_paid As Decimal,  _
                    ByVal cpercent As Decimal,  _
                    ByVal ccard As Decimal,  _
                    ByVal s_adjust As Decimal,  _
                    ByVal s_acode As String,  _
                    ByVal entrykd As String,  _
                    ByVal invcurcy As String,  _
                    ByVal invrexch As Decimal,  _
                    ByVal back2back As Boolean,  _
                    ByVal phone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal bustype As String,  _
                    ByVal qiwho As String,  _
                    ByVal qiuse As String,  _
                    ByVal Original_timestamp_column() As Byte,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(quoteno, qdate, cust_ref, cust_date, accountno, s_name, contact, holdnote, invoice, idate, ediscpc, ediscount, iaddr, daddr, srequmnt, termdays, terms, shipment, carriage, packing, vatpc, eurovat, vatamt, t_parts, t_cost, s_pdate, s_paid, cpercent, ccard, s_adjust, s_acode, entrykd, invcurcy, invrexch, back2back, phone, fax, email, bustype, qiwho, qiuse, Original_timestamp_column, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class qictrlold6TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "qictrlold6"
            tableMapping.ColumnMappings.Add("quoteno", "quoteno")
            tableMapping.ColumnMappings.Add("qdate", "qdate")
            tableMapping.ColumnMappings.Add("cust_ref", "cust_ref")
            tableMapping.ColumnMappings.Add("cust_date", "cust_date")
            tableMapping.ColumnMappings.Add("accountno", "accountno")
            tableMapping.ColumnMappings.Add("s_name", "s_name")
            tableMapping.ColumnMappings.Add("contact", "contact")
            tableMapping.ColumnMappings.Add("holdnote", "holdnote")
            tableMapping.ColumnMappings.Add("invoice", "invoice")
            tableMapping.ColumnMappings.Add("idate", "idate")
            tableMapping.ColumnMappings.Add("ediscpc", "ediscpc")
            tableMapping.ColumnMappings.Add("ediscount", "ediscount")
            tableMapping.ColumnMappings.Add("iaddr", "iaddr")
            tableMapping.ColumnMappings.Add("daddr", "daddr")
            tableMapping.ColumnMappings.Add("srequmnt", "srequmnt")
            tableMapping.ColumnMappings.Add("termdays", "termdays")
            tableMapping.ColumnMappings.Add("terms", "terms")
            tableMapping.ColumnMappings.Add("shipment", "shipment")
            tableMapping.ColumnMappings.Add("carriage", "carriage")
            tableMapping.ColumnMappings.Add("packing", "packing")
            tableMapping.ColumnMappings.Add("vatpc", "vatpc")
            tableMapping.ColumnMappings.Add("eurovat", "eurovat")
            tableMapping.ColumnMappings.Add("vatamt", "vatamt")
            tableMapping.ColumnMappings.Add("t_parts", "t_parts")
            tableMapping.ColumnMappings.Add("t_cost", "t_cost")
            tableMapping.ColumnMappings.Add("s_pdate", "s_pdate")
            tableMapping.ColumnMappings.Add("s_paid", "s_paid")
            tableMapping.ColumnMappings.Add("cpercent", "cpercent")
            tableMapping.ColumnMappings.Add("ccard", "ccard")
            tableMapping.ColumnMappings.Add("s_adjust", "s_adjust")
            tableMapping.ColumnMappings.Add("s_acode", "s_acode")
            tableMapping.ColumnMappings.Add("entrykd", "entrykd")
            tableMapping.ColumnMappings.Add("invcurcy", "invcurcy")
            tableMapping.ColumnMappings.Add("invrexch", "invrexch")
            tableMapping.ColumnMappings.Add("back2back", "back2back")
            tableMapping.ColumnMappings.Add("phone", "phone")
            tableMapping.ColumnMappings.Add("fax", "fax")
            tableMapping.ColumnMappings.Add("email", "email")
            tableMapping.ColumnMappings.Add("bustype", "bustype")
            tableMapping.ColumnMappings.Add("qiwho", "qiwho")
            tableMapping.ColumnMappings.Add("qiuse", "qiuse")
            tableMapping.ColumnMappings.Add("timestamp_column", "timestamp_column")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[qictrlold6] WHERE (([timestamp_column] = @Original_timestamp_c"& _ 
                "olumn) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[qictrlold6] ([quoteno], [qdate], [cust_ref], [cust_date], [acc"& _ 
                "ountno], [s_name], [contact], [holdnote], [invoice], [idate], [ediscpc], [edisco"& _ 
                "unt], [iaddr], [daddr], [srequmnt], [termdays], [terms], [shipment], [carriage],"& _ 
                " [packing], [vatpc], [eurovat], [vatamt], [t_parts], [t_cost], [s_pdate], [s_pai"& _ 
                "d], [cpercent], [ccard], [s_adjust], [s_acode], [entrykd], [invcurcy], [invrexch"& _ 
                "], [back2back], [phone], [fax], [email], [bustype], [qiwho], [qiuse]) VALUES (@q"& _ 
                "uoteno, @qdate, @cust_ref, @cust_date, @accountno, @s_name, @contact, @holdnote,"& _ 
                " @invoice, @idate, @ediscpc, @ediscount, @iaddr, @daddr, @srequmnt, @termdays, @"& _ 
                "terms, @shipment, @carriage, @packing, @vatpc, @eurovat, @vatamt, @t_parts, @t_c"& _ 
                "ost, @s_pdate, @s_paid, @cpercent, @ccard, @s_adjust, @s_acode, @entrykd, @invcu"& _ 
                "rcy, @invrexch, @back2back, @phone, @fax, @email, @bustype, @qiwho, @qiuse);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT quoteno, qdate, cust_ref, cust_date, accountno, s_name, contact, holdnote, "& _ 
                "invoice, idate, ediscpc, ediscount, iaddr, daddr, srequmnt, termdays, terms, shi"& _ 
                "pment, carriage, packing, vatpc, eurovat, vatamt, t_parts, t_cost, s_pdate, s_pa"& _ 
                "id, cpercent, ccard, s_adjust, s_acode, entrykd, invcurcy, invrexch, back2back, "& _ 
                "phone, fax, email, bustype, qiwho, qiuse, timestamp_column, UniqueID FROM qictrl"& _ 
                "old6 WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quoteno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quoteno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cust_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cust_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cust_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cust_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@accountno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "accountno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@contact", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "contact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@holdnote", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "holdnote", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invoice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invoice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ediscpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 0, "ediscpc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ediscount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "ediscount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iaddr", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iaddr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@daddr", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "daddr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srequmnt", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "srequmnt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@termdays", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 0, "termdays", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@terms", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "terms", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@shipment", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "shipment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@carriage", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "carriage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@packing", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "packing", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 1, "vatpc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eurovat", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eurovat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatamt", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "vatamt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@t_parts", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "t_parts", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@t_cost", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "t_cost", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_pdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_pdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_paid", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "s_paid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cpercent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 1, "cpercent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ccard", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "ccard", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_adjust", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "s_adjust", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_acode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_acode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@entrykd", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "entrykd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invcurcy", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invcurcy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invrexch", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "invrexch", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@back2back", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "back2back", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@phone", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fax", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@email", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bustype", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bustype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qiwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qiwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qiuse", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qiuse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[qictrlold6] SET [quoteno] = @quoteno, [qdate] = @qdate, [cust_ref] "& _ 
                "= @cust_ref, [cust_date] = @cust_date, [accountno] = @accountno, [s_name] = @s_n"& _ 
                "ame, [contact] = @contact, [holdnote] = @holdnote, [invoice] = @invoice, [idate]"& _ 
                " = @idate, [ediscpc] = @ediscpc, [ediscount] = @ediscount, [iaddr] = @iaddr, [da"& _ 
                "ddr] = @daddr, [srequmnt] = @srequmnt, [termdays] = @termdays, [terms] = @terms,"& _ 
                " [shipment] = @shipment, [carriage] = @carriage, [packing] = @packing, [vatpc] ="& _ 
                " @vatpc, [eurovat] = @eurovat, [vatamt] = @vatamt, [t_parts] = @t_parts, [t_cost"& _ 
                "] = @t_cost, [s_pdate] = @s_pdate, [s_paid] = @s_paid, [cpercent] = @cpercent, ["& _ 
                "ccard] = @ccard, [s_adjust] = @s_adjust, [s_acode] = @s_acode, [entrykd] = @entr"& _ 
                "ykd, [invcurcy] = @invcurcy, [invrexch] = @invrexch, [back2back] = @back2back, ["& _ 
                "phone] = @phone, [fax] = @fax, [email] = @email, [bustype] = @bustype, [qiwho] ="& _ 
                " @qiwho, [qiuse] = @qiuse WHERE (([timestamp_column] = @Original_timestamp_colum"& _ 
                "n) AND ([UniqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT quoteno, qdate, cust_ref, cus"& _ 
                "t_date, accountno, s_name, contact, holdnote, invoice, idate, ediscpc, ediscount"& _ 
                ", iaddr, daddr, srequmnt, termdays, terms, shipment, carriage, packing, vatpc, e"& _ 
                "urovat, vatamt, t_parts, t_cost, s_pdate, s_paid, cpercent, ccard, s_adjust, s_a"& _ 
                "code, entrykd, invcurcy, invrexch, back2back, phone, fax, email, bustype, qiwho,"& _ 
                " qiuse, timestamp_column, UniqueID FROM qictrlold6 WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quoteno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quoteno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cust_ref", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cust_ref", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cust_date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "cust_date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@accountno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "accountno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@contact", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "contact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@holdnote", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "holdnote", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invoice", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invoice", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ediscpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 0, "ediscpc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ediscount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "ediscount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iaddr", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iaddr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@daddr", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "daddr", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@srequmnt", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "srequmnt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@termdays", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 0, "termdays", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@terms", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "terms", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@shipment", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "shipment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@carriage", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "carriage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@packing", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "packing", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 1, "vatpc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eurovat", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eurovat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatamt", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "vatamt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@t_parts", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "t_parts", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@t_cost", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "t_cost", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_pdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_pdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_paid", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "s_paid", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@cpercent", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 2, 1, "cpercent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ccard", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 2, "ccard", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_adjust", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 8, 2, "s_adjust", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@s_acode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "s_acode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@entrykd", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "entrykd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invcurcy", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invcurcy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invrexch", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "invrexch", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@back2back", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "back2back", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@phone", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fax", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@email", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bustype", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bustype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qiwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qiwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qiuse", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qiuse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT quoteno, qdate, cust_ref, cust_date, accountno, s_name, contact, holdnote,"& _ 
                " invoice, idate, ediscpc, ediscount, iaddr, daddr, srequmnt, termdays, terms, sh"& _ 
                "ipment, carriage, packing, vatpc, eurovat, vatamt, t_parts, t_cost, s_pdate, s_p"& _ 
                "aid, cpercent, ccard, s_adjust, s_acode, entrykd, invcurcy, invrexch, back2back,"& _ 
                " phone, fax, email, bustype, qiwho, qiuse, timestamp_column, UniqueID FROM dbo.q"& _ 
                "ictrlold6"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.qictrlold6DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.qictrlold6DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.qictrlold6DataTable = New TransvacDataV2DataSet1.qictrlold6DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.qictrlold6DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "qictrlold6")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal quoteno As String,  _
                    ByVal qdate As Date,  _
                    ByVal cust_ref As String,  _
                    ByVal cust_date As Date,  _
                    ByVal accountno As String,  _
                    ByVal s_name As String,  _
                    ByVal contact As String,  _
                    ByVal holdnote As String,  _
                    ByVal invoice As String,  _
                    ByVal idate As Date,  _
                    ByVal ediscpc As Decimal,  _
                    ByVal ediscount As Decimal,  _
                    ByVal iaddr As String,  _
                    ByVal daddr As String,  _
                    ByVal srequmnt As String,  _
                    ByVal termdays As Decimal,  _
                    ByVal terms As String,  _
                    ByVal shipment As String,  _
                    ByVal carriage As Decimal,  _
                    ByVal packing As Decimal,  _
                    ByVal vatpc As Decimal,  _
                    ByVal eurovat As String,  _
                    ByVal vatamt As Decimal,  _
                    ByVal t_parts As Decimal,  _
                    ByVal t_cost As Decimal,  _
                    ByVal s_pdate As Date,  _
                    ByVal s_paid As Decimal,  _
                    ByVal cpercent As Decimal,  _
                    ByVal ccard As Decimal,  _
                    ByVal s_adjust As Decimal,  _
                    ByVal s_acode As String,  _
                    ByVal entrykd As String,  _
                    ByVal invcurcy As String,  _
                    ByVal invrexch As Decimal,  _
                    ByVal back2back As Boolean,  _
                    ByVal phone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal bustype As String,  _
                    ByVal qiwho As String,  _
                    ByVal qiuse As String) As Integer
            If (quoteno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("quoteno")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(quoteno,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(qdate,Date)
            If (cust_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cust_ref")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(cust_ref,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(cust_date,Date)
            If (accountno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("accountno")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(accountno,String)
            End If
            If (s_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s_name")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(s_name,String)
            End If
            If (contact Is Nothing) Then
                Throw New Global.System.ArgumentNullException("contact")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(contact,String)
            End If
            If (holdnote Is Nothing) Then
                Throw New Global.System.ArgumentNullException("holdnote")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(holdnote,String)
            End If
            If (invoice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("invoice")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(invoice,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(idate,Date)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(ediscpc,Decimal)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(ediscount,Decimal)
            If (iaddr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iaddr")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(iaddr,String)
            End If
            If (daddr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("daddr")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(daddr,String)
            End If
            If (srequmnt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srequmnt")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(srequmnt,String)
            End If
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(termdays,Decimal)
            If (terms Is Nothing) Then
                Throw New Global.System.ArgumentNullException("terms")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(terms,String)
            End If
            If (shipment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("shipment")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(shipment,String)
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(carriage,Decimal)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(packing,Decimal)
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(vatpc,Decimal)
            If (eurovat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("eurovat")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(eurovat,String)
            End If
            Me.Adapter.InsertCommand.Parameters(22).Value = CType(vatamt,Decimal)
            Me.Adapter.InsertCommand.Parameters(23).Value = CType(t_parts,Decimal)
            Me.Adapter.InsertCommand.Parameters(24).Value = CType(t_cost,Decimal)
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(s_pdate,Date)
            Me.Adapter.InsertCommand.Parameters(26).Value = CType(s_paid,Decimal)
            Me.Adapter.InsertCommand.Parameters(27).Value = CType(cpercent,Decimal)
            Me.Adapter.InsertCommand.Parameters(28).Value = CType(ccard,Decimal)
            Me.Adapter.InsertCommand.Parameters(29).Value = CType(s_adjust,Decimal)
            If (s_acode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s_acode")
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(s_acode,String)
            End If
            If (entrykd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("entrykd")
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(entrykd,String)
            End If
            If (invcurcy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("invcurcy")
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(invcurcy,String)
            End If
            Me.Adapter.InsertCommand.Parameters(33).Value = CType(invrexch,Decimal)
            Me.Adapter.InsertCommand.Parameters(34).Value = CType(back2back,Boolean)
            If (phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("phone")
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(phone,String)
            End If
            If (fax Is Nothing) Then
                Throw New Global.System.ArgumentNullException("fax")
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(fax,String)
            End If
            If (email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("email")
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(email,String)
            End If
            If (bustype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bustype")
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(bustype,String)
            End If
            If (qiwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qiwho")
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(qiwho,String)
            End If
            If (qiuse Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qiuse")
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(qiuse,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal quoteno As String,  _
                    ByVal qdate As Date,  _
                    ByVal cust_ref As String,  _
                    ByVal cust_date As Date,  _
                    ByVal accountno As String,  _
                    ByVal s_name As String,  _
                    ByVal contact As String,  _
                    ByVal holdnote As String,  _
                    ByVal invoice As String,  _
                    ByVal idate As Date,  _
                    ByVal ediscpc As Decimal,  _
                    ByVal ediscount As Decimal,  _
                    ByVal iaddr As String,  _
                    ByVal daddr As String,  _
                    ByVal srequmnt As String,  _
                    ByVal termdays As Decimal,  _
                    ByVal terms As String,  _
                    ByVal shipment As String,  _
                    ByVal carriage As Decimal,  _
                    ByVal packing As Decimal,  _
                    ByVal vatpc As Decimal,  _
                    ByVal eurovat As String,  _
                    ByVal vatamt As Decimal,  _
                    ByVal t_parts As Decimal,  _
                    ByVal t_cost As Decimal,  _
                    ByVal s_pdate As Date,  _
                    ByVal s_paid As Decimal,  _
                    ByVal cpercent As Decimal,  _
                    ByVal ccard As Decimal,  _
                    ByVal s_adjust As Decimal,  _
                    ByVal s_acode As String,  _
                    ByVal entrykd As String,  _
                    ByVal invcurcy As String,  _
                    ByVal invrexch As Decimal,  _
                    ByVal back2back As Boolean,  _
                    ByVal phone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal bustype As String,  _
                    ByVal qiwho As String,  _
                    ByVal qiuse As String,  _
                    ByVal Original_timestamp_column() As Byte,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (quoteno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("quoteno")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(quoteno,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(qdate,Date)
            If (cust_ref Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cust_ref")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(cust_ref,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(cust_date,Date)
            If (accountno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("accountno")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(accountno,String)
            End If
            If (s_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(s_name,String)
            End If
            If (contact Is Nothing) Then
                Throw New Global.System.ArgumentNullException("contact")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(contact,String)
            End If
            If (holdnote Is Nothing) Then
                Throw New Global.System.ArgumentNullException("holdnote")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(holdnote,String)
            End If
            If (invoice Is Nothing) Then
                Throw New Global.System.ArgumentNullException("invoice")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(invoice,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(idate,Date)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ediscpc,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ediscount,Decimal)
            If (iaddr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iaddr")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(iaddr,String)
            End If
            If (daddr Is Nothing) Then
                Throw New Global.System.ArgumentNullException("daddr")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(daddr,String)
            End If
            If (srequmnt Is Nothing) Then
                Throw New Global.System.ArgumentNullException("srequmnt")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(srequmnt,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(termdays,Decimal)
            If (terms Is Nothing) Then
                Throw New Global.System.ArgumentNullException("terms")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(terms,String)
            End If
            If (shipment Is Nothing) Then
                Throw New Global.System.ArgumentNullException("shipment")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(shipment,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(carriage,Decimal)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(packing,Decimal)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(vatpc,Decimal)
            If (eurovat Is Nothing) Then
                Throw New Global.System.ArgumentNullException("eurovat")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(eurovat,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(vatamt,Decimal)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(t_parts,Decimal)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(t_cost,Decimal)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(s_pdate,Date)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(s_paid,Decimal)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(cpercent,Decimal)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(ccard,Decimal)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(s_adjust,Decimal)
            If (s_acode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("s_acode")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(s_acode,String)
            End If
            If (entrykd Is Nothing) Then
                Throw New Global.System.ArgumentNullException("entrykd")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(entrykd,String)
            End If
            If (invcurcy Is Nothing) Then
                Throw New Global.System.ArgumentNullException("invcurcy")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(invcurcy,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(invrexch,Decimal)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(back2back,Boolean)
            If (phone Is Nothing) Then
                Throw New Global.System.ArgumentNullException("phone")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(phone,String)
            End If
            If (fax Is Nothing) Then
                Throw New Global.System.ArgumentNullException("fax")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(fax,String)
            End If
            If (email Is Nothing) Then
                Throw New Global.System.ArgumentNullException("email")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(email,String)
            End If
            If (bustype Is Nothing) Then
                Throw New Global.System.ArgumentNullException("bustype")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(bustype,String)
            End If
            If (qiwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qiwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(qiwho,String)
            End If
            If (qiuse Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qiuse")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(qiuse,String)
            End If
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal quoteno As String,  _
                    ByVal qdate As Date,  _
                    ByVal cust_ref As String,  _
                    ByVal cust_date As Date,  _
                    ByVal accountno As String,  _
                    ByVal s_name As String,  _
                    ByVal contact As String,  _
                    ByVal holdnote As String,  _
                    ByVal invoice As String,  _
                    ByVal idate As Date,  _
                    ByVal ediscpc As Decimal,  _
                    ByVal ediscount As Decimal,  _
                    ByVal iaddr As String,  _
                    ByVal daddr As String,  _
                    ByVal srequmnt As String,  _
                    ByVal termdays As Decimal,  _
                    ByVal terms As String,  _
                    ByVal shipment As String,  _
                    ByVal carriage As Decimal,  _
                    ByVal packing As Decimal,  _
                    ByVal vatpc As Decimal,  _
                    ByVal eurovat As String,  _
                    ByVal vatamt As Decimal,  _
                    ByVal t_parts As Decimal,  _
                    ByVal t_cost As Decimal,  _
                    ByVal s_pdate As Date,  _
                    ByVal s_paid As Decimal,  _
                    ByVal cpercent As Decimal,  _
                    ByVal ccard As Decimal,  _
                    ByVal s_adjust As Decimal,  _
                    ByVal s_acode As String,  _
                    ByVal entrykd As String,  _
                    ByVal invcurcy As String,  _
                    ByVal invrexch As Decimal,  _
                    ByVal back2back As Boolean,  _
                    ByVal phone As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal bustype As String,  _
                    ByVal qiwho As String,  _
                    ByVal qiuse As String,  _
                    ByVal Original_timestamp_column() As Byte,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(quoteno, qdate, cust_ref, cust_date, accountno, s_name, contact, holdnote, invoice, idate, ediscpc, ediscount, iaddr, daddr, srequmnt, termdays, terms, shipment, carriage, packing, vatpc, eurovat, vatamt, t_parts, t_cost, s_pdate, s_paid, cpercent, ccard, s_adjust, s_acode, entrykd, invcurcy, invrexch, back2back, phone, fax, email, bustype, qiwho, qiuse, Original_timestamp_column, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class quotedetailTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "quotedetail"
            tableMapping.ColumnMappings.Add("quote_no", "quote_no")
            tableMapping.ColumnMappings.Add("quote_suf", "quote_suf")
            tableMapping.ColumnMappings.Add("qline_no", "qline_no")
            tableMapping.ColumnMappings.Add("quantity", "quantity")
            tableMapping.ColumnMappings.Add("qpart_no", "qpart_no")
            tableMapping.ColumnMappings.Add("qdesc", "qdesc")
            tableMapping.ColumnMappings.Add("qline_memo", "qline_memo")
            tableMapping.ColumnMappings.Add("qvalue", "qvalue")
            tableMapping.ColumnMappings.Add("nonstock", "nonstock")
            tableMapping.ColumnMappings.Add("timestamp_column", "timestamp_column")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[quotedetail] WHERE (([timestamp_column] = @Original_timestamp_"& _ 
                "column) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[quotedetail] ([quote_no], [quote_suf], [qline_no], [quantity],"& _ 
                " [qpart_no], [qdesc], [qline_memo], [qvalue], [nonstock]) VALUES (@quote_no, @qu"& _ 
                "ote_suf, @qline_no, @quantity, @qpart_no, @qdesc, @qline_memo, @qvalue, @nonstoc"& _ 
                "k);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT quote_no, quote_suf, qline_no, quantity, qpart_no, qdesc, qline_memo"& _ 
                ", qvalue, nonstock, timestamp_column, UniqueID FROM quotedetail WHERE (UniqueID "& _ 
                "= SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quote_no", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quote_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quote_suf", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quote_suf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qline_no", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qline_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qpart_no", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qpart_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qdesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qdesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qline_memo", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qline_memo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qvalue", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "qvalue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nonstock", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nonstock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[quotedetail] SET [quote_no] = @quote_no, [quote_suf] = @quote_suf, "& _ 
                "[qline_no] = @qline_no, [quantity] = @quantity, [qpart_no] = @qpart_no, [qdesc] "& _ 
                "= @qdesc, [qline_memo] = @qline_memo, [qvalue] = @qvalue, [nonstock] = @nonstock"& _ 
                " WHERE (([timestamp_column] = @Original_timestamp_column) AND ([UniqueID] = @Ori"& _ 
                "ginal_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT quote_no, quote_suf, qline_no, quantity, qpart_no, qde"& _ 
                "sc, qline_memo, qvalue, nonstock, timestamp_column, UniqueID FROM quotedetail WH"& _ 
                "ERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quote_no", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quote_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quote_suf", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quote_suf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qline_no", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qline_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qpart_no", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qpart_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qdesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qdesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qline_memo", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qline_memo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qvalue", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 2, "qvalue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nonstock", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nonstock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT quote_no, quote_suf, qline_no, quantity, qpart_no, qdesc, qline_memo, qval"& _ 
                "ue, nonstock, timestamp_column, UniqueID FROM dbo.quotedetail"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        quote_no, quote_suf, qline_no, quantity, qpart_no, qdesc, qline_mem"& _ 
                "o, qvalue, nonstock, timestamp_column, UniqueID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            quotedetail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WH"& _ 
                "ERE        (quote_no LIKE @Param1 + '%')"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.[Char], 6, Global.System.Data.ParameterDirection.Input, 0, 0, "quote_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        quote_no, quote_suf, qline_no, quantity, qpart_no, qdesc, qline_mem"& _ 
                "o, qvalue, nonstock, timestamp_column, UniqueID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            quotedetail"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WH"& _ 
                "ERE        (quote_no = @Param1) AND (quote_suf = @Param2)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.[Char], 6, Global.System.Data.ParameterDirection.Input, 0, 0, "quote_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param2", Global.System.Data.SqlDbType.[Char], 2, Global.System.Data.ParameterDirection.Input, 0, 0, "quote_suf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.quotedetailDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.quotedetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.quotedetailDataTable = New TransvacDataV2DataSet1.quotedetailDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByQuotesDetail(ByVal dataTable As TransvacDataV2DataSet1.quotedetailDataTable, ByVal Param1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByQuotesDetail(ByVal Param1 As String) As TransvacDataV2DataSet1.quotedetailDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            Dim dataTable As TransvacDataV2DataSet1.quotedetailDataTable = New TransvacDataV2DataSet1.quotedetailDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByQuoteSuf(ByVal dataTable As TransvacDataV2DataSet1.quotedetailDataTable, ByVal Param1 As String, ByVal Param2 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Param1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            If (Param2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param2")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Param2,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.quotedetailDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "quotedetail")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal quote_no As String, ByVal quote_suf As String, ByVal qline_no As String, ByVal quantity As Decimal, ByVal qpart_no As String, ByVal qdesc As String, ByVal qline_memo As String, ByVal qvalue As Decimal, ByVal nonstock As Boolean) As Integer
            If (quote_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("quote_no")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(quote_no,String)
            End If
            If (quote_suf Is Nothing) Then
                Throw New Global.System.ArgumentNullException("quote_suf")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(quote_suf,String)
            End If
            If (qline_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qline_no")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(qline_no,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(quantity,Decimal)
            If (qpart_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qpart_no")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(qpart_no,String)
            End If
            If (qdesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qdesc")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(qdesc,String)
            End If
            If (qline_memo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qline_memo")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(qline_memo,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(qvalue,Decimal)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(nonstock,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal quote_no As String, ByVal quote_suf As String, ByVal qline_no As String, ByVal quantity As Decimal, ByVal qpart_no As String, ByVal qdesc As String, ByVal qline_memo As String, ByVal qvalue As Decimal, ByVal nonstock As Boolean, ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long, ByVal UniqueID As Long) As Integer
            If (quote_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("quote_no")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(quote_no,String)
            End If
            If (quote_suf Is Nothing) Then
                Throw New Global.System.ArgumentNullException("quote_suf")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(quote_suf,String)
            End If
            If (qline_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qline_no")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(qline_no,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(quantity,Decimal)
            If (qpart_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qpart_no")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(qpart_no,String)
            End If
            If (qdesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qdesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(qdesc,String)
            End If
            If (qline_memo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qline_memo")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(qline_memo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(qvalue,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(nonstock,Boolean)
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal quote_no As String, ByVal quote_suf As String, ByVal qline_no As String, ByVal quantity As Decimal, ByVal qpart_no As String, ByVal qdesc As String, ByVal qline_memo As String, ByVal qvalue As Decimal, ByVal nonstock As Boolean, ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(quote_no, quote_suf, qline_no, quantity, qpart_no, qdesc, qline_memo, qvalue, nonstock, Original_timestamp_column, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class quoteheadTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "quotehead"
            tableMapping.ColumnMappings.Add("quote_no", "quote_no")
            tableMapping.ColumnMappings.Add("quote_suf", "quote_suf")
            tableMapping.ColumnMappings.Add("qdate", "qdate")
            tableMapping.ColumnMappings.Add("qheader", "qheader")
            tableMapping.ColumnMappings.Add("qmemo1", "qmemo1")
            tableMapping.ColumnMappings.Add("qmemo2", "qmemo2")
            tableMapping.ColumnMappings.Add("qmemo3", "qmemo3")
            tableMapping.ColumnMappings.Add("qmemo4", "qmemo4")
            tableMapping.ColumnMappings.Add("qdisc", "qdisc")
            tableMapping.ColumnMappings.Add("qwho", "qwho")
            tableMapping.ColumnMappings.Add("qinits", "qinits")
            tableMapping.ColumnMappings.Add("timestamp_column", "timestamp_column")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[quotehead] WHERE (([timestamp_column] = @Original_timestamp_co"& _ 
                "lumn) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[quotehead] ([quote_no], [quote_suf], [qdate], [qheader], [qmem"& _ 
                "o1], [qmemo2], [qmemo3], [qmemo4], [qdisc], [qwho], [qinits]) VALUES (@quote_no,"& _ 
                " @quote_suf, @qdate, @qheader, @qmemo1, @qmemo2, @qmemo3, @qmemo4, @qdisc, @qwho"& _ 
                ", @qinits);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT quote_no, quote_suf, qdate, qheader, qmemo1, qmemo2, qmemo3,"& _ 
                " qmemo4, qdisc, qwho, qinits, timestamp_column, UniqueID FROM quotehead WHERE (U"& _ 
                "niqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quote_no", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quote_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quote_suf", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quote_suf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qheader", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qheader", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qmemo1", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qmemo1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qmemo2", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qmemo2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qmemo3", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qmemo3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qmemo4", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qmemo4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qdisc", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qdisc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qinits", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qinits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[quotehead] SET [quote_no] = @quote_no, [quote_suf] = @quote_suf, [q"& _ 
                "date] = @qdate, [qheader] = @qheader, [qmemo1] = @qmemo1, [qmemo2] = @qmemo2, [q"& _ 
                "memo3] = @qmemo3, [qmemo4] = @qmemo4, [qdisc] = @qdisc, [qwho] = @qwho, [qinits]"& _ 
                " = @qinits WHERE (([timestamp_column] = @Original_timestamp_column) AND ([Unique"& _ 
                "ID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT quote_no, quote_suf, qdate, qheader, qmemo1,"& _ 
                " qmemo2, qmemo3, qmemo4, qdisc, qwho, qinits, timestamp_column, UniqueID FROM qu"& _ 
                "otehead WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quote_no", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quote_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quote_suf", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "quote_suf", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qheader", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qheader", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qmemo1", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qmemo1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qmemo2", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qmemo2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qmemo3", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qmemo3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qmemo4", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qmemo4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qdisc", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qdisc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@qinits", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "qinits", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT quote_no, quote_suf, qdate, qheader, qmemo1, qmemo2, qmemo3, qmemo4, qdisc"& _ 
                ", qwho, qinits, timestamp_column, UniqueID FROM dbo.quotehead"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        quote_no, quote_suf, qdate, qheader, qwho"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            quotehea"& _ 
                "d"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        quote_no, quote_suf, qdate, qheader, qmemo1, qmemo2, qmemo3, qmemo4"& _ 
                ", qdisc, qwho, qinits, timestamp_column, UniqueID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            quotehead"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WH"& _ 
                "ERE        (quote_no LIKE @Param1 + '%')"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.[Char], 6, Global.System.Data.ParameterDirection.Input, 0, 0, "quote_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.quoteheadDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.quoteheadDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.quoteheadDataTable = New TransvacDataV2DataSet1.quoteheadDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As TransvacDataV2DataSet1.quoteheadDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy() As TransvacDataV2DataSet1.quoteheadDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Dim dataTable As TransvacDataV2DataSet1.quoteheadDataTable = New TransvacDataV2DataSet1.quoteheadDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByQuotes(ByVal dataTable As TransvacDataV2DataSet1.quoteheadDataTable, ByVal Param1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Param1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByQuotes(ByVal Param1 As String) As TransvacDataV2DataSet1.quoteheadDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Param1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            Dim dataTable As TransvacDataV2DataSet1.quoteheadDataTable = New TransvacDataV2DataSet1.quoteheadDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.quoteheadDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "quotehead")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal quote_no As String, ByVal quote_suf As String, ByVal qdate As Date, ByVal qheader As String, ByVal qmemo1 As String, ByVal qmemo2 As String, ByVal qmemo3 As String, ByVal qmemo4 As String, ByVal qdisc As Boolean, ByVal qwho As String, ByVal qinits As String) As Integer
            If (quote_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("quote_no")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(quote_no,String)
            End If
            If (quote_suf Is Nothing) Then
                Throw New Global.System.ArgumentNullException("quote_suf")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(quote_suf,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(qdate,Date)
            If (qheader Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qheader")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(qheader,String)
            End If
            If (qmemo1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qmemo1")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(qmemo1,String)
            End If
            If (qmemo2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qmemo2")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(qmemo2,String)
            End If
            If (qmemo3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qmemo3")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(qmemo3,String)
            End If
            If (qmemo4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qmemo4")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(qmemo4,String)
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(qdisc,Boolean)
            If (qwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qwho")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(qwho,String)
            End If
            If (qinits Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qinits")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(qinits,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal quote_no As String, ByVal quote_suf As String, ByVal qdate As Date, ByVal qheader As String, ByVal qmemo1 As String, ByVal qmemo2 As String, ByVal qmemo3 As String, ByVal qmemo4 As String, ByVal qdisc As Boolean, ByVal qwho As String, ByVal qinits As String, ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long, ByVal UniqueID As Long) As Integer
            If (quote_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("quote_no")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(quote_no,String)
            End If
            If (quote_suf Is Nothing) Then
                Throw New Global.System.ArgumentNullException("quote_suf")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(quote_suf,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(qdate,Date)
            If (qheader Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qheader")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(qheader,String)
            End If
            If (qmemo1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qmemo1")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(qmemo1,String)
            End If
            If (qmemo2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qmemo2")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(qmemo2,String)
            End If
            If (qmemo3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qmemo3")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(qmemo3,String)
            End If
            If (qmemo4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qmemo4")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(qmemo4,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(qdisc,Boolean)
            If (qwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(qwho,String)
            End If
            If (qinits Is Nothing) Then
                Throw New Global.System.ArgumentNullException("qinits")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(qinits,String)
            End If
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal quote_no As String, ByVal quote_suf As String, ByVal qdate As Date, ByVal qheader As String, ByVal qmemo1 As String, ByVal qmemo2 As String, ByVal qmemo3 As String, ByVal qmemo4 As String, ByVal qdisc As Boolean, ByVal qwho As String, ByVal qinits As String, ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(quote_no, quote_suf, qdate, qheader, qmemo1, qmemo2, qmemo3, qmemo4, qdisc, qwho, qinits, Original_timestamp_column, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class statusTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "status"
            tableMapping.ColumnMappings.Add("status", "status")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[status] WHERE (([status] = @Original_status) AND ([UniqueID] ="& _ 
                " @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[status] ([status]) VALUES (@status);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT status, UniqueID "& _ 
                "FROM status WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[status] SET [status] = @status WHERE (([status] = @Original_status)"& _ 
                " AND ([UniqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT status, UniqueID FROM status WH"& _ 
                "ERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_status", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT status, UniqueID FROM dbo.status"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.statusDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.statusDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.statusDataTable = New TransvacDataV2DataSet1.statusDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.statusDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "status")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_status As String, ByVal Original_UniqueID As Long) As Integer
            If (Original_status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_status")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_status,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal status As String) As Integer
            If (status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("status")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(status,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal status As String, ByVal Original_status As String, ByVal Original_UniqueID As Long, ByVal UniqueID As Long) As Integer
            If (status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("status")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(status,String)
            End If
            If (Original_status Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_status")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_status,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal status As String, ByVal Original_status As String, ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(status, Original_status, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class teventsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tevents"
            tableMapping.ColumnMappings.Add("eassetno", "eassetno")
            tableMapping.ColumnMappings.Add("edate", "edate")
            tableMapping.ColumnMappings.Add("event", "event")
            tableMapping.ColumnMappings.Add("edesc", "edesc")
            tableMapping.ColumnMappings.Add("ewho", "ewho")
            tableMapping.ColumnMappings.Add("eperiod", "eperiod")
            tableMapping.ColumnMappings.Add("ecomplete", "ecomplete")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tevents] WHERE (([eassetno] = @Original_eassetno) AND ([edate]"& _ 
                " = @Original_edate) AND ([event] = @Original_event) AND ([edesc] = @Original_ede"& _ 
                "sc) AND ([ewho] = @Original_ewho) AND ([eperiod] = @Original_eperiod) AND ([ecom"& _ 
                "plete] = @Original_ecomplete) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_eassetno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eassetno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_edate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "edate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_event", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "event", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_edesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "edesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ewho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ewho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_eperiod", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eperiod", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ecomplete", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ecomplete", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tevents] ([eassetno], [edate], [event], [edesc], [ewho], [eper"& _ 
                "iod], [ecomplete]) VALUES (@eassetno, @edate, @event, @edesc, @ewho, @eperiod, @"& _ 
                "ecomplete);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT eassetno, edate, event, edesc, ewho, eperiod, ecomplete, Uni"& _ 
                "queID FROM tevents WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eassetno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eassetno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@edate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "edate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@event", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "event", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@edesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "edesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ewho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ewho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eperiod", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eperiod", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ecomplete", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ecomplete", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tevents] SET [eassetno] = @eassetno, [edate] = @edate, [event] = @e"& _ 
                "vent, [edesc] = @edesc, [ewho] = @ewho, [eperiod] = @eperiod, [ecomplete] = @eco"& _ 
                "mplete WHERE (([eassetno] = @Original_eassetno) AND ([edate] = @Original_edate) "& _ 
                "AND ([event] = @Original_event) AND ([edesc] = @Original_edesc) AND ([ewho] = @O"& _ 
                "riginal_ewho) AND ([eperiod] = @Original_eperiod) AND ([ecomplete] = @Original_e"& _ 
                "complete) AND ([UniqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT eassetno, edate, event"& _ 
                ", edesc, ewho, eperiod, ecomplete, UniqueID FROM tevents WHERE (UniqueID = @Uniq"& _ 
                "ueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eassetno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eassetno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@edate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "edate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@event", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "event", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@edesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "edesc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ewho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ewho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eperiod", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eperiod", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ecomplete", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ecomplete", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_eassetno", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eassetno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_edate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "edate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_event", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "event", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_edesc", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "edesc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ewho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ewho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_eperiod", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eperiod", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ecomplete", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ecomplete", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT eassetno, edate, event, edesc, ewho, eperiod, ecomplete, UniqueID FROM dbo"& _ 
                ".tevents"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.teventsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.teventsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.teventsDataTable = New TransvacDataV2DataSet1.teventsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.teventsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "tevents")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_eassetno As String, ByVal Original_edate As Date, ByVal Original_event As String, ByVal Original_edesc As String, ByVal Original_ewho As String, ByVal Original_eperiod As String, ByVal Original_ecomplete As String, ByVal Original_UniqueID As Long) As Integer
            If (Original_eassetno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_eassetno")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_eassetno,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_edate,Date)
            If (Original_event Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_event")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_event,String)
            End If
            If (Original_edesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_edesc")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_edesc,String)
            End If
            If (Original_ewho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ewho")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ewho,String)
            End If
            If (Original_eperiod Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_eperiod")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_eperiod,String)
            End If
            If (Original_ecomplete Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ecomplete")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ecomplete,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal eassetno As String, ByVal edate As Date, ByVal _event As String, ByVal edesc As String, ByVal ewho As String, ByVal eperiod As String, ByVal ecomplete As String) As Integer
            If (eassetno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("eassetno")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(eassetno,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(edate,Date)
            If (_event Is Nothing) Then
                Throw New Global.System.ArgumentNullException("_event")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(_event,String)
            End If
            If (edesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("edesc")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(edesc,String)
            End If
            If (ewho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ewho")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ewho,String)
            End If
            If (eperiod Is Nothing) Then
                Throw New Global.System.ArgumentNullException("eperiod")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(eperiod,String)
            End If
            If (ecomplete Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ecomplete")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ecomplete,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal eassetno As String,  _
                    ByVal edate As Date,  _
                    ByVal _event As String,  _
                    ByVal edesc As String,  _
                    ByVal ewho As String,  _
                    ByVal eperiod As String,  _
                    ByVal ecomplete As String,  _
                    ByVal Original_eassetno As String,  _
                    ByVal Original_edate As Date,  _
                    ByVal Original_event As String,  _
                    ByVal Original_edesc As String,  _
                    ByVal Original_ewho As String,  _
                    ByVal Original_eperiod As String,  _
                    ByVal Original_ecomplete As String,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (eassetno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("eassetno")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(eassetno,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(edate,Date)
            If (_event Is Nothing) Then
                Throw New Global.System.ArgumentNullException("_event")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(_event,String)
            End If
            If (edesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("edesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(edesc,String)
            End If
            If (ewho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ewho")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ewho,String)
            End If
            If (eperiod Is Nothing) Then
                Throw New Global.System.ArgumentNullException("eperiod")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(eperiod,String)
            End If
            If (ecomplete Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ecomplete")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ecomplete,String)
            End If
            If (Original_eassetno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_eassetno")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_eassetno,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_edate,Date)
            If (Original_event Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_event")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_event,String)
            End If
            If (Original_edesc Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_edesc")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_edesc,String)
            End If
            If (Original_ewho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ewho")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ewho,String)
            End If
            If (Original_eperiod Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_eperiod")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_eperiod,String)
            End If
            If (Original_ecomplete Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ecomplete")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ecomplete,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal eassetno As String, ByVal edate As Date, ByVal _event As String, ByVal edesc As String, ByVal ewho As String, ByVal eperiod As String, ByVal ecomplete As String, ByVal Original_eassetno As String, ByVal Original_edate As Date, ByVal Original_event As String, ByVal Original_edesc As String, ByVal Original_ewho As String, ByVal Original_eperiod As String, ByVal Original_ecomplete As String, ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(eassetno, edate, _event, edesc, ewho, eperiod, ecomplete, Original_eassetno, Original_edate, Original_event, Original_edesc, Original_ewho, Original_eperiod, Original_ecomplete, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tran2TableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tran2"
            tableMapping.ColumnMappings.Add("name", "name")
            tableMapping.ColumnMappings.Add("ad1", "ad1")
            tableMapping.ColumnMappings.Add("ad2", "ad2")
            tableMapping.ColumnMappings.Add("ad3", "ad3")
            tableMapping.ColumnMappings.Add("ad4", "ad4")
            tableMapping.ColumnMappings.Add("ad5", "ad5")
            tableMapping.ColumnMappings.Add("phone", "phone")
            tableMapping.ColumnMappings.Add("telex", "telex")
            tableMapping.ColumnMappings.Add("fax", "fax")
            tableMapping.ColumnMappings.Add("email", "email")
            tableMapping.ColumnMappings.Add("eurovat", "eurovat")
            tableMapping.ColumnMappings.Add("vatpayable", "vatpayable")
            tableMapping.ColumnMappings.Add("ifmemo", "ifmemo")
            tableMapping.ColumnMappings.Add("proforma", "proforma")
            tableMapping.ColumnMappings.Add("udate", "udate")
            tableMapping.ColumnMappings.Add("termdays", "termdays")
            tableMapping.ColumnMappings.Add("entrytype", "entrytype")
            tableMapping.ColumnMappings.Add("nwho", "nwho")
            tableMapping.ColumnMappings.Add("inuse", "inuse")
            tableMapping.ColumnMappings.Add("new_upd", "new_upd")
            tableMapping.ColumnMappings.Add("peg_pact", "peg_pact")
            tableMapping.ColumnMappings.Add("peg_lsale", "peg_lsale")
            tableMapping.ColumnMappings.Add("xcard", "xcard")
            tableMapping.ColumnMappings.Add("promo", "promo")
            tableMapping.ColumnMappings.Add("ADDMEMO", "ADDMEMO")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [tran2] ([name], [ad1], [ad2], [ad3], [ad4], [ad5], [phone], [telex],"& _ 
                " [fax], [email], [eurovat], [vatpayable], [ifmemo], [proforma], [udate], [termda"& _ 
                "ys], [entrytype], [nwho], [inuse], [new_upd], [peg_pact], [peg_lsale], [xcard], "& _ 
                "[promo], [ADDMEMO], [UniqueID]) VALUES (@name, @ad1, @ad2, @ad3, @ad4, @ad5, @ph"& _ 
                "one, @telex, @fax, @email, @eurovat, @vatpayable, @ifmemo, @proforma, @udate, @t"& _ 
                "ermdays, @entrytype, @nwho, @inuse, @new_upd, @peg_pact, @peg_lsale, @xcard, @pr"& _ 
                "omo, @ADDMEMO, @UniqueID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@name", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ad1", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ad1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ad2", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ad2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ad3", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ad3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ad4", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ad4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ad5", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ad5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@phone", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@telex", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "telex", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fax", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@email", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@eurovat", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "eurovat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatpayable", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "vatpayable", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ifmemo", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ifmemo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@proforma", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "proforma", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@udate", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "udate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@termdays", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 3, 0, "termdays", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@entrytype", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "entrytype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@inuse", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inuse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@new_upd", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "new_upd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@peg_pact", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "peg_pact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@peg_lsale", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "peg_lsale", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@xcard", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "xcard", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@promo", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "promo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ADDMEMO", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDMEMO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE       tran2"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                name = @Param1, ad1 = @Param2, ad2 = @Para"& _ 
                "m3, ad3 = @Param4, ad4 = @Param5, ad5 = @Param6, phone = @Param7, telex = @Param"& _ 
                "8, email = @Param9, fax = @Param10, eurovat = @Param11, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      "& _ 
                "   vatpayable = @Param12, ifmemo = @Param13, proforma = @Param14, udate = @Param"& _ 
                "15, termdays = @Param16, entrytype = @Param17, nwho = @Param18, inuse = @Param19"& _ 
                ", new_upd = @Param20, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         peg_pact = @Param21, xcard = @P"& _ 
                "aram22, peg_lsale = @Param23, promo = @Param24, ADDMEMO = @Param25"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE       "& _ 
                " (account = @account)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.[Char], 40, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param2", Global.System.Data.SqlDbType.[Char], 30, Global.System.Data.ParameterDirection.Input, 0, 0, "ad1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param3", Global.System.Data.SqlDbType.[Char], 30, Global.System.Data.ParameterDirection.Input, 0, 0, "ad2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param4", Global.System.Data.SqlDbType.[Char], 30, Global.System.Data.ParameterDirection.Input, 0, 0, "ad3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param5", Global.System.Data.SqlDbType.[Char], 30, Global.System.Data.ParameterDirection.Input, 0, 0, "ad4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param6", Global.System.Data.SqlDbType.[Char], 30, Global.System.Data.ParameterDirection.Input, 0, 0, "ad5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param7", Global.System.Data.SqlDbType.[Char], 15, Global.System.Data.ParameterDirection.Input, 0, 0, "phone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param8", Global.System.Data.SqlDbType.[Char], 15, Global.System.Data.ParameterDirection.Input, 0, 0, "telex", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param9", Global.System.Data.SqlDbType.[Char], 40, Global.System.Data.ParameterDirection.Input, 0, 0, "email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param10", Global.System.Data.SqlDbType.[Char], 15, Global.System.Data.ParameterDirection.Input, 0, 0, "fax", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param11", Global.System.Data.SqlDbType.[Char], 20, Global.System.Data.ParameterDirection.Input, 0, 0, "eurovat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param12", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "vatpayable", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param13", Global.System.Data.SqlDbType.[Char], 1, Global.System.Data.ParameterDirection.Input, 0, 0, "ifmemo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param14", Global.System.Data.SqlDbType.[Char], 1, Global.System.Data.ParameterDirection.Input, 0, 0, "proforma", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param15", Global.System.Data.SqlDbType.[Char], 8, Global.System.Data.ParameterDirection.Input, 0, 0, "udate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param16", Global.System.Data.SqlDbType.[Decimal], 5, Global.System.Data.ParameterDirection.Input, 3, 0, "termdays", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param17", Global.System.Data.SqlDbType.[Char], 1, Global.System.Data.ParameterDirection.Input, 0, 0, "entrytype", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param18", Global.System.Data.SqlDbType.[Char], 5, Global.System.Data.ParameterDirection.Input, 0, 0, "nwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param19", Global.System.Data.SqlDbType.[Char], 1, Global.System.Data.ParameterDirection.Input, 0, 0, "inuse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param20", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "new_upd", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param21", Global.System.Data.SqlDbType.[Char], 8, Global.System.Data.ParameterDirection.Input, 0, 0, "peg_pact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param22", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "xcard", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param23", Global.System.Data.SqlDbType.[Char], 8, Global.System.Data.ParameterDirection.Input, 0, 0, "peg_lsale", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param24", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "promo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param25", Global.System.Data.SqlDbType.NText, 1073741823, Global.System.Data.ParameterDirection.Input, 0, 0, "ADDMEMO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@account", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "account", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT name, ad1, ad2, ad3, ad4, ad5, phone, telex, fax, email, eurovat, vatpayab"& _ 
                "le, ifmemo, proforma, udate, termdays, entrytype, nwho, inuse, new_upd, peg_pact"& _ 
                ", peg_lsale, xcard, promo, ADDMEMO, UniqueID FROM tran2"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM tran2"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (account = @Param1)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.[Char], 4, Global.System.Data.ParameterDirection.Input, 0, 0, "account", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT        ADDMEMO, UniqueID, ad1, ad2, ad3, ad4, ad5, email, entrytype, eurov"& _ 
                "at, fax, ifmemo, inuse, name, new_upd, nwho, peg_lsale, peg_pact, phone, proform"& _ 
                "a, promo, telex, termdays, udate, vatpayable, xcard, account"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            tr"& _ 
                "an2"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (account = @Parma1)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Parma1", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "account", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT ADDMEMO, UniqueID, ad1, ad2, ad3, ad4, ad5, email, entrytype, eurovat, fax"& _ 
                ", ifmemo, inuse, name, new_upd, nwho, peg_lsale, peg_pact, phone, proforma, prom"& _ 
                "o, telex, termdays, udate, vatpayable, xcard FROM tran2 WHERE (name LIKE @Param1"& _ 
                " + '%')"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.[Char], 40, Global.System.Data.ParameterDirection.Input, 0, 0, "name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.tran2DataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.tran2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.tran2DataTable = New TransvacDataV2DataSet1.tran2DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByAccountID(ByVal dataTable As TransvacDataV2DataSet1.tran2DataTable, ByVal Parma1 As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Parma1,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByAccountID(ByVal Parma1 As Integer) As TransvacDataV2DataSet1.tran2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(Parma1,Integer)
            Dim dataTable As TransvacDataV2DataSet1.tran2DataTable = New TransvacDataV2DataSet1.tran2DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByName(ByVal dataTable As TransvacDataV2DataSet1.tran2DataTable, ByVal Param1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Param1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy1(ByVal Param1 As String) As TransvacDataV2DataSet1.tran2DataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Param1 Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            Dim dataTable As TransvacDataV2DataSet1.tran2DataTable = New TransvacDataV2DataSet1.tran2DataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.tran2DataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "tran2")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal name As String,  _
                    ByVal ad1 As String,  _
                    ByVal ad2 As String,  _
                    ByVal ad3 As String,  _
                    ByVal ad4 As String,  _
                    ByVal ad5 As String,  _
                    ByVal phone As String,  _
                    ByVal telex As String,  _
                    ByVal fax As String,  _
                    ByVal email As String,  _
                    ByVal eurovat As String,  _
                    ByVal vatpayable As Global.System.Nullable(Of Boolean),  _
                    ByVal ifmemo As String,  _
                    ByVal proforma As String,  _
                    ByVal udate As String,  _
                    ByVal termdays As Global.System.Nullable(Of Decimal),  _
                    ByVal entrytype As String,  _
                    ByVal nwho As String,  _
                    ByVal inuse As String,  _
                    ByVal new_upd As Global.System.Nullable(Of Date),  _
                    ByVal peg_pact As String,  _
                    ByVal peg_lsale As String,  _
                    ByVal xcard As Global.System.Nullable(Of Boolean),  _
                    ByVal promo As Global.System.Nullable(Of Boolean),  _
                    ByVal ADDMEMO As String,  _
                    ByVal UniqueID As Global.System.Nullable(Of Decimal)) As Integer
            If (name Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(name,String)
            End If
            If (ad1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ad1,String)
            End If
            If (ad2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ad2,String)
            End If
            If (ad3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ad3,String)
            End If
            If (ad4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ad4,String)
            End If
            If (ad5 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ad5,String)
            End If
            If (phone Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(phone,String)
            End If
            If (telex Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(telex,String)
            End If
            If (fax Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(fax,String)
            End If
            If (email Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(email,String)
            End If
            If (eurovat Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(eurovat,String)
            End If
            If (vatpayable.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(vatpayable.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (ifmemo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(ifmemo,String)
            End If
            If (proforma Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(proforma,String)
            End If
            If (udate Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(udate,String)
            End If
            If (termdays.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(termdays.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (entrytype Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(entrytype,String)
            End If
            If (nwho Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(nwho,String)
            End If
            If (inuse Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(inuse,String)
            End If
            If (new_upd.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(new_upd.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (peg_pact Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(peg_pact,String)
            End If
            If (peg_lsale Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(peg_lsale,String)
            End If
            If (xcard.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(xcard.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (promo.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(promo.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (ADDMEMO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(ADDMEMO,String)
            End If
            If (UniqueID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(UniqueID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Param1 As String,  _
                    ByVal Param2 As String,  _
                    ByVal Param3 As String,  _
                    ByVal Param4 As String,  _
                    ByVal Param5 As String,  _
                    ByVal Param6 As String,  _
                    ByVal Param7 As String,  _
                    ByVal Param8 As String,  _
                    ByVal Param9 As String,  _
                    ByVal Param10 As String,  _
                    ByVal Param11 As String,  _
                    ByVal Param12 As Global.System.Nullable(Of Boolean),  _
                    ByVal Param13 As String,  _
                    ByVal Param14 As String,  _
                    ByVal Param15 As String,  _
                    ByVal Param16 As Global.System.Nullable(Of Decimal),  _
                    ByVal Param17 As String,  _
                    ByVal Param18 As String,  _
                    ByVal Param19 As String,  _
                    ByVal Param20 As Global.System.Nullable(Of Date),  _
                    ByVal Param21 As String,  _
                    ByVal Param22 As Global.System.Nullable(Of Boolean),  _
                    ByVal Param23 As String,  _
                    ByVal Param24 As Global.System.Nullable(Of Boolean),  _
                    ByVal Param25 As String,  _
                    ByVal account As Integer) As Integer
            If (Param1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Param1,String)
            End If
            If (Param2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Param2,String)
            End If
            If (Param3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Param3,String)
            End If
            If (Param4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Param4,String)
            End If
            If (Param5 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Param5,String)
            End If
            If (Param6 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Param6,String)
            End If
            If (Param7 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Param7,String)
            End If
            If (Param8 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Param8,String)
            End If
            If (Param9 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Param9,String)
            End If
            If (Param10 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Param10,String)
            End If
            If (Param11 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Param11,String)
            End If
            If (Param12.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Param12.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Param13 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Param13,String)
            End If
            If (Param14 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Param14,String)
            End If
            If (Param15 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Param15,String)
            End If
            If (Param16.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Param16.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Param17 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Param17,String)
            End If
            If (Param18 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Param18,String)
            End If
            If (Param19 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Param19,String)
            End If
            If (Param20.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Param20.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Param21 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Param21,String)
            End If
            If (Param22.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Param22.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Param23 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Param23,String)
            End If
            If (Param24.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Param24.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Param25 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Param25,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(account,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function AddressDeleteQuery(ByVal Param1 As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (Param1 Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(Param1,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tranbinsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tranbins"
            tableMapping.ColumnMappings.Add("iicode", "iicode")
            tableMapping.ColumnMappings.Add("sourcecde", "sourcecde")
            tableMapping.ColumnMappings.Add("assured", "assured")
            tableMapping.ColumnMappings.Add("locatebin", "locatebin")
            tableMapping.ColumnMappings.Add("quantybin", "quantybin")
            tableMapping.ColumnMappings.Add("alloc", "alloc")
            tableMapping.ColumnMappings.Add("currcy_cde", "currcy_cde")
            tableMapping.ColumnMappings.Add("unit_value", "unit_value")
            tableMapping.ColumnMappings.Add("catalog_dt", "catalog_dt")
            tableMapping.ColumnMappings.Add("iiupdate", "iiupdate")
            tableMapping.ColumnMappings.Add("rec_type", "rec_type")
            tableMapping.ColumnMappings.Add("snwho", "snwho")
            tableMapping.ColumnMappings.Add("sinuse", "sinuse")
            tableMapping.ColumnMappings.Add("weight", "weight")
            tableMapping.ColumnMappings.Add("wqty", "wqty")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tranbins] WHERE (([iicode] = @Original_iicode) AND ([sourcecde"& _ 
                "] = @Original_sourcecde) AND ([assured] = @Original_assured) AND ([locatebin] = "& _ 
                "@Original_locatebin) AND ([quantybin] = @Original_quantybin) AND ([alloc] = @Ori"& _ 
                "ginal_alloc) AND ([currcy_cde] = @Original_currcy_cde) AND ([unit_value] = @Orig"& _ 
                "inal_unit_value) AND ([catalog_dt] = @Original_catalog_dt) AND ([iiupdate] = @Or"& _ 
                "iginal_iiupdate) AND ([rec_type] = @Original_rec_type) AND ([snwho] = @Original_"& _ 
                "snwho) AND ([sinuse] = @Original_sinuse) AND ([weight] = @Original_weight) AND ("& _ 
                "[wqty] = @Original_wqty) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sourcecde", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sourcecde", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_locatebin", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "locatebin", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_quantybin", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "quantybin", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alloc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "alloc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_currcy_cde", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currcy_cde", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_unit_value", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unit_value", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catalog_dt", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catalog_dt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iiupdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iiupdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_snwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "snwho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sinuse", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sinuse", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_weight", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 3, "weight", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wqty", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "wqty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tranbins] ([iicode], [sourcecde], [assured], [locatebin], [qua"& _ 
                "ntybin], [alloc], [currcy_cde], [unit_value], [catalog_dt], [iiupdate], [rec_typ"& _ 
                "e], [snwho], [sinuse], [weight], [wqty]) VALUES (@iicode, @sourcecde, @assured, "& _ 
                "@locatebin, @quantybin, @alloc, @currcy_cde, @unit_value, @catalog_dt, @iiupdate"& _ 
                ", @rec_type, @snwho, @sinuse, @weight, @wqty);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT iicode, sourcecde, assure"& _ 
                "d, locatebin, quantybin, alloc, currcy_cde, unit_value, catalog_dt, iiupdate, re"& _ 
                "c_type, snwho, sinuse, weight, wqty, UniqueID FROM tranbins WHERE (UniqueID = SC"& _ 
                "OPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sourcecde", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sourcecde", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@locatebin", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "locatebin", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quantybin", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "quantybin", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alloc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "alloc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@currcy_cde", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currcy_cde", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unit_value", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unit_value", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catalog_dt", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catalog_dt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iiupdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iiupdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@snwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "snwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sinuse", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sinuse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@weight", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 3, "weight", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wqty", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "wqty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tranbins] SET [iicode] = @iicode, [sourcecde] = @sourcecde, [assure"& _ 
                "d] = @assured, [locatebin] = @locatebin, [quantybin] = @quantybin, [alloc] = @al"& _ 
                "loc, [currcy_cde] = @currcy_cde, [unit_value] = @unit_value, [catalog_dt] = @cat"& _ 
                "alog_dt, [iiupdate] = @iiupdate, [rec_type] = @rec_type, [snwho] = @snwho, [sinu"& _ 
                "se] = @sinuse, [weight] = @weight, [wqty] = @wqty WHERE (([iicode] = @Original_i"& _ 
                "icode) AND ([sourcecde] = @Original_sourcecde) AND ([assured] = @Original_assure"& _ 
                "d) AND ([locatebin] = @Original_locatebin) AND ([quantybin] = @Original_quantybi"& _ 
                "n) AND ([alloc] = @Original_alloc) AND ([currcy_cde] = @Original_currcy_cde) AND"& _ 
                " ([unit_value] = @Original_unit_value) AND ([catalog_dt] = @Original_catalog_dt)"& _ 
                " AND ([iiupdate] = @Original_iiupdate) AND ([rec_type] = @Original_rec_type) AND"& _ 
                " ([snwho] = @Original_snwho) AND ([sinuse] = @Original_sinuse) AND ([weight] = @"& _ 
                "Original_weight) AND ([wqty] = @Original_wqty) AND ([UniqueID] = @Original_Uniqu"& _ 
                "eID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT iicode, sourcecde, assured, locatebin, quantybin, alloc, currcy_c"& _ 
                "de, unit_value, catalog_dt, iiupdate, rec_type, snwho, sinuse, weight, wqty, Uni"& _ 
                "queID FROM tranbins WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sourcecde", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sourcecde", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@locatebin", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "locatebin", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quantybin", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "quantybin", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@alloc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "alloc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@currcy_cde", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currcy_cde", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unit_value", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unit_value", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catalog_dt", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catalog_dt", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@iiupdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iiupdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@snwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "snwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sinuse", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sinuse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@weight", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 3, "weight", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@wqty", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "wqty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iicode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sourcecde", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sourcecde", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_assured", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "assured", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_locatebin", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "locatebin", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_quantybin", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "quantybin", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_alloc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "alloc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_currcy_cde", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "currcy_cde", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_unit_value", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unit_value", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catalog_dt", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catalog_dt", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_iiupdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "iiupdate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_rec_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "rec_type", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_snwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "snwho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sinuse", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sinuse", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_weight", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 3, "weight", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_wqty", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "wqty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT iicode, sourcecde, assured, locatebin, quantybin, alloc, currcy_cde, unit_"& _ 
                "value, catalog_dt, iiupdate, rec_type, snwho, sinuse, weight, wqty, UniqueID FRO"& _ 
                "M dbo.tranbins"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        iicode, sourcecde, assured, locatebin, quantybin, alloc, currcy_cde"& _ 
                ", unit_value, catalog_dt, iiupdate, rec_type, snwho, sinuse, weight, wqty, Uniqu"& _ 
                "eID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            tranbins"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (iicode LIKE @Param1 + '%')"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.[Char], 5, Global.System.Data.ParameterDirection.Input, 0, 0, "iicode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.tranbinsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.tranbinsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.tranbinsDataTable = New TransvacDataV2DataSet1.tranbinsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByIDCode(ByVal dataTable As TransvacDataV2DataSet1.tranbinsDataTable, ByVal Param1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByIDCode(ByVal Param1 As String) As TransvacDataV2DataSet1.tranbinsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            Dim dataTable As TransvacDataV2DataSet1.tranbinsDataTable = New TransvacDataV2DataSet1.tranbinsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.tranbinsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "tranbins")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_iicode As String,  _
                    ByVal Original_sourcecde As String,  _
                    ByVal Original_assured As String,  _
                    ByVal Original_locatebin As String,  _
                    ByVal Original_quantybin As Decimal,  _
                    ByVal Original_alloc As Decimal,  _
                    ByVal Original_currcy_cde As String,  _
                    ByVal Original_unit_value As String,  _
                    ByVal Original_catalog_dt As Date,  _
                    ByVal Original_iiupdate As Date,  _
                    ByVal Original_rec_type As String,  _
                    ByVal Original_snwho As String,  _
                    ByVal Original_sinuse As String,  _
                    ByVal Original_weight As Decimal,  _
                    ByVal Original_wqty As Decimal,  _
                    ByVal Original_UniqueID As Long) As Integer
            If (Original_iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iicode")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_iicode,String)
            End If
            If (Original_sourcecde Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sourcecde")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_sourcecde,String)
            End If
            If (Original_assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_assured")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_assured,String)
            End If
            If (Original_locatebin Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_locatebin")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_locatebin,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_quantybin,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_alloc,Decimal)
            If (Original_currcy_cde Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_currcy_cde")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_currcy_cde,String)
            End If
            If (Original_unit_value Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_unit_value")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_unit_value,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_catalog_dt,Date)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_iiupdate,Date)
            If (Original_rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_rec_type")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_rec_type,String)
            End If
            If (Original_snwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_snwho")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_snwho,String)
            End If
            If (Original_sinuse Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sinuse")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_sinuse,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_weight,Decimal)
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_wqty,Decimal)
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal iicode As String, ByVal sourcecde As String, ByVal assured As String, ByVal locatebin As String, ByVal quantybin As Decimal, ByVal alloc As Decimal, ByVal currcy_cde As String, ByVal unit_value As String, ByVal catalog_dt As Date, ByVal iiupdate As Date, ByVal rec_type As String, ByVal snwho As String, ByVal sinuse As String, ByVal weight As Decimal, ByVal wqty As Decimal) As Integer
            If (iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iicode")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(iicode,String)
            End If
            If (sourcecde Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sourcecde")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(sourcecde,String)
            End If
            If (assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("assured")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(assured,String)
            End If
            If (locatebin Is Nothing) Then
                Throw New Global.System.ArgumentNullException("locatebin")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(locatebin,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(quantybin,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(alloc,Decimal)
            If (currcy_cde Is Nothing) Then
                Throw New Global.System.ArgumentNullException("currcy_cde")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(currcy_cde,String)
            End If
            If (unit_value Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit_value")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(unit_value,String)
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(catalog_dt,Date)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(iiupdate,Date)
            If (rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("rec_type")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(rec_type,String)
            End If
            If (snwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("snwho")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(snwho,String)
            End If
            If (sinuse Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sinuse")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(sinuse,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(weight,Decimal)
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(wqty,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal iicode As String,  _
                    ByVal sourcecde As String,  _
                    ByVal assured As String,  _
                    ByVal locatebin As String,  _
                    ByVal quantybin As Decimal,  _
                    ByVal alloc As Decimal,  _
                    ByVal currcy_cde As String,  _
                    ByVal unit_value As String,  _
                    ByVal catalog_dt As Date,  _
                    ByVal iiupdate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal snwho As String,  _
                    ByVal sinuse As String,  _
                    ByVal weight As Decimal,  _
                    ByVal wqty As Decimal,  _
                    ByVal Original_iicode As String,  _
                    ByVal Original_sourcecde As String,  _
                    ByVal Original_assured As String,  _
                    ByVal Original_locatebin As String,  _
                    ByVal Original_quantybin As Decimal,  _
                    ByVal Original_alloc As Decimal,  _
                    ByVal Original_currcy_cde As String,  _
                    ByVal Original_unit_value As String,  _
                    ByVal Original_catalog_dt As Date,  _
                    ByVal Original_iiupdate As Date,  _
                    ByVal Original_rec_type As String,  _
                    ByVal Original_snwho As String,  _
                    ByVal Original_sinuse As String,  _
                    ByVal Original_weight As Decimal,  _
                    ByVal Original_wqty As Decimal,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("iicode")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(iicode,String)
            End If
            If (sourcecde Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sourcecde")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(sourcecde,String)
            End If
            If (assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("assured")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(assured,String)
            End If
            If (locatebin Is Nothing) Then
                Throw New Global.System.ArgumentNullException("locatebin")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(locatebin,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(quantybin,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(alloc,Decimal)
            If (currcy_cde Is Nothing) Then
                Throw New Global.System.ArgumentNullException("currcy_cde")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(currcy_cde,String)
            End If
            If (unit_value Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unit_value")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(unit_value,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(catalog_dt,Date)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(iiupdate,Date)
            If (rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("rec_type")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(rec_type,String)
            End If
            If (snwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("snwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(snwho,String)
            End If
            If (sinuse Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sinuse")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(sinuse,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(weight,Decimal)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(wqty,Decimal)
            If (Original_iicode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_iicode")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_iicode,String)
            End If
            If (Original_sourcecde Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sourcecde")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_sourcecde,String)
            End If
            If (Original_assured Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_assured")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_assured,String)
            End If
            If (Original_locatebin Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_locatebin")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_locatebin,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_quantybin,Decimal)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_alloc,Decimal)
            If (Original_currcy_cde Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_currcy_cde")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_currcy_cde,String)
            End If
            If (Original_unit_value Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_unit_value")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_unit_value,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_catalog_dt,Date)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_iiupdate,Date)
            If (Original_rec_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_rec_type")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_rec_type,String)
            End If
            If (Original_snwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_snwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_snwho,String)
            End If
            If (Original_sinuse Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sinuse")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_sinuse,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_weight,Decimal)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_wqty,Decimal)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal iicode As String,  _
                    ByVal sourcecde As String,  _
                    ByVal assured As String,  _
                    ByVal locatebin As String,  _
                    ByVal quantybin As Decimal,  _
                    ByVal alloc As Decimal,  _
                    ByVal currcy_cde As String,  _
                    ByVal unit_value As String,  _
                    ByVal catalog_dt As Date,  _
                    ByVal iiupdate As Date,  _
                    ByVal rec_type As String,  _
                    ByVal snwho As String,  _
                    ByVal sinuse As String,  _
                    ByVal weight As Decimal,  _
                    ByVal wqty As Decimal,  _
                    ByVal Original_iicode As String,  _
                    ByVal Original_sourcecde As String,  _
                    ByVal Original_assured As String,  _
                    ByVal Original_locatebin As String,  _
                    ByVal Original_quantybin As Decimal,  _
                    ByVal Original_alloc As Decimal,  _
                    ByVal Original_currcy_cde As String,  _
                    ByVal Original_unit_value As String,  _
                    ByVal Original_catalog_dt As Date,  _
                    ByVal Original_iiupdate As Date,  _
                    ByVal Original_rec_type As String,  _
                    ByVal Original_snwho As String,  _
                    ByVal Original_sinuse As String,  _
                    ByVal Original_weight As Decimal,  _
                    ByVal Original_wqty As Decimal,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(iicode, sourcecde, assured, locatebin, quantybin, alloc, currcy_cde, unit_value, catalog_dt, iiupdate, rec_type, snwho, sinuse, weight, wqty, Original_iicode, Original_sourcecde, Original_assured, Original_locatebin, Original_quantybin, Original_alloc, Original_currcy_cde, Original_unit_value, Original_catalog_dt, Original_iiupdate, Original_rec_type, Original_snwho, Original_sinuse, Original_weight, Original_wqty, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tranctlTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tranctl"
            tableMapping.ColumnMappings.Add("invkey", "invkey")
            tableMapping.ColumnMappings.Add("evaccat", "evaccat")
            tableMapping.ColumnMappings.Add("tempinv", "tempinv")
            tableMapping.ColumnMappings.Add("linvno", "linvno")
            tableMapping.ColumnMappings.Add("vatpc", "vatpc")
            tableMapping.ColumnMappings.Add("holdnote", "holdnote")
            tableMapping.ColumnMappings.Add("lquote", "lquote")
            tableMapping.ColumnMappings.Add("draftsord", "draftsord")
            tableMapping.ColumnMappings.Add("ldate", "ldate")
            tableMapping.ColumnMappings.Add("twho", "twho")
            tableMapping.ColumnMappings.Add("quoteno", "quoteno")
            tableMapping.ColumnMappings.Add("orderno", "orderno")
            tableMapping.ColumnMappings.Add("idcode", "idcode")
            tableMapping.ColumnMappings.Add("invno", "invno")
            tableMapping.ColumnMappings.Add("projectno", "projectno")
            tableMapping.ColumnMappings.Add("accno", "accno")
            tableMapping.ColumnMappings.Add("assetno", "assetno")
            tableMapping.ColumnMappings.Add("woorderno", "woorderno")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tranctl] WHERE (([invkey] = @Original_invkey) AND ([evaccat] ="& _ 
                " @Original_evaccat) AND ([tempinv] = @Original_tempinv) AND ([linvno] = @Origina"& _ 
                "l_linvno) AND ([vatpc] = @Original_vatpc) AND ([holdnote] = @Original_holdnote) "& _ 
                "AND ([lquote] = @Original_lquote) AND ([draftsord] = @Original_draftsord) AND (["& _ 
                "ldate] = @Original_ldate) AND ([twho] = @Original_twho) AND ([quoteno] = @Origin"& _ 
                "al_quoteno) AND ([orderno] = @Original_orderno) AND ([idcode] = @Original_idcode"& _ 
                ") AND ([invno] = @Original_invno) AND ([projectno] = @Original_projectno) AND (["& _ 
                "accno] = @Original_accno) AND ([assetno] = @Original_assetno) AND ([woorderno] ="& _ 
                " @Original_woorderno) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_invkey", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invkey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_evaccat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "evaccat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tempinv", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "tempinv", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_linvno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "linvno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_vatpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "vatpc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_holdnote", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "holdnote", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_lquote", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "lquote", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_draftsord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "draftsord", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_twho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "twho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_quoteno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "quoteno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_orderno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "orderno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_idcode", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "idcode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_invno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "invno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_projectno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "projectno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_accno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "accno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_assetno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "assetno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_woorderno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "woorderno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tranctl] ([invkey], [evaccat], [tempinv], [linvno], [vatpc], ["& _ 
                "holdnote], [lquote], [draftsord], [ldate], [twho], [quoteno], [orderno], [idcode"& _ 
                "], [invno], [projectno], [accno], [assetno], [woorderno]) VALUES (@invkey, @evac"& _ 
                "cat, @tempinv, @linvno, @vatpc, @holdnote, @lquote, @draftsord, @ldate, @twho, @"& _ 
                "quoteno, @orderno, @idcode, @invno, @projectno, @accno, @assetno, @woorderno);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT invkey, evaccat, tempinv, linvno, vatpc, holdnote, lquote, draftsord, lda"& _ 
                "te, twho, quoteno, orderno, idcode, invno, projectno, accno, assetno, woorderno,"& _ 
                " UniqueID FROM tranctl WHERE (UniqueID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invkey", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invkey", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@evaccat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "evaccat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tempinv", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "tempinv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@linvno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "linvno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "vatpc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@holdnote", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "holdnote", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lquote", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "lquote", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@draftsord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "draftsord", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@twho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "twho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quoteno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "quoteno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@orderno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "orderno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idcode", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "idcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "invno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@projectno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "projectno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@accno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "accno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@assetno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "assetno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@woorderno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "woorderno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tranctl] SET [invkey] = @invkey, [evaccat] = @evaccat, [tempinv] = "& _ 
                "@tempinv, [linvno] = @linvno, [vatpc] = @vatpc, [holdnote] = @holdnote, [lquote]"& _ 
                " = @lquote, [draftsord] = @draftsord, [ldate] = @ldate, [twho] = @twho, [quoteno"& _ 
                "] = @quoteno, [orderno] = @orderno, [idcode] = @idcode, [invno] = @invno, [proje"& _ 
                "ctno] = @projectno, [accno] = @accno, [assetno] = @assetno, [woorderno] = @woord"& _ 
                "erno WHERE (([invkey] = @Original_invkey) AND ([evaccat] = @Original_evaccat) AN"& _ 
                "D ([tempinv] = @Original_tempinv) AND ([linvno] = @Original_linvno) AND ([vatpc]"& _ 
                " = @Original_vatpc) AND ([holdnote] = @Original_holdnote) AND ([lquote] = @Origi"& _ 
                "nal_lquote) AND ([draftsord] = @Original_draftsord) AND ([ldate] = @Original_lda"& _ 
                "te) AND ([twho] = @Original_twho) AND ([quoteno] = @Original_quoteno) AND ([orde"& _ 
                "rno] = @Original_orderno) AND ([idcode] = @Original_idcode) AND ([invno] = @Orig"& _ 
                "inal_invno) AND ([projectno] = @Original_projectno) AND ([accno] = @Original_acc"& _ 
                "no) AND ([assetno] = @Original_assetno) AND ([woorderno] = @Original_woorderno) "& _ 
                "AND ([UniqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT invkey, evaccat, tempinv, linvno"& _ 
                ", vatpc, holdnote, lquote, draftsord, ldate, twho, quoteno, orderno, idcode, inv"& _ 
                "no, projectno, accno, assetno, woorderno, UniqueID FROM tranctl WHERE (UniqueID "& _ 
                "= @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invkey", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invkey", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@evaccat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "evaccat", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@tempinv", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "tempinv", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@linvno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "linvno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vatpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "vatpc", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@holdnote", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "holdnote", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lquote", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "lquote", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@draftsord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "draftsord", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@twho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "twho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@quoteno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "quoteno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@orderno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "orderno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idcode", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "idcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "invno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@projectno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "projectno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@accno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "accno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@assetno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "assetno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@woorderno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "woorderno", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_invkey", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invkey", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_evaccat", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "evaccat", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_tempinv", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "tempinv", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_linvno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "linvno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_vatpc", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 2, "vatpc", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_holdnote", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "holdnote", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_lquote", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "lquote", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_draftsord", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "draftsord", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ldate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ldate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_twho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "twho", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_quoteno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "quoteno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_orderno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "orderno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_idcode", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "idcode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_invno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "invno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_projectno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "projectno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_accno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "accno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_assetno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 6, 0, "assetno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_woorderno", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "woorderno", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT invkey, evaccat, tempinv, linvno, vatpc, holdnote, lquote, draftsord, ldat"& _ 
                "e, twho, quoteno, orderno, idcode, invno, projectno, accno, assetno, woorderno, "& _ 
                "UniqueID FROM dbo.tranctl"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.tranctlDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.tranctlDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.tranctlDataTable = New TransvacDataV2DataSet1.tranctlDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.tranctlDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "tranctl")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_invkey As String,  _
                    ByVal Original_evaccat As Date,  _
                    ByVal Original_tempinv As Decimal,  _
                    ByVal Original_linvno As Decimal,  _
                    ByVal Original_vatpc As Decimal,  _
                    ByVal Original_holdnote As Decimal,  _
                    ByVal Original_lquote As Decimal,  _
                    ByVal Original_draftsord As Decimal,  _
                    ByVal Original_ldate As Date,  _
                    ByVal Original_twho As String,  _
                    ByVal Original_quoteno As Decimal,  _
                    ByVal Original_orderno As Decimal,  _
                    ByVal Original_idcode As Decimal,  _
                    ByVal Original_invno As Decimal,  _
                    ByVal Original_projectno As Decimal,  _
                    ByVal Original_accno As Decimal,  _
                    ByVal Original_assetno As Decimal,  _
                    ByVal Original_woorderno As Decimal,  _
                    ByVal Original_UniqueID As Long) As Integer
            If (Original_invkey Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_invkey")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_invkey,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_evaccat,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_tempinv,Decimal)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_linvno,Decimal)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_vatpc,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_holdnote,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_lquote,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_draftsord,Decimal)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ldate,Date)
            If (Original_twho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_twho")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_twho,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_quoteno,Decimal)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_orderno,Decimal)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_idcode,Decimal)
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_invno,Decimal)
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_projectno,Decimal)
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_accno,Decimal)
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_assetno,Decimal)
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_woorderno,Decimal)
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal invkey As String,  _
                    ByVal evaccat As Date,  _
                    ByVal tempinv As Decimal,  _
                    ByVal linvno As Decimal,  _
                    ByVal vatpc As Decimal,  _
                    ByVal holdnote As Decimal,  _
                    ByVal lquote As Decimal,  _
                    ByVal draftsord As Decimal,  _
                    ByVal ldate As Date,  _
                    ByVal twho As String,  _
                    ByVal quoteno As Decimal,  _
                    ByVal orderno As Decimal,  _
                    ByVal idcode As Decimal,  _
                    ByVal invno As Decimal,  _
                    ByVal projectno As Decimal,  _
                    ByVal accno As Decimal,  _
                    ByVal assetno As Decimal,  _
                    ByVal woorderno As Decimal) As Integer
            If (invkey Is Nothing) Then
                Throw New Global.System.ArgumentNullException("invkey")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(invkey,String)
            End If
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(evaccat,Date)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(tempinv,Decimal)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(linvno,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(vatpc,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(holdnote,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(lquote,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(draftsord,Decimal)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(ldate,Date)
            If (twho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("twho")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(twho,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(quoteno,Decimal)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(orderno,Decimal)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(idcode,Decimal)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(invno,Decimal)
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(projectno,Decimal)
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(accno,Decimal)
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(assetno,Decimal)
            Me.Adapter.InsertCommand.Parameters(17).Value = CType(woorderno,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal invkey As String,  _
                    ByVal evaccat As Date,  _
                    ByVal tempinv As Decimal,  _
                    ByVal linvno As Decimal,  _
                    ByVal vatpc As Decimal,  _
                    ByVal holdnote As Decimal,  _
                    ByVal lquote As Decimal,  _
                    ByVal draftsord As Decimal,  _
                    ByVal ldate As Date,  _
                    ByVal twho As String,  _
                    ByVal quoteno As Decimal,  _
                    ByVal orderno As Decimal,  _
                    ByVal idcode As Decimal,  _
                    ByVal invno As Decimal,  _
                    ByVal projectno As Decimal,  _
                    ByVal accno As Decimal,  _
                    ByVal assetno As Decimal,  _
                    ByVal woorderno As Decimal,  _
                    ByVal Original_invkey As String,  _
                    ByVal Original_evaccat As Date,  _
                    ByVal Original_tempinv As Decimal,  _
                    ByVal Original_linvno As Decimal,  _
                    ByVal Original_vatpc As Decimal,  _
                    ByVal Original_holdnote As Decimal,  _
                    ByVal Original_lquote As Decimal,  _
                    ByVal Original_draftsord As Decimal,  _
                    ByVal Original_ldate As Date,  _
                    ByVal Original_twho As String,  _
                    ByVal Original_quoteno As Decimal,  _
                    ByVal Original_orderno As Decimal,  _
                    ByVal Original_idcode As Decimal,  _
                    ByVal Original_invno As Decimal,  _
                    ByVal Original_projectno As Decimal,  _
                    ByVal Original_accno As Decimal,  _
                    ByVal Original_assetno As Decimal,  _
                    ByVal Original_woorderno As Decimal,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (invkey Is Nothing) Then
                Throw New Global.System.ArgumentNullException("invkey")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(invkey,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(evaccat,Date)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(tempinv,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(linvno,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(vatpc,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(holdnote,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(lquote,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(draftsord,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ldate,Date)
            If (twho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("twho")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(twho,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(quoteno,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(orderno,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(idcode,Decimal)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(invno,Decimal)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(projectno,Decimal)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(accno,Decimal)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(assetno,Decimal)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(woorderno,Decimal)
            If (Original_invkey Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_invkey")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_invkey,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_evaccat,Date)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_tempinv,Decimal)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_linvno,Decimal)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_vatpc,Decimal)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_holdnote,Decimal)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_lquote,Decimal)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_draftsord,Decimal)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_ldate,Date)
            If (Original_twho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_twho")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_twho,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_quoteno,Decimal)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_orderno,Decimal)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_idcode,Decimal)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_invno,Decimal)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_projectno,Decimal)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_accno,Decimal)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_assetno,Decimal)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_woorderno,Decimal)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal invkey As String,  _
                    ByVal evaccat As Date,  _
                    ByVal tempinv As Decimal,  _
                    ByVal linvno As Decimal,  _
                    ByVal vatpc As Decimal,  _
                    ByVal holdnote As Decimal,  _
                    ByVal lquote As Decimal,  _
                    ByVal draftsord As Decimal,  _
                    ByVal ldate As Date,  _
                    ByVal twho As String,  _
                    ByVal quoteno As Decimal,  _
                    ByVal orderno As Decimal,  _
                    ByVal idcode As Decimal,  _
                    ByVal invno As Decimal,  _
                    ByVal projectno As Decimal,  _
                    ByVal accno As Decimal,  _
                    ByVal assetno As Decimal,  _
                    ByVal woorderno As Decimal,  _
                    ByVal Original_invkey As String,  _
                    ByVal Original_evaccat As Date,  _
                    ByVal Original_tempinv As Decimal,  _
                    ByVal Original_linvno As Decimal,  _
                    ByVal Original_vatpc As Decimal,  _
                    ByVal Original_holdnote As Decimal,  _
                    ByVal Original_lquote As Decimal,  _
                    ByVal Original_draftsord As Decimal,  _
                    ByVal Original_ldate As Date,  _
                    ByVal Original_twho As String,  _
                    ByVal Original_quoteno As Decimal,  _
                    ByVal Original_orderno As Decimal,  _
                    ByVal Original_idcode As Decimal,  _
                    ByVal Original_invno As Decimal,  _
                    ByVal Original_projectno As Decimal,  _
                    ByVal Original_accno As Decimal,  _
                    ByVal Original_assetno As Decimal,  _
                    ByVal Original_woorderno As Decimal,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(invkey, evaccat, tempinv, linvno, vatpc, holdnote, lquote, draftsord, ldate, twho, quoteno, orderno, idcode, invno, projectno, accno, assetno, woorderno, Original_invkey, Original_evaccat, Original_tempinv, Original_linvno, Original_vatpc, Original_holdnote, Original_lquote, Original_draftsord, Original_ldate, Original_twho, Original_quoteno, Original_orderno, Original_idcode, Original_invno, Original_projectno, Original_accno, Original_assetno, Original_woorderno, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class trandescTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "trandesc"
            tableMapping.ColumnMappings.Add("pcode", "pcode")
            tableMapping.ColumnMappings.Add("psupplier", "psupplier")
            tableMapping.ColumnMappings.Add("descriptn", "descriptn")
            tableMapping.ColumnMappings.Add("minstock", "minstock")
            tableMapping.ColumnMappings.Add("minorder", "minorder")
            tableMapping.ColumnMappings.Add("ifmemo", "ifmemo")
            tableMapping.ColumnMappings.Add("idupdate", "idupdate")
            tableMapping.ColumnMappings.Add("idcode", "idcode")
            tableMapping.ColumnMappings.Add("nwho", "nwho")
            tableMapping.ColumnMappings.Add("inuse", "inuse")
            tableMapping.ColumnMappings.Add("descmemo", "descmemo")
            tableMapping.ColumnMappings.Add("memodate", "memodate")
            tableMapping.ColumnMappings.Add("obsolete", "obsolete")
            tableMapping.ColumnMappings.Add("obmessage", "obmessage")
            tableMapping.ColumnMappings.Add("ccode", "ccode")
            tableMapping.ColumnMappings.Add("timestamp_column", "timestamp_column")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[trandesc] WHERE (([timestamp_column] = @Original_timestamp_col"& _ 
                "umn) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[trandesc] ([pcode], [psupplier], [descriptn], [minstock], [min"& _ 
                "order], [ifmemo], [idupdate], [idcode], [nwho], [inuse], [descmemo], [memodate],"& _ 
                " [obsolete], [obmessage], [ccode]) VALUES (@pcode, @psupplier, @descriptn, @mins"& _ 
                "tock, @minorder, @ifmemo, @idupdate, @idcode, @nwho, @inuse, @descmemo, @memodat"& _ 
                "e, @obsolete, @obmessage, @ccode);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pcode, psupplier, descriptn, minstock"& _ 
                ", minorder, ifmemo, idupdate, idcode, nwho, inuse, descmemo, memodate, obsolete,"& _ 
                " obmessage, ccode, timestamp_column, UniqueID FROM trandesc WHERE (UniqueID = SC"& _ 
                "OPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pcode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@psupplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "psupplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@descriptn", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "descriptn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@minstock", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "minstock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@minorder", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "minorder", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ifmemo", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ifmemo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idupdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idupdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idcode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@inuse", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inuse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@descmemo", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "descmemo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@memodate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "memodate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@obsolete", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "obsolete", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@obmessage", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "obmessage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ccode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ccode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[trandesc] SET [pcode] = @pcode, [psupplier] = @psupplier, [descript"& _ 
                "n] = @descriptn, [minstock] = @minstock, [minorder] = @minorder, [ifmemo] = @ifm"& _ 
                "emo, [idupdate] = @idupdate, [idcode] = @idcode, [nwho] = @nwho, [inuse] = @inus"& _ 
                "e, [descmemo] = @descmemo, [memodate] = @memodate, [obsolete] = @obsolete, [obme"& _ 
                "ssage] = @obmessage, [ccode] = @ccode WHERE (([timestamp_column] = @Original_tim"& _ 
                "estamp_column) AND ([UniqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT pcode, psupplier,"& _ 
                " descriptn, minstock, minorder, ifmemo, idupdate, idcode, nwho, inuse, descmemo,"& _ 
                " memodate, obsolete, obmessage, ccode, timestamp_column, UniqueID FROM trandesc "& _ 
                "WHERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@pcode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "pcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@psupplier", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "psupplier", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@descriptn", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "descriptn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@minstock", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 5, 0, "minstock", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@minorder", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 4, 0, "minorder", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ifmemo", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ifmemo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idupdate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idupdate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@idcode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "idcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@nwho", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "nwho", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@inuse", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "inuse", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@descmemo", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "descmemo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@memodate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "memodate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@obsolete", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "obsolete", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@obmessage", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "obmessage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ccode", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ccode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT pcode, psupplier, descriptn, minstock, minorder, ifmemo, idupdate, idcode,"& _ 
                " nwho, inuse, descmemo, memodate, obsolete, obmessage, ccode, timestamp_column, "& _ 
                "UniqueID FROM dbo.trandesc"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        descriptn, pcode, psupplier, minstock, minorder, ifmemo, idcode, nw"& _ 
                "ho, idupdate, inuse, descmemo, memodate, obsolete, obmessage, timestamp_column, "& _ 
                "ccode, UniqueID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            trandesc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE         (pcode LIKE @Param1 + '"& _ 
                "%')"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Param1", Global.System.Data.SqlDbType.[Char], 20, Global.System.Data.ParameterDirection.Input, 0, 0, "pcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.trandescDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.trandescDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.trandescDataTable = New TransvacDataV2DataSet1.trandescDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPcode(ByVal dataTable As TransvacDataV2DataSet1.trandescDataTable, ByVal Param1 As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPcode(ByVal Param1 As String) As TransvacDataV2DataSet1.trandescDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Param1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Param1")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Param1,String)
            End If
            Dim dataTable As TransvacDataV2DataSet1.trandescDataTable = New TransvacDataV2DataSet1.trandescDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.trandescDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "trandesc")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal pcode As String, ByVal psupplier As String, ByVal descriptn As String, ByVal minstock As Decimal, ByVal minorder As Decimal, ByVal ifmemo As String, ByVal idupdate As Date, ByVal idcode As String, ByVal nwho As String, ByVal inuse As String, ByVal descmemo As String, ByVal memodate As Date, ByVal obsolete As Boolean, ByVal obmessage As String, ByVal ccode As String) As Integer
            If (pcode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pcode")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(pcode,String)
            End If
            If (psupplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("psupplier")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(psupplier,String)
            End If
            If (descriptn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("descriptn")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(descriptn,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(minstock,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(minorder,Decimal)
            If (ifmemo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ifmemo")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ifmemo,String)
            End If
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(idupdate,Date)
            If (idcode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("idcode")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(idcode,String)
            End If
            If (nwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nwho")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(nwho,String)
            End If
            If (inuse Is Nothing) Then
                Throw New Global.System.ArgumentNullException("inuse")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(inuse,String)
            End If
            If (descmemo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("descmemo")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(descmemo,String)
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(memodate,Date)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(obsolete,Boolean)
            If (obmessage Is Nothing) Then
                Throw New Global.System.ArgumentNullException("obmessage")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(obmessage,String)
            End If
            If (ccode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ccode")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(ccode,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal pcode As String,  _
                    ByVal psupplier As String,  _
                    ByVal descriptn As String,  _
                    ByVal minstock As Decimal,  _
                    ByVal minorder As Decimal,  _
                    ByVal ifmemo As String,  _
                    ByVal idupdate As Date,  _
                    ByVal idcode As String,  _
                    ByVal nwho As String,  _
                    ByVal inuse As String,  _
                    ByVal descmemo As String,  _
                    ByVal memodate As Date,  _
                    ByVal obsolete As Boolean,  _
                    ByVal obmessage As String,  _
                    ByVal ccode As String,  _
                    ByVal Original_timestamp_column() As Byte,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (pcode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("pcode")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(pcode,String)
            End If
            If (psupplier Is Nothing) Then
                Throw New Global.System.ArgumentNullException("psupplier")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(psupplier,String)
            End If
            If (descriptn Is Nothing) Then
                Throw New Global.System.ArgumentNullException("descriptn")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(descriptn,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(minstock,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(minorder,Decimal)
            If (ifmemo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ifmemo")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ifmemo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(idupdate,Date)
            If (idcode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("idcode")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(idcode,String)
            End If
            If (nwho Is Nothing) Then
                Throw New Global.System.ArgumentNullException("nwho")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(nwho,String)
            End If
            If (inuse Is Nothing) Then
                Throw New Global.System.ArgumentNullException("inuse")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(inuse,String)
            End If
            If (descmemo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("descmemo")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(descmemo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(memodate,Date)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(obsolete,Boolean)
            If (obmessage Is Nothing) Then
                Throw New Global.System.ArgumentNullException("obmessage")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(obmessage,String)
            End If
            If (ccode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ccode")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(ccode,String)
            End If
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal pcode As String,  _
                    ByVal psupplier As String,  _
                    ByVal descriptn As String,  _
                    ByVal minstock As Decimal,  _
                    ByVal minorder As Decimal,  _
                    ByVal ifmemo As String,  _
                    ByVal idupdate As Date,  _
                    ByVal idcode As String,  _
                    ByVal nwho As String,  _
                    ByVal inuse As String,  _
                    ByVal descmemo As String,  _
                    ByVal memodate As Date,  _
                    ByVal obsolete As Boolean,  _
                    ByVal obmessage As String,  _
                    ByVal ccode As String,  _
                    ByVal Original_timestamp_column() As Byte,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(pcode, psupplier, descriptn, minstock, minorder, ifmemo, idupdate, idcode, nwho, inuse, descmemo, memodate, obsolete, obmessage, ccode, Original_timestamp_column, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tranmemoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tranmemo"
            tableMapping.ColumnMappings.Add("memo_no", "memo_no")
            tableMapping.ColumnMappings.Add("memo_type", "memo_type")
            tableMapping.ColumnMappings.Add("memo1", "memo1")
            tableMapping.ColumnMappings.Add("memo2", "memo2")
            tableMapping.ColumnMappings.Add("memo3", "memo3")
            tableMapping.ColumnMappings.Add("memo4", "memo4")
            tableMapping.ColumnMappings.Add("memo5", "memo5")
            tableMapping.ColumnMappings.Add("memo6", "memo6")
            tableMapping.ColumnMappings.Add("omemo1", "omemo1")
            tableMapping.ColumnMappings.Add("omemo2", "omemo2")
            tableMapping.ColumnMappings.Add("omemo3", "omemo3")
            tableMapping.ColumnMappings.Add("omemo4", "omemo4")
            tableMapping.ColumnMappings.Add("omemo5", "omemo5")
            tableMapping.ColumnMappings.Add("omemo6", "omemo6")
            tableMapping.ColumnMappings.Add("timestamp_column", "timestamp_column")
            tableMapping.ColumnMappings.Add("UniqueID", "UniqueID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[tranmemo] WHERE (([timestamp_column] = @Original_timestamp_col"& _ 
                "umn) AND ([UniqueID] = @Original_UniqueID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[tranmemo] ([memo_no], [memo_type], [memo1], [memo2], [memo3], "& _ 
                "[memo4], [memo5], [memo6], [omemo1], [omemo2], [omemo3], [omemo4], [omemo5], [om"& _ 
                "emo6]) VALUES (@memo_no, @memo_type, @memo1, @memo2, @memo3, @memo4, @memo5, @me"& _ 
                "mo6, @omemo1, @omemo2, @omemo3, @omemo4, @omemo5, @omemo6);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT memo_no, mem"& _ 
                "o_type, memo1, memo2, memo3, memo4, memo5, memo6, omemo1, omemo2, omemo3, omemo4"& _ 
                ", omemo5, omemo6, timestamp_column, UniqueID FROM tranmemo WHERE (UniqueID = SCO"& _ 
                "PE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@memo_no", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "memo_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@memo_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "memo_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@memo1", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "memo1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@memo2", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "memo2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@memo3", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "memo3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@memo4", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "memo4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@memo5", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "memo5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@memo6", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "memo6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@omemo1", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "omemo1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@omemo2", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "omemo2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@omemo3", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "omemo3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@omemo4", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "omemo4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@omemo5", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "omemo5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@omemo6", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "omemo6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[tranmemo] SET [memo_no] = @memo_no, [memo_type] = @memo_type, [memo"& _ 
                "1] = @memo1, [memo2] = @memo2, [memo3] = @memo3, [memo4] = @memo4, [memo5] = @me"& _ 
                "mo5, [memo6] = @memo6, [omemo1] = @omemo1, [omemo2] = @omemo2, [omemo3] = @omemo"& _ 
                "3, [omemo4] = @omemo4, [omemo5] = @omemo5, [omemo6] = @omemo6 WHERE (([timestamp"& _ 
                "_column] = @Original_timestamp_column) AND ([UniqueID] = @Original_UniqueID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "SELECT memo_no, memo_type, memo1, memo2, memo3, memo4, memo5, memo6, omemo1, ome"& _ 
                "mo2, omemo3, omemo4, omemo5, omemo6, timestamp_column, UniqueID FROM tranmemo WH"& _ 
                "ERE (UniqueID = @UniqueID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@memo_no", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "memo_no", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@memo_type", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "memo_type", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@memo1", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "memo1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@memo2", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "memo2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@memo3", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "memo3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@memo4", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "memo4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@memo5", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "memo5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@memo6", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "memo6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@omemo1", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "omemo1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@omemo2", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "omemo2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@omemo3", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "omemo3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@omemo4", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "omemo4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@omemo5", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "omemo5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@omemo6", Global.System.Data.SqlDbType.Text, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "omemo6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp_column", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp_column", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UniqueID", Global.System.Data.SqlDbType.BigInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UniqueID", Global.System.Data.SqlDbType.BigInt, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "UniqueID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT memo_no, memo_type, memo1, memo2, memo3, memo4, memo5, memo6, omemo1, omem"& _ 
                "o2, omemo3, omemo4, omemo5, omemo6, timestamp_column, UniqueID FROM dbo.tranmemo"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.tranmemoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.tranmemoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.tranmemoDataTable = New TransvacDataV2DataSet1.tranmemoDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.tranmemoDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "tranmemo")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_timestamp_column() As Byte, ByVal Original_UniqueID As Long) As Integer
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal memo_no As String, ByVal memo_type As String, ByVal memo1 As String, ByVal memo2 As String, ByVal memo3 As String, ByVal memo4 As String, ByVal memo5 As String, ByVal memo6 As String, ByVal omemo1 As String, ByVal omemo2 As String, ByVal omemo3 As String, ByVal omemo4 As String, ByVal omemo5 As String, ByVal omemo6 As String) As Integer
            If (memo_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("memo_no")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(memo_no,String)
            End If
            If (memo_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("memo_type")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(memo_type,String)
            End If
            If (memo1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("memo1")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(memo1,String)
            End If
            If (memo2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("memo2")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(memo2,String)
            End If
            If (memo3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("memo3")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(memo3,String)
            End If
            If (memo4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("memo4")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(memo4,String)
            End If
            If (memo5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("memo5")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(memo5,String)
            End If
            If (memo6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("memo6")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(memo6,String)
            End If
            If (omemo1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("omemo1")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(omemo1,String)
            End If
            If (omemo2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("omemo2")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(omemo2,String)
            End If
            If (omemo3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("omemo3")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(omemo3,String)
            End If
            If (omemo4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("omemo4")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(omemo4,String)
            End If
            If (omemo5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("omemo5")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(omemo5,String)
            End If
            If (omemo6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("omemo6")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(omemo6,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal memo_no As String,  _
                    ByVal memo_type As String,  _
                    ByVal memo1 As String,  _
                    ByVal memo2 As String,  _
                    ByVal memo3 As String,  _
                    ByVal memo4 As String,  _
                    ByVal memo5 As String,  _
                    ByVal memo6 As String,  _
                    ByVal omemo1 As String,  _
                    ByVal omemo2 As String,  _
                    ByVal omemo3 As String,  _
                    ByVal omemo4 As String,  _
                    ByVal omemo5 As String,  _
                    ByVal omemo6 As String,  _
                    ByVal Original_timestamp_column() As Byte,  _
                    ByVal Original_UniqueID As Long,  _
                    ByVal UniqueID As Long) As Integer
            If (memo_no Is Nothing) Then
                Throw New Global.System.ArgumentNullException("memo_no")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(memo_no,String)
            End If
            If (memo_type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("memo_type")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(memo_type,String)
            End If
            If (memo1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("memo1")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(memo1,String)
            End If
            If (memo2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("memo2")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(memo2,String)
            End If
            If (memo3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("memo3")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(memo3,String)
            End If
            If (memo4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("memo4")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(memo4,String)
            End If
            If (memo5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("memo5")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(memo5,String)
            End If
            If (memo6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("memo6")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(memo6,String)
            End If
            If (omemo1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("omemo1")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(omemo1,String)
            End If
            If (omemo2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("omemo2")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(omemo2,String)
            End If
            If (omemo3 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("omemo3")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(omemo3,String)
            End If
            If (omemo4 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("omemo4")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(omemo4,String)
            End If
            If (omemo5 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("omemo5")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(omemo5,String)
            End If
            If (omemo6 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("omemo6")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(omemo6,String)
            End If
            If (Original_timestamp_column Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp_column")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_timestamp_column,Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_UniqueID,Long)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(UniqueID,Long)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal memo_no As String,  _
                    ByVal memo_type As String,  _
                    ByVal memo1 As String,  _
                    ByVal memo2 As String,  _
                    ByVal memo3 As String,  _
                    ByVal memo4 As String,  _
                    ByVal memo5 As String,  _
                    ByVal memo6 As String,  _
                    ByVal omemo1 As String,  _
                    ByVal omemo2 As String,  _
                    ByVal omemo3 As String,  _
                    ByVal omemo4 As String,  _
                    ByVal omemo5 As String,  _
                    ByVal omemo6 As String,  _
                    ByVal Original_timestamp_column() As Byte,  _
                    ByVal Original_UniqueID As Long) As Integer
            Return Me.Update(memo_no, memo_type, memo1, memo2, memo3, memo4, memo5, memo6, omemo1, omemo2, omemo3, omemo4, omemo5, omemo6, Original_timestamp_column, Original_UniqueID, Original_UniqueID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AddressRecordTypeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AddressRecordType"
            tableMapping.ColumnMappings.Add("RecordTypeNew", "RecordTypeNew")
            tableMapping.ColumnMappings.Add("RecordTypeOld", "RecordTypeOld")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[AddressRecordType] ([RecordTypeNew], [RecordTypeOld]) VALUES ("& _ 
                "@RecordTypeNew, @RecordTypeOld)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordTypeNew", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordTypeNew", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordTypeOld", Global.System.Data.SqlDbType.NChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordTypeOld", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.Transvac_ERP.My.MySettings.Default.TransvacDataV2ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT RecordTypeNew, RecordTypeOld FROM dbo.AddressRecordType"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As TransvacDataV2DataSet1.AddressRecordTypeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As TransvacDataV2DataSet1.AddressRecordTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As TransvacDataV2DataSet1.AddressRecordTypeDataTable = New TransvacDataV2DataSet1.AddressRecordTypeDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As TransvacDataV2DataSet1.AddressRecordTypeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            Return Me.Adapter.Update(dataSet, "AddressRecordType")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal RecordTypeNew As String, ByVal RecordTypeOld As String) As Integer
            If (RecordTypeNew Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordTypeNew")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(RecordTypeNew,String)
            End If
            If (RecordTypeOld Is Nothing) Then
                Throw New Global.System.ArgumentNullException("RecordTypeOld")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(RecordTypeOld,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _accctlTableAdapter As accctlTableAdapter
        
        Private _accountTableAdapter As accountTableAdapter
        
        Private _addnotesTableAdapter As addnotesTableAdapter
        
        Private _assetsTableAdapter As assetsTableAdapter
        
        Private _aSSETSNEWTableAdapter As ASSETSNEWTableAdapter
        
        Private _atransTableAdapter As atransTableAdapter
        
        Private _binallocTableAdapter As binallocTableAdapter
        
        Private _catTableAdapter As catTableAdapter
        
        Private _countryTableAdapter As countryTableAdapter
        
        Private _custdiscTableAdapter As custdiscTableAdapter
        
        Private _dummy_TableAdapter As dummy_TableAdapter
        
        Private _enquiryTableAdapter As enquiryTableAdapter
        
        Private _eventTableAdapter As eventTableAdapter
        
        Private _foxuserTableAdapter As foxuserTableAdapter
        
        Private _invlineTableAdapter As invlineTableAdapter
        
        Private _invoiceheadTableAdapter As invoiceheadTableAdapter
        
        Private _invtransTableAdapter As invtransTableAdapter
        
        Private _invtransoldTableAdapter As invtransoldTableAdapter
        
        Private _invtransold6TableAdapter As invtransold6TableAdapter
        
        Private _invworkTableAdapter As invworkTableAdapter
        
        Private _invworkoldTableAdapter As invworkoldTableAdapter
        
        Private _issueTableAdapter As issueTableAdapter
        
        Private _locationTableAdapter As locationTableAdapter
        
        Private _mainTableAdapter As mainTableAdapter
        
        Private _markupTableAdapter As markupTableAdapter
        
        Private _namesTableAdapter As namesTableAdapter
        
        Private _orddetailTableAdapter As orddetailTableAdapter
        
        Private _orderheadTableAdapter As orderheadTableAdapter
        
        Private _orderlineTableAdapter As orderlineTableAdapter
        
        Private _qictrlTableAdapter As qictrlTableAdapter
        
        Private _qictrlnewTableAdapter As qictrlnewTableAdapter
        
        Private _qictrloldTableAdapter As qictrloldTableAdapter
        
        Private _qictrlold6TableAdapter As qictrlold6TableAdapter
        
        Private _quotedetailTableAdapter As quotedetailTableAdapter
        
        Private _quoteheadTableAdapter As quoteheadTableAdapter
        
        Private _statusTableAdapter As statusTableAdapter
        
        Private _teventsTableAdapter As teventsTableAdapter
        
        Private _tran2TableAdapter As tran2TableAdapter
        
        Private _tranbinsTableAdapter As tranbinsTableAdapter
        
        Private _tranctlTableAdapter As tranctlTableAdapter
        
        Private _trandescTableAdapter As trandescTableAdapter
        
        Private _tranmemoTableAdapter As tranmemoTableAdapter
        
        Private _addressRecordTypeTableAdapter As AddressRecordTypeTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property accctlTableAdapter() As accctlTableAdapter
            Get
                Return Me._accctlTableAdapter
            End Get
            Set
                Me._accctlTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property accountTableAdapter() As accountTableAdapter
            Get
                Return Me._accountTableAdapter
            End Get
            Set
                Me._accountTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property addnotesTableAdapter() As addnotesTableAdapter
            Get
                Return Me._addnotesTableAdapter
            End Get
            Set
                Me._addnotesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property assetsTableAdapter() As assetsTableAdapter
            Get
                Return Me._assetsTableAdapter
            End Get
            Set
                Me._assetsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ASSETSNEWTableAdapter() As ASSETSNEWTableAdapter
            Get
                Return Me._aSSETSNEWTableAdapter
            End Get
            Set
                Me._aSSETSNEWTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property atransTableAdapter() As atransTableAdapter
            Get
                Return Me._atransTableAdapter
            End Get
            Set
                Me._atransTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property binallocTableAdapter() As binallocTableAdapter
            Get
                Return Me._binallocTableAdapter
            End Get
            Set
                Me._binallocTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property catTableAdapter() As catTableAdapter
            Get
                Return Me._catTableAdapter
            End Get
            Set
                Me._catTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property countryTableAdapter() As countryTableAdapter
            Get
                Return Me._countryTableAdapter
            End Get
            Set
                Me._countryTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property custdiscTableAdapter() As custdiscTableAdapter
            Get
                Return Me._custdiscTableAdapter
            End Get
            Set
                Me._custdiscTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property dummy_TableAdapter() As dummy_TableAdapter
            Get
                Return Me._dummy_TableAdapter
            End Get
            Set
                Me._dummy_TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property enquiryTableAdapter() As enquiryTableAdapter
            Get
                Return Me._enquiryTableAdapter
            End Get
            Set
                Me._enquiryTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property eventTableAdapter() As eventTableAdapter
            Get
                Return Me._eventTableAdapter
            End Get
            Set
                Me._eventTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property foxuserTableAdapter() As foxuserTableAdapter
            Get
                Return Me._foxuserTableAdapter
            End Get
            Set
                Me._foxuserTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property invlineTableAdapter() As invlineTableAdapter
            Get
                Return Me._invlineTableAdapter
            End Get
            Set
                Me._invlineTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property invoiceheadTableAdapter() As invoiceheadTableAdapter
            Get
                Return Me._invoiceheadTableAdapter
            End Get
            Set
                Me._invoiceheadTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property invtransTableAdapter() As invtransTableAdapter
            Get
                Return Me._invtransTableAdapter
            End Get
            Set
                Me._invtransTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property invtransoldTableAdapter() As invtransoldTableAdapter
            Get
                Return Me._invtransoldTableAdapter
            End Get
            Set
                Me._invtransoldTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property invtransold6TableAdapter() As invtransold6TableAdapter
            Get
                Return Me._invtransold6TableAdapter
            End Get
            Set
                Me._invtransold6TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property invworkTableAdapter() As invworkTableAdapter
            Get
                Return Me._invworkTableAdapter
            End Get
            Set
                Me._invworkTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property invworkoldTableAdapter() As invworkoldTableAdapter
            Get
                Return Me._invworkoldTableAdapter
            End Get
            Set
                Me._invworkoldTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property issueTableAdapter() As issueTableAdapter
            Get
                Return Me._issueTableAdapter
            End Get
            Set
                Me._issueTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property locationTableAdapter() As locationTableAdapter
            Get
                Return Me._locationTableAdapter
            End Get
            Set
                Me._locationTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property mainTableAdapter() As mainTableAdapter
            Get
                Return Me._mainTableAdapter
            End Get
            Set
                Me._mainTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property markupTableAdapter() As markupTableAdapter
            Get
                Return Me._markupTableAdapter
            End Get
            Set
                Me._markupTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property namesTableAdapter() As namesTableAdapter
            Get
                Return Me._namesTableAdapter
            End Get
            Set
                Me._namesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property orddetailTableAdapter() As orddetailTableAdapter
            Get
                Return Me._orddetailTableAdapter
            End Get
            Set
                Me._orddetailTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property orderheadTableAdapter() As orderheadTableAdapter
            Get
                Return Me._orderheadTableAdapter
            End Get
            Set
                Me._orderheadTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property orderlineTableAdapter() As orderlineTableAdapter
            Get
                Return Me._orderlineTableAdapter
            End Get
            Set
                Me._orderlineTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property qictrlTableAdapter() As qictrlTableAdapter
            Get
                Return Me._qictrlTableAdapter
            End Get
            Set
                Me._qictrlTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property qictrlnewTableAdapter() As qictrlnewTableAdapter
            Get
                Return Me._qictrlnewTableAdapter
            End Get
            Set
                Me._qictrlnewTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property qictrloldTableAdapter() As qictrloldTableAdapter
            Get
                Return Me._qictrloldTableAdapter
            End Get
            Set
                Me._qictrloldTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property qictrlold6TableAdapter() As qictrlold6TableAdapter
            Get
                Return Me._qictrlold6TableAdapter
            End Get
            Set
                Me._qictrlold6TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property quotedetailTableAdapter() As quotedetailTableAdapter
            Get
                Return Me._quotedetailTableAdapter
            End Get
            Set
                Me._quotedetailTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property quoteheadTableAdapter() As quoteheadTableAdapter
            Get
                Return Me._quoteheadTableAdapter
            End Get
            Set
                Me._quoteheadTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property statusTableAdapter() As statusTableAdapter
            Get
                Return Me._statusTableAdapter
            End Get
            Set
                Me._statusTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property teventsTableAdapter() As teventsTableAdapter
            Get
                Return Me._teventsTableAdapter
            End Get
            Set
                Me._teventsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tran2TableAdapter() As tran2TableAdapter
            Get
                Return Me._tran2TableAdapter
            End Get
            Set
                Me._tran2TableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tranbinsTableAdapter() As tranbinsTableAdapter
            Get
                Return Me._tranbinsTableAdapter
            End Get
            Set
                Me._tranbinsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tranctlTableAdapter() As tranctlTableAdapter
            Get
                Return Me._tranctlTableAdapter
            End Get
            Set
                Me._tranctlTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property trandescTableAdapter() As trandescTableAdapter
            Get
                Return Me._trandescTableAdapter
            End Get
            Set
                Me._trandescTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tranmemoTableAdapter() As tranmemoTableAdapter
            Get
                Return Me._tranmemoTableAdapter
            End Get
            Set
                Me._tranmemoTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AddressRecordTypeTableAdapter() As AddressRecordTypeTableAdapter
            Get
                Return Me._addressRecordTypeTableAdapter
            End Get
            Set
                Me._addressRecordTypeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._accctlTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._accctlTableAdapter.Connection) Is Nothing)) Then
                    Return Me._accctlTableAdapter.Connection
                End If
                If ((Not (Me._accountTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._accountTableAdapter.Connection) Is Nothing)) Then
                    Return Me._accountTableAdapter.Connection
                End If
                If ((Not (Me._addnotesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._addnotesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._addnotesTableAdapter.Connection
                End If
                If ((Not (Me._assetsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._assetsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._assetsTableAdapter.Connection
                End If
                If ((Not (Me._aSSETSNEWTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aSSETSNEWTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aSSETSNEWTableAdapter.Connection
                End If
                If ((Not (Me._atransTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._atransTableAdapter.Connection) Is Nothing)) Then
                    Return Me._atransTableAdapter.Connection
                End If
                If ((Not (Me._binallocTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._binallocTableAdapter.Connection) Is Nothing)) Then
                    Return Me._binallocTableAdapter.Connection
                End If
                If ((Not (Me._catTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._catTableAdapter.Connection) Is Nothing)) Then
                    Return Me._catTableAdapter.Connection
                End If
                If ((Not (Me._countryTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._countryTableAdapter.Connection) Is Nothing)) Then
                    Return Me._countryTableAdapter.Connection
                End If
                If ((Not (Me._custdiscTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._custdiscTableAdapter.Connection) Is Nothing)) Then
                    Return Me._custdiscTableAdapter.Connection
                End If
                If ((Not (Me._dummy_TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dummy_TableAdapter.Connection) Is Nothing)) Then
                    Return Me._dummy_TableAdapter.Connection
                End If
                If ((Not (Me._enquiryTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._enquiryTableAdapter.Connection) Is Nothing)) Then
                    Return Me._enquiryTableAdapter.Connection
                End If
                If ((Not (Me._eventTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._eventTableAdapter.Connection) Is Nothing)) Then
                    Return Me._eventTableAdapter.Connection
                End If
                If ((Not (Me._foxuserTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._foxuserTableAdapter.Connection) Is Nothing)) Then
                    Return Me._foxuserTableAdapter.Connection
                End If
                If ((Not (Me._invlineTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._invlineTableAdapter.Connection) Is Nothing)) Then
                    Return Me._invlineTableAdapter.Connection
                End If
                If ((Not (Me._invoiceheadTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._invoiceheadTableAdapter.Connection) Is Nothing)) Then
                    Return Me._invoiceheadTableAdapter.Connection
                End If
                If ((Not (Me._invtransTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._invtransTableAdapter.Connection) Is Nothing)) Then
                    Return Me._invtransTableAdapter.Connection
                End If
                If ((Not (Me._invtransoldTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._invtransoldTableAdapter.Connection) Is Nothing)) Then
                    Return Me._invtransoldTableAdapter.Connection
                End If
                If ((Not (Me._invtransold6TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._invtransold6TableAdapter.Connection) Is Nothing)) Then
                    Return Me._invtransold6TableAdapter.Connection
                End If
                If ((Not (Me._invworkTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._invworkTableAdapter.Connection) Is Nothing)) Then
                    Return Me._invworkTableAdapter.Connection
                End If
                If ((Not (Me._invworkoldTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._invworkoldTableAdapter.Connection) Is Nothing)) Then
                    Return Me._invworkoldTableAdapter.Connection
                End If
                If ((Not (Me._issueTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._issueTableAdapter.Connection) Is Nothing)) Then
                    Return Me._issueTableAdapter.Connection
                End If
                If ((Not (Me._locationTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._locationTableAdapter.Connection) Is Nothing)) Then
                    Return Me._locationTableAdapter.Connection
                End If
                If ((Not (Me._mainTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mainTableAdapter.Connection) Is Nothing)) Then
                    Return Me._mainTableAdapter.Connection
                End If
                If ((Not (Me._markupTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._markupTableAdapter.Connection) Is Nothing)) Then
                    Return Me._markupTableAdapter.Connection
                End If
                If ((Not (Me._namesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._namesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._namesTableAdapter.Connection
                End If
                If ((Not (Me._orddetailTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._orddetailTableAdapter.Connection) Is Nothing)) Then
                    Return Me._orddetailTableAdapter.Connection
                End If
                If ((Not (Me._orderheadTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._orderheadTableAdapter.Connection) Is Nothing)) Then
                    Return Me._orderheadTableAdapter.Connection
                End If
                If ((Not (Me._orderlineTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._orderlineTableAdapter.Connection) Is Nothing)) Then
                    Return Me._orderlineTableAdapter.Connection
                End If
                If ((Not (Me._qictrlTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._qictrlTableAdapter.Connection) Is Nothing)) Then
                    Return Me._qictrlTableAdapter.Connection
                End If
                If ((Not (Me._qictrlnewTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._qictrlnewTableAdapter.Connection) Is Nothing)) Then
                    Return Me._qictrlnewTableAdapter.Connection
                End If
                If ((Not (Me._qictrloldTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._qictrloldTableAdapter.Connection) Is Nothing)) Then
                    Return Me._qictrloldTableAdapter.Connection
                End If
                If ((Not (Me._qictrlold6TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._qictrlold6TableAdapter.Connection) Is Nothing)) Then
                    Return Me._qictrlold6TableAdapter.Connection
                End If
                If ((Not (Me._quotedetailTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._quotedetailTableAdapter.Connection) Is Nothing)) Then
                    Return Me._quotedetailTableAdapter.Connection
                End If
                If ((Not (Me._quoteheadTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._quoteheadTableAdapter.Connection) Is Nothing)) Then
                    Return Me._quoteheadTableAdapter.Connection
                End If
                If ((Not (Me._statusTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._statusTableAdapter.Connection) Is Nothing)) Then
                    Return Me._statusTableAdapter.Connection
                End If
                If ((Not (Me._teventsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._teventsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._teventsTableAdapter.Connection
                End If
                If ((Not (Me._tran2TableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tran2TableAdapter.Connection) Is Nothing)) Then
                    Return Me._tran2TableAdapter.Connection
                End If
                If ((Not (Me._tranbinsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tranbinsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tranbinsTableAdapter.Connection
                End If
                If ((Not (Me._tranctlTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tranctlTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tranctlTableAdapter.Connection
                End If
                If ((Not (Me._trandescTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._trandescTableAdapter.Connection) Is Nothing)) Then
                    Return Me._trandescTableAdapter.Connection
                End If
                If ((Not (Me._tranmemoTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tranmemoTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tranmemoTableAdapter.Connection
                End If
                If ((Not (Me._addressRecordTypeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._addressRecordTypeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._addressRecordTypeTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._accctlTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._accountTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._addnotesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._assetsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aSSETSNEWTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._atransTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._binallocTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._catTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._countryTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._custdiscTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dummy_TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._enquiryTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._eventTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._foxuserTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._invlineTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._invoiceheadTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._invtransTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._invtransoldTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._invtransold6TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._invworkTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._invworkoldTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._issueTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._locationTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mainTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._markupTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._namesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._orddetailTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._orderheadTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._orderlineTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._qictrlTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._qictrlnewTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._qictrloldTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._qictrlold6TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._quotedetailTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._quoteheadTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._statusTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._teventsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tran2TableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tranbinsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tranctlTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._trandescTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tranmemoTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._addressRecordTypeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As TransvacDataV2DataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._accctlTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.accctl.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._accctlTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mainTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.main.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mainTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._markupTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.markup.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._markupTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._namesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.names.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._namesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._orddetailTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.orddetail.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._orddetailTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._orderheadTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.orderhead.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._orderheadTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._orderlineTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.orderline.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._orderlineTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._qictrlTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.qictrl.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._qictrlTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._qictrlnewTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.qictrlnew.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._qictrlnewTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._locationTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.location.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._locationTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._qictrloldTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.qictrlold.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._qictrloldTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._quotedetailTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.quotedetail.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._quotedetailTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._quoteheadTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.quotehead.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._quoteheadTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._statusTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.status.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._statusTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._teventsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tevents.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._teventsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tran2TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tran2.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tran2TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tranbinsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tranbins.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tranbinsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tranctlTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tranctl.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tranctlTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._trandescTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.trandesc.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._trandescTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._qictrlold6TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.qictrlold6.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._qictrlold6TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tranmemoTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tranmemo.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tranmemoTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._issueTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.issue.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._issueTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._invworkTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.invwork.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._invworkTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._accountTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.account.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._accountTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._addnotesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.addnotes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._addnotesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._assetsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.assets.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._assetsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aSSETSNEWTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ASSETSNEW.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aSSETSNEWTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._atransTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.atrans.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._atransTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._binallocTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.binalloc.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._binallocTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._catTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.cat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._catTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._countryTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.country.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._countryTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._invworkoldTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.invworkold.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._invworkoldTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._custdiscTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.custdisc.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._custdiscTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._enquiryTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.enquiry.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._enquiryTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._eventTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet._event.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._eventTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._foxuserTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.foxuser.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._foxuserTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._invlineTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.invline.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._invlineTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._invoiceheadTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.invoicehead.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._invoiceheadTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._invtransTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.invtrans.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._invtransTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._invtransoldTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.invtransold.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._invtransoldTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._invtransold6TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.invtransold6.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._invtransold6TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dummy_TableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.dummy_.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dummy_TableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._addressRecordTypeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AddressRecordType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._addressRecordTypeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As TransvacDataV2DataSet1, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._accctlTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.accctl.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._accctlTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mainTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.main.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mainTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._markupTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.markup.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._markupTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._namesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.names.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._namesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._orddetailTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.orddetail.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._orddetailTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._orderheadTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.orderhead.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._orderheadTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._orderlineTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.orderline.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._orderlineTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._qictrlTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.qictrl.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._qictrlTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._qictrlnewTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.qictrlnew.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._qictrlnewTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._locationTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.location.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._locationTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._qictrloldTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.qictrlold.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._qictrloldTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._quotedetailTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.quotedetail.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._quotedetailTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._quoteheadTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.quotehead.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._quoteheadTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._statusTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.status.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._statusTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._teventsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tevents.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._teventsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tran2TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tran2.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tran2TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tranbinsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tranbins.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tranbinsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tranctlTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tranctl.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tranctlTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._trandescTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.trandesc.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._trandescTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._qictrlold6TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.qictrlold6.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._qictrlold6TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tranmemoTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tranmemo.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tranmemoTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._issueTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.issue.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._issueTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._invworkTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.invwork.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._invworkTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._accountTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.account.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._accountTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._addnotesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.addnotes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._addnotesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._assetsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.assets.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._assetsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aSSETSNEWTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ASSETSNEW.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aSSETSNEWTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._atransTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.atrans.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._atransTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._binallocTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.binalloc.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._binallocTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._catTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.cat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._catTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._countryTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.country.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._countryTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._invworkoldTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.invworkold.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._invworkoldTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._custdiscTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.custdisc.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._custdiscTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._enquiryTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.enquiry.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._enquiryTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._eventTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet._event.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._eventTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._foxuserTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.foxuser.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._foxuserTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._invlineTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.invline.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._invlineTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._invoiceheadTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.invoicehead.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._invoiceheadTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._invtransTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.invtrans.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._invtransTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._invtransoldTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.invtransold.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._invtransoldTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._invtransold6TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.invtransold6.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._invtransold6TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dummy_TableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.dummy_.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dummy_TableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._addressRecordTypeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AddressRecordType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._addressRecordTypeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As TransvacDataV2DataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._addressRecordTypeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AddressRecordType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._addressRecordTypeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dummy_TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.dummy_.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dummy_TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._invtransold6TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.invtransold6.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._invtransold6TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._invtransoldTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.invtransold.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._invtransoldTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._invtransTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.invtrans.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._invtransTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._invoiceheadTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.invoicehead.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._invoiceheadTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._invlineTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.invline.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._invlineTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._foxuserTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.foxuser.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._foxuserTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._eventTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet._event.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._eventTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._enquiryTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.enquiry.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._enquiryTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._custdiscTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.custdisc.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._custdiscTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._invworkoldTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.invworkold.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._invworkoldTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._countryTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.country.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._countryTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._catTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.cat.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._catTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._binallocTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.binalloc.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._binallocTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._atransTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.atrans.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._atransTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aSSETSNEWTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ASSETSNEW.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aSSETSNEWTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._assetsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.assets.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._assetsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._addnotesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.addnotes.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._addnotesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._accountTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.account.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._accountTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._invworkTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.invwork.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._invworkTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._issueTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.issue.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._issueTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tranmemoTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tranmemo.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tranmemoTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._qictrlold6TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.qictrlold6.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._qictrlold6TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._trandescTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.trandesc.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._trandescTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tranctlTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tranctl.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tranctlTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tranbinsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tranbins.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tranbinsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tran2TableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tran2.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tran2TableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._teventsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tevents.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._teventsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._statusTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.status.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._statusTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._quoteheadTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.quotehead.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._quoteheadTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._quotedetailTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.quotedetail.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._quotedetailTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._qictrloldTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.qictrlold.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._qictrloldTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._locationTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.location.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._locationTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._qictrlnewTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.qictrlnew.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._qictrlnewTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._qictrlTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.qictrl.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._qictrlTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._orderlineTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.orderline.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._orderlineTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._orderheadTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.orderhead.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._orderheadTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._orddetailTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.orddetail.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._orddetailTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._namesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.names.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._namesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._markupTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.markup.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._markupTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mainTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.main.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mainTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._accctlTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.accctl.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._accctlTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As TransvacDataV2DataSet1) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._accctlTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._accctlTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._accountTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._accountTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._addnotesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._addnotesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._assetsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._assetsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._aSSETSNEWTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aSSETSNEWTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._atransTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._atransTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._binallocTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._binallocTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._catTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._catTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._countryTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._countryTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._custdiscTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._custdiscTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._dummy_TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dummy_TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._enquiryTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._enquiryTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._eventTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._eventTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._foxuserTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._foxuserTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._invlineTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._invlineTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._invoiceheadTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._invoiceheadTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._invtransTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._invtransTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._invtransoldTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._invtransoldTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._invtransold6TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._invtransold6TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._invworkTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._invworkTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._invworkoldTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._invworkoldTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._issueTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._issueTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._locationTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._locationTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mainTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mainTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._markupTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._markupTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._namesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._namesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._orddetailTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._orddetailTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._orderheadTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._orderheadTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._orderlineTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._orderlineTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._qictrlTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._qictrlTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._qictrlnewTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._qictrlnewTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._qictrloldTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._qictrloldTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._qictrlold6TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._qictrlold6TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._quotedetailTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._quotedetailTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._quoteheadTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._quoteheadTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._statusTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._statusTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._teventsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._teventsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tran2TableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tran2TableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tranbinsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tranbinsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tranctlTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tranctlTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._trandescTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._trandescTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tranmemoTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tranmemoTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._addressRecordTypeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._addressRecordTypeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._accctlTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._accctlTableAdapter, Me._accctlTableAdapter.Connection)
                    Me._accctlTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._accctlTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._accctlTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._accctlTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._accctlTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._accountTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._accountTableAdapter, Me._accountTableAdapter.Connection)
                    Me._accountTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._accountTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._accountTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._accountTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._accountTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._addnotesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._addnotesTableAdapter, Me._addnotesTableAdapter.Connection)
                    Me._addnotesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._addnotesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._addnotesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._addnotesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._addnotesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._assetsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._assetsTableAdapter, Me._assetsTableAdapter.Connection)
                    Me._assetsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._assetsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._assetsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._assetsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._assetsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aSSETSNEWTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aSSETSNEWTableAdapter, Me._aSSETSNEWTableAdapter.Connection)
                    Me._aSSETSNEWTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._aSSETSNEWTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aSSETSNEWTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aSSETSNEWTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aSSETSNEWTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._atransTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._atransTableAdapter, Me._atransTableAdapter.Connection)
                    Me._atransTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._atransTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._atransTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._atransTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._atransTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._binallocTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._binallocTableAdapter, Me._binallocTableAdapter.Connection)
                    Me._binallocTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._binallocTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._binallocTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._binallocTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._binallocTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._catTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._catTableAdapter, Me._catTableAdapter.Connection)
                    Me._catTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._catTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._catTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._catTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._catTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._countryTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._countryTableAdapter, Me._countryTableAdapter.Connection)
                    Me._countryTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._countryTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._countryTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._countryTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._countryTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._custdiscTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._custdiscTableAdapter, Me._custdiscTableAdapter.Connection)
                    Me._custdiscTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._custdiscTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._custdiscTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._custdiscTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._custdiscTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dummy_TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dummy_TableAdapter, Me._dummy_TableAdapter.Connection)
                    Me._dummy_TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._dummy_TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._dummy_TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dummy_TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dummy_TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._enquiryTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._enquiryTableAdapter, Me._enquiryTableAdapter.Connection)
                    Me._enquiryTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._enquiryTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._enquiryTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._enquiryTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._enquiryTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._eventTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._eventTableAdapter, Me._eventTableAdapter.Connection)
                    Me._eventTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._eventTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._eventTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._eventTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._eventTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._foxuserTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._foxuserTableAdapter, Me._foxuserTableAdapter.Connection)
                    Me._foxuserTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._foxuserTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._foxuserTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._foxuserTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._foxuserTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._invlineTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._invlineTableAdapter, Me._invlineTableAdapter.Connection)
                    Me._invlineTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._invlineTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._invlineTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._invlineTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._invlineTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._invoiceheadTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._invoiceheadTableAdapter, Me._invoiceheadTableAdapter.Connection)
                    Me._invoiceheadTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._invoiceheadTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._invoiceheadTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._invoiceheadTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._invoiceheadTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._invtransTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._invtransTableAdapter, Me._invtransTableAdapter.Connection)
                    Me._invtransTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._invtransTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._invtransTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._invtransTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._invtransTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._invtransoldTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._invtransoldTableAdapter, Me._invtransoldTableAdapter.Connection)
                    Me._invtransoldTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._invtransoldTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._invtransoldTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._invtransoldTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._invtransoldTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._invtransold6TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._invtransold6TableAdapter, Me._invtransold6TableAdapter.Connection)
                    Me._invtransold6TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._invtransold6TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._invtransold6TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._invtransold6TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._invtransold6TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._invworkTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._invworkTableAdapter, Me._invworkTableAdapter.Connection)
                    Me._invworkTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._invworkTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._invworkTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._invworkTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._invworkTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._invworkoldTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._invworkoldTableAdapter, Me._invworkoldTableAdapter.Connection)
                    Me._invworkoldTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._invworkoldTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._invworkoldTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._invworkoldTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._invworkoldTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._issueTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._issueTableAdapter, Me._issueTableAdapter.Connection)
                    Me._issueTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._issueTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._issueTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._issueTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._issueTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._locationTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._locationTableAdapter, Me._locationTableAdapter.Connection)
                    Me._locationTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._locationTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._locationTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._locationTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._locationTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mainTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mainTableAdapter, Me._mainTableAdapter.Connection)
                    Me._mainTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._mainTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._mainTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mainTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mainTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._markupTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._markupTableAdapter, Me._markupTableAdapter.Connection)
                    Me._markupTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._markupTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._markupTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._markupTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._markupTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._namesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._namesTableAdapter, Me._namesTableAdapter.Connection)
                    Me._namesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._namesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._namesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._namesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._namesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._orddetailTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._orddetailTableAdapter, Me._orddetailTableAdapter.Connection)
                    Me._orddetailTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._orddetailTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._orddetailTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._orddetailTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._orddetailTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._orderheadTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._orderheadTableAdapter, Me._orderheadTableAdapter.Connection)
                    Me._orderheadTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._orderheadTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._orderheadTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._orderheadTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._orderheadTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._orderlineTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._orderlineTableAdapter, Me._orderlineTableAdapter.Connection)
                    Me._orderlineTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._orderlineTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._orderlineTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._orderlineTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._orderlineTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._qictrlTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._qictrlTableAdapter, Me._qictrlTableAdapter.Connection)
                    Me._qictrlTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._qictrlTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._qictrlTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._qictrlTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._qictrlTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._qictrlnewTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._qictrlnewTableAdapter, Me._qictrlnewTableAdapter.Connection)
                    Me._qictrlnewTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._qictrlnewTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._qictrlnewTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._qictrlnewTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._qictrlnewTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._qictrloldTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._qictrloldTableAdapter, Me._qictrloldTableAdapter.Connection)
                    Me._qictrloldTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._qictrloldTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._qictrloldTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._qictrloldTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._qictrloldTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._qictrlold6TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._qictrlold6TableAdapter, Me._qictrlold6TableAdapter.Connection)
                    Me._qictrlold6TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._qictrlold6TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._qictrlold6TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._qictrlold6TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._qictrlold6TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._quotedetailTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._quotedetailTableAdapter, Me._quotedetailTableAdapter.Connection)
                    Me._quotedetailTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._quotedetailTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._quotedetailTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._quotedetailTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._quotedetailTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._quoteheadTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._quoteheadTableAdapter, Me._quoteheadTableAdapter.Connection)
                    Me._quoteheadTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._quoteheadTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._quoteheadTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._quoteheadTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._quoteheadTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._statusTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._statusTableAdapter, Me._statusTableAdapter.Connection)
                    Me._statusTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._statusTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._statusTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._statusTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._statusTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._teventsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._teventsTableAdapter, Me._teventsTableAdapter.Connection)
                    Me._teventsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._teventsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._teventsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._teventsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._teventsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tran2TableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tran2TableAdapter, Me._tran2TableAdapter.Connection)
                    Me._tran2TableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tran2TableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tran2TableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tran2TableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tran2TableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tranbinsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tranbinsTableAdapter, Me._tranbinsTableAdapter.Connection)
                    Me._tranbinsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tranbinsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tranbinsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tranbinsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tranbinsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tranctlTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tranctlTableAdapter, Me._tranctlTableAdapter.Connection)
                    Me._tranctlTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tranctlTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tranctlTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tranctlTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tranctlTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._trandescTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._trandescTableAdapter, Me._trandescTableAdapter.Connection)
                    Me._trandescTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._trandescTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._trandescTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._trandescTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._trandescTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tranmemoTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tranmemoTableAdapter, Me._tranmemoTableAdapter.Connection)
                    Me._tranmemoTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tranmemoTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tranmemoTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tranmemoTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tranmemoTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._addressRecordTypeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._addressRecordTypeTableAdapter, Me._addressRecordTypeTableAdapter.Connection)
                    Me._addressRecordTypeTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._addressRecordTypeTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._addressRecordTypeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._addressRecordTypeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._addressRecordTypeTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._accctlTableAdapter) Is Nothing) Then
                    Me._accctlTableAdapter.Connection = CType(revertConnections(Me._accctlTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._accctlTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._accountTableAdapter) Is Nothing) Then
                    Me._accountTableAdapter.Connection = CType(revertConnections(Me._accountTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._accountTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._addnotesTableAdapter) Is Nothing) Then
                    Me._addnotesTableAdapter.Connection = CType(revertConnections(Me._addnotesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._addnotesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._assetsTableAdapter) Is Nothing) Then
                    Me._assetsTableAdapter.Connection = CType(revertConnections(Me._assetsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._assetsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aSSETSNEWTableAdapter) Is Nothing) Then
                    Me._aSSETSNEWTableAdapter.Connection = CType(revertConnections(Me._aSSETSNEWTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._aSSETSNEWTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._atransTableAdapter) Is Nothing) Then
                    Me._atransTableAdapter.Connection = CType(revertConnections(Me._atransTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._atransTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._binallocTableAdapter) Is Nothing) Then
                    Me._binallocTableAdapter.Connection = CType(revertConnections(Me._binallocTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._binallocTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._catTableAdapter) Is Nothing) Then
                    Me._catTableAdapter.Connection = CType(revertConnections(Me._catTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._catTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._countryTableAdapter) Is Nothing) Then
                    Me._countryTableAdapter.Connection = CType(revertConnections(Me._countryTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._countryTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._custdiscTableAdapter) Is Nothing) Then
                    Me._custdiscTableAdapter.Connection = CType(revertConnections(Me._custdiscTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._custdiscTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dummy_TableAdapter) Is Nothing) Then
                    Me._dummy_TableAdapter.Connection = CType(revertConnections(Me._dummy_TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._dummy_TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._enquiryTableAdapter) Is Nothing) Then
                    Me._enquiryTableAdapter.Connection = CType(revertConnections(Me._enquiryTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._enquiryTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._eventTableAdapter) Is Nothing) Then
                    Me._eventTableAdapter.Connection = CType(revertConnections(Me._eventTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._eventTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._foxuserTableAdapter) Is Nothing) Then
                    Me._foxuserTableAdapter.Connection = CType(revertConnections(Me._foxuserTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._foxuserTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._invlineTableAdapter) Is Nothing) Then
                    Me._invlineTableAdapter.Connection = CType(revertConnections(Me._invlineTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._invlineTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._invoiceheadTableAdapter) Is Nothing) Then
                    Me._invoiceheadTableAdapter.Connection = CType(revertConnections(Me._invoiceheadTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._invoiceheadTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._invtransTableAdapter) Is Nothing) Then
                    Me._invtransTableAdapter.Connection = CType(revertConnections(Me._invtransTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._invtransTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._invtransoldTableAdapter) Is Nothing) Then
                    Me._invtransoldTableAdapter.Connection = CType(revertConnections(Me._invtransoldTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._invtransoldTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._invtransold6TableAdapter) Is Nothing) Then
                    Me._invtransold6TableAdapter.Connection = CType(revertConnections(Me._invtransold6TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._invtransold6TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._invworkTableAdapter) Is Nothing) Then
                    Me._invworkTableAdapter.Connection = CType(revertConnections(Me._invworkTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._invworkTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._invworkoldTableAdapter) Is Nothing) Then
                    Me._invworkoldTableAdapter.Connection = CType(revertConnections(Me._invworkoldTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._invworkoldTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._issueTableAdapter) Is Nothing) Then
                    Me._issueTableAdapter.Connection = CType(revertConnections(Me._issueTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._issueTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._locationTableAdapter) Is Nothing) Then
                    Me._locationTableAdapter.Connection = CType(revertConnections(Me._locationTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._locationTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mainTableAdapter) Is Nothing) Then
                    Me._mainTableAdapter.Connection = CType(revertConnections(Me._mainTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._mainTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._markupTableAdapter) Is Nothing) Then
                    Me._markupTableAdapter.Connection = CType(revertConnections(Me._markupTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._markupTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._namesTableAdapter) Is Nothing) Then
                    Me._namesTableAdapter.Connection = CType(revertConnections(Me._namesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._namesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._orddetailTableAdapter) Is Nothing) Then
                    Me._orddetailTableAdapter.Connection = CType(revertConnections(Me._orddetailTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._orddetailTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._orderheadTableAdapter) Is Nothing) Then
                    Me._orderheadTableAdapter.Connection = CType(revertConnections(Me._orderheadTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._orderheadTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._orderlineTableAdapter) Is Nothing) Then
                    Me._orderlineTableAdapter.Connection = CType(revertConnections(Me._orderlineTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._orderlineTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._qictrlTableAdapter) Is Nothing) Then
                    Me._qictrlTableAdapter.Connection = CType(revertConnections(Me._qictrlTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._qictrlTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._qictrlnewTableAdapter) Is Nothing) Then
                    Me._qictrlnewTableAdapter.Connection = CType(revertConnections(Me._qictrlnewTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._qictrlnewTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._qictrloldTableAdapter) Is Nothing) Then
                    Me._qictrloldTableAdapter.Connection = CType(revertConnections(Me._qictrloldTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._qictrloldTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._qictrlold6TableAdapter) Is Nothing) Then
                    Me._qictrlold6TableAdapter.Connection = CType(revertConnections(Me._qictrlold6TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._qictrlold6TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._quotedetailTableAdapter) Is Nothing) Then
                    Me._quotedetailTableAdapter.Connection = CType(revertConnections(Me._quotedetailTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._quotedetailTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._quoteheadTableAdapter) Is Nothing) Then
                    Me._quoteheadTableAdapter.Connection = CType(revertConnections(Me._quoteheadTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._quoteheadTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._statusTableAdapter) Is Nothing) Then
                    Me._statusTableAdapter.Connection = CType(revertConnections(Me._statusTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._statusTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._teventsTableAdapter) Is Nothing) Then
                    Me._teventsTableAdapter.Connection = CType(revertConnections(Me._teventsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._teventsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tran2TableAdapter) Is Nothing) Then
                    Me._tran2TableAdapter.Connection = CType(revertConnections(Me._tran2TableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tran2TableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tranbinsTableAdapter) Is Nothing) Then
                    Me._tranbinsTableAdapter.Connection = CType(revertConnections(Me._tranbinsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tranbinsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tranctlTableAdapter) Is Nothing) Then
                    Me._tranctlTableAdapter.Connection = CType(revertConnections(Me._tranctlTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tranctlTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._trandescTableAdapter) Is Nothing) Then
                    Me._trandescTableAdapter.Connection = CType(revertConnections(Me._trandescTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._trandescTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tranmemoTableAdapter) Is Nothing) Then
                    Me._tranmemoTableAdapter.Connection = CType(revertConnections(Me._tranmemoTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tranmemoTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._addressRecordTypeTableAdapter) Is Nothing) Then
                    Me._addressRecordTypeTableAdapter.Connection = CType(revertConnections(Me._addressRecordTypeTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._addressRecordTypeTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
